(undo-tree-save-format-version . 1)
"f8bf55b700505f1418f990a204586a2bfb7b58e1"
[nil nil nil nil (25594 4907 261828 59000) 0 nil]
([nil nil ((1 . 23) (t . -1)) nil (25594 4907 261827 209000) 0 nil])
([nil nil ((23 . 24) (22 . 23) 21) nil (25594 4907 261826 387000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32 . 33) (#("
" 0 1 (fontified nil)) . -787) (24 . 788)) nil (25594 4907 261825 393000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24)) nil (25594 4907 261824 353000) 0 nil])
([nil nil ((40 . 46) (30 . 40) (#("subpr" 0 5 (fontified t)) . -30) (undo-tree-id24 . -5) (undo-tree-id25 . -5) 35 (31 . 35) (23 . 31) (23 . 24)) nil (25594 4907 261823 153000) 0 nil])
([nil nil ((#("                " 0 16 (fontified nil)) . -720) (708 . 720) (#("            " 0 12 (fontified nil)) . -702) (694 . 702) (#("                " 0 16 (fontified nil)) . -631) (619 . 631) (#("            " 0 12 (fontified nil)) . -604) (596 . 604) (#("                " 0 16 (fontified nil)) . -536) (524 . 536) (#("            " 0 12 (fontified nil)) . -503) (495 . 503) (#("                " 0 16 (fontified nil)) . -437) (425 . 437) (#("            " 0 12 (fontified nil)) . -408) (400 . 408) (#("            " 0 12 (fontified nil)) . -339) (331 . 339) (#("            " 0 12 (fontified nil)) . -316) (308 . 316) (#("            " 0 12 (fontified nil)) . -261) (253 . 261) (#("            " 0 12 (fontified nil)) . -218) (210 . 218) (#("            " 0 12 (fontified nil)) . -162) (154 . 162) (#("            " 0 12 (fontified nil)) . -121) (113 . 121) (#("        " 0 8 (fontified nil)) . -95) (91 . 95) (#("        " 0 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -52) (48 . 52) 811) nil (25594 4907 261819 263000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -656) (648 . 656) (#("        " 0 8 (fontified nil)) . -642) (638 . 642) (#("            " 0 12 (fontified nil)) . -575) (567 . 575) (#("        " 0 8 (fontified nil)) . -552) (548 . 552) (#("            " 0 12 (fontified nil)) . -488) (480 . 488) (#("        " 0 8 (fontified nil)) . -459) (455 . 459) (#("            " 0 12 (fontified nil)) . -397) (389 . 397) (#("        " 0 8 (fontified nil)) . -372) (368 . 372) (#("        " 0 8 (fontified nil)) . -307) (303 . 307) (#("        " 0 8 (fontified nil)) . -288) (284 . 288) (#("        " 0 8 (fontified nil)) . -237) (233 . 237) (#("        " 0 8 (fontified nil)) . -198) (194 . 198) (#("        " 0 8 (fontified nil)) . -146) (142 . 146) (#("        " 0 8 (fontified nil)) . -109) (105 . 109) (#("    " 0 4 (fontified t)) . -87) (#("    " 0 4 (fontified t)) . -48) 747) nil (25594 4907 261813 247000) 0 nil])
([nil nil ((58 . 70) (#("cmd_output" 0 10 (fontified t)) . 58) (undo-tree-id22 . -9) (undo-tree-id23 . -4)) nil (25594 4907 261808 474000) 0 nil])
([nil nil ((#("    battery += '%'
" 0 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 15 (fontified t) 15 18 (fontified t face font-lock-string-face) 18 19 (fontified t)) . 286) (undo-tree-id20 . -17) (undo-tree-id21 . -18) 303) nil (25594 4907 261806 492000) 0 nil])
([nil nil ((#("    # literal % should be passed as %% to lemonbar
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 51 (fontified t face font-lock-comment-face)) . 235) (undo-tree-id18 . -17) (undo-tree-id19 . -50) 252) nil (25594 4907 261804 394000) 0 nil])
([nil nil ((48 . 49) 65) nil (25594 4907 261802 122000) 0 nil])
([nil nil ((nil rear-nonsticky nil 56 . 57) (#("
" 0 1 (fontified nil)) . -163) (48 . 164)) nil (25594 4907 261801 176000) 0 nil])
([nil nil ((#("                      " 0 22 (fontified nil)) . -128) (108 . 128) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -53) (undo-tree-id15 . -8) (undo-tree-id16 . -8) (undo-tree-id17 . -8) (49 . 53) 163) nil (25594 4907 261799 915000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -49) (undo-tree-id13 . -4) (undo-tree-id14 . -4)) nil (25594 4907 261797 223000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -118) 105) nil (25594 4907 261795 128000) 0 nil])
([nil nil ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 49) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -5) (undo-tree-id6 . -4) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -5) 53) nil (25594 4907 261793 872000) 0 nil])
([nil nil ((#("     " 0 5 (fontified t)) . -108) (undo-tree-id0 . -4) 100) nil (25594 4907 261783 577000) 0 nil])
([nil nil ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 351) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) 355 (t 25594 4907 265667 444000)) nil (25594 5011 380419 139000) 0 nil])
([nil nil ((478 . 480) (458 . 478) (457 . 459) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -457) (457 . 458) (451 . 457) (430 . 451) (422 . 430) (421 . 423) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -421) (421 . 422) (420 . 422) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -420) (420 . 421) (419 . 421) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -419) (414 . 420) (#("r" 0 1 (fontified t)) . -414) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("e" 0 1 (fontified t)) . -415) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("t" 0 1 (fontified t)) . -416) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 417 (414 . 417) (406 . 414) (406 . 407) 451) nil (25594 5011 380414 444000) 0 nil])
([nil nil ((482 . 483) (420 . 421) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 481) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 420) (undo-tree-id91 . -1) 473) nil (25594 5011 380408 287000) 0 nil])
([nil nil ((471 . 472) (#("'" 0 1 (fontified t face font-lock-string-face)) . 471) (undo-tree-id89 . -1) (undo-tree-id90 . -1)) nil (25594 5011 380406 227000) 0 nil])
([nil nil ((480 . 481)) nil (25594 5011 380403 66000) 0 nil])
([nil nil ((486 . 490) (481 . 486)) nil (25594 5011 380402 479000) 0 nil])
([nil nil ((491 . 494) (#("o" 0 1 (fontified t face font-lock-string-face)) . -491) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) 492 (490 . 492) (#("b" 0 1 (fontified t face font-lock-string-face)) . -490) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -491) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 492 (#("t" 0 1 (fontified t face font-lock-string-face)) . -492) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 493 (490 . 493) (489 . 491) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -489) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (489 . 490) (#("P" 0 1 (fontified t face font-lock-string-face)) . -489) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 490 (489 . 490)) nil (25594 5011 380400 304000) 0 nil])
([nil nil ((497 . 498)) nil (25594 5011 380371 557000) 0 nil])
([nil nil ((458 . 463) (#("lable" 0 5 (fontified t face font-lock-string-face)) . 458) (undo-tree-id34 . -4) (undo-tree-id35 . -5) (undo-tree-id36 . -5)) nil (25594 5011 380370 799000) 0 nil])
([nil nil ((498 . 500)) nil (25594 5011 380368 506000) 0 nil])
([nil nil ((503 . 507) (#("t" 0 1 (fontified t face font-lock-string-face)) . -503) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 504 (500 . 504) (499 . 501) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -499) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (499 . 500)) nil (25594 5011 380367 85000) 0 nil])
([nil nil ((508 . 509)) nil (25594 5011 380354 999000) 0 nil])
([nil nil ((507 . 512)) nil (25594 5011 380351 794000) 0 nil])
([nil nil ((506 . 507) (#("y" 0 1 (fontified t face font-lock-string-face)) . 506) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (t 25594 5011 385668 957000)) nil (25594 5032 187628 365000) 0 nil])
([nil nil ((#("        return '%{F'+cdict['red']+'}'+ficon(icon)+battery+'%{F-}'
" 0 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t face font-lock-string-face) 28 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face) 32 33 (fontified t face (rainbow-delimiters-depth-1-face)) 33 34 (fontified t) 34 35 (fontified t face font-lock-string-face) 35 36 (fontified t face font-lock-string-face) 36 37 (fontified t face font-lock-string-face) 37 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-1-face)) 44 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-1-face)) 49 58 (fontified t) 58 59 (fontified t face font-lock-string-face) 59 60 (fontified t face font-lock-string-face) 60 61 (fontified t face font-lock-string-face) 61 63 (fontified t face font-lock-string-face) 63 64 (fontified t face font-lock-string-face) 64 65 (fontified t face font-lock-string-face) 65 66 (fontified t)) . 519) (undo-tree-id106 . -65) (undo-tree-id107 . -45) (undo-tree-id108 . -45) (undo-tree-id109 . -45) (undo-tree-id110 . -64) (undo-tree-id111 . -8) (undo-tree-id112 . -8) (undo-tree-id113 . -8) (undo-tree-id114 . -8) (undo-tree-id115 . -8) (undo-tree-id116 . -8) (undo-tree-id117 . -8) (undo-tree-id118 . -8) (undo-tree-id119 . -8) (undo-tree-id120 . -8) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -8) (undo-tree-id124 . -8) (undo-tree-id125 . -8) (undo-tree-id126 . -8) (undo-tree-id127 . -8) (undo-tree-id128 . -65) (undo-tree-id129 . -64) (undo-tree-id130 . -65) (undo-tree-id131 . -8) (undo-tree-id132 . -65) (undo-tree-id133 . -8) (undo-tree-id134 . -64) (undo-tree-id135 . -64) (undo-tree-id136 . -64) (undo-tree-id137 . -64) (undo-tree-id138 . -65) (undo-tree-id139 . -8) (undo-tree-id140 . -65) (undo-tree-id141 . -8) (undo-tree-id142 . -66) 583) nil (25594 5032 187446 20000) 0 nil])
([nil nil ((544 . 657) 567) nil (25594 5032 187424 948000) 0 nil])
([nil nil ((610 . 615) (#("red" 0 3 (fontified t face font-lock-string-face)) . 610) (undo-tree-id103 . -2) (undo-tree-id104 . -3) (undo-tree-id105 . -3)) nil (25594 5032 187422 130000) 0 nil])
([nil nil ((#("        return '%{F'+cdict[\"green\"]+'}'+ficon(icon)+battery+'%{F-}'
" 0 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 34 (fontified t face font-lock-string-face) 34 35 (fontified t face (rainbow-delimiters-depth-1-face)) 35 36 (fontified t) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-1-face)) 46 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-1-face)) 51 60 (fontified t) 60 61 (fontified t face font-lock-string-face) 61 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 65 (fontified t face font-lock-string-face) 65 66 (fontified t face font-lock-string-face) 66 67 (fontified t face font-lock-string-face) 67 68 (fontified t)) . 659) (undo-tree-id202 . -67) (undo-tree-id203 . -66) (undo-tree-id204 . -8) (undo-tree-id205 . -67) (undo-tree-id206 . -66) (undo-tree-id207 . -66) (undo-tree-id208 . -66) (undo-tree-id209 . -66) (undo-tree-id210 . -66) (undo-tree-id211 . -66) (undo-tree-id212 . -66) (undo-tree-id213 . -66) (undo-tree-id214 . -66) (undo-tree-id215 . -66) (undo-tree-id216 . -66) (undo-tree-id217 . -68) 725 (t 25594 5032 192335 920000)) nil (25594 5049 769217 819000) 0 nil])
([nil nil ((678 . 793) 695) nil (25594 5049 769205 198000) 0 nil])
([nil nil ((#("        return '%{F'+cdict[\"l_yellow\"]+'}'+ficon(icon)+battery+'%{F-}'
" 0 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 37 (fontified t face font-lock-string-face) 37 38 (fontified t face (rainbow-delimiters-depth-1-face)) 38 39 (fontified t) 39 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 42 (fontified t face font-lock-string-face) 42 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-1-face)) 49 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-1-face)) 54 63 (fontified t) 63 64 (fontified t face font-lock-string-face) 64 65 (fontified t face font-lock-string-face) 65 66 (fontified t face font-lock-string-face) 66 68 (fontified t face font-lock-string-face) 68 69 (fontified t face font-lock-string-face) 69 70 (fontified t face font-lock-string-face) 70 71 (fontified t)) . 793) (undo-tree-id159 . -70) (undo-tree-id160 . -8) (undo-tree-id161 . -8) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -8) (undo-tree-id169 . -17) (undo-tree-id170 . 71) (undo-tree-id171 . -8) (undo-tree-id172 . -8) (undo-tree-id173 . -8) (undo-tree-id174 . -8) (undo-tree-id175 . -8) (undo-tree-id176 . -8) (undo-tree-id177 . -8) (undo-tree-id178 . -8) (undo-tree-id179 . -8) (undo-tree-id180 . -70) (undo-tree-id181 . -8) (undo-tree-id182 . -8) (undo-tree-id183 . -8) (undo-tree-id184 . -8) (undo-tree-id185 . -8) (undo-tree-id186 . -8) (undo-tree-id187 . -70) (undo-tree-id188 . -8) (undo-tree-id189 . -70) (undo-tree-id190 . -8) (undo-tree-id191 . -8) (undo-tree-id192 . -8) (undo-tree-id193 . -8) (undo-tree-id194 . -8) (undo-tree-id195 . -8) (undo-tree-id196 . -8) (undo-tree-id197 . -70) (undo-tree-id198 . -8) (undo-tree-id199 . -70) (undo-tree-id200 . -8) (undo-tree-id201 . -71) 801) nil (25594 5049 769202 532000) 0 nil])
([nil nil ((744 . 750) (#("green" 0 5 (fontified t face font-lock-string-face)) . 744) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -5) (undo-tree-id158 . -5) 748) nil (25594 5049 768979 324000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -804) (undo-tree-id291 . -8) (undo-tree-id292 . -8) (undo-tree-id293 . -8) (undo-tree-id294 . -8) (undo-tree-id295 . -8) (undo-tree-id296 . -8) (undo-tree-id297 . -8) (undo-tree-id298 . -8) 812 (804 . 812) (804 . 805) 837 (t 25594 5049 772336 169000)) nil (25594 5067 749360 990000) 0 nil])
([nil nil ((nil rear-nonsticky nil 808 . 809) (nil fontified nil 804 . 809) (804 . 809)) nil (25594 5067 749354 618000) 0 nil])
([nil nil ((#("green
" 0 4 (fontified t) 4 5 (fontified t rear-nonsticky t) 5 6 (fontified t)) . 804) (undo-tree-id263 . 1) (undo-tree-id264 . -5) (undo-tree-id265 . -4) (undo-tree-id266 . 1) (undo-tree-id267 . 1) (undo-tree-id268 . 1) (undo-tree-id269 . 1) (undo-tree-id270 . -4) (undo-tree-id271 . 1) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -5) (undo-tree-id276 . -5) (undo-tree-id277 . -5) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -6) 808) nil (25594 5067 749352 535000) 0 nil])
([nil nil ((nil rear-nonsticky nil 811 . 812) (#("
" 0 1 (fontified nil)) . -919) (803 . 920) 798) nil (25594 5067 749125 195000) 0 nil])
([nil nil ((#("        return ficon(icon)+battery
" 0 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 34 (fontified t) 34 35 (fontified t)) . 920) (undo-tree-id225 . 35) (undo-tree-id226 . -34) (undo-tree-id227 . -35) (undo-tree-id228 . -8) (undo-tree-id229 . -33) (undo-tree-id230 . -33) (undo-tree-id231 . -33) (undo-tree-id232 . -33) (undo-tree-id233 . -33) (undo-tree-id234 . -33) (undo-tree-id235 . -33) (undo-tree-id236 . -33) (undo-tree-id237 . -33) (undo-tree-id238 . -33) (undo-tree-id239 . -33) (undo-tree-id240 . -34) (undo-tree-id241 . -8) (undo-tree-id242 . -34) (undo-tree-id243 . -8) (undo-tree-id244 . -33) (undo-tree-id245 . 35) (undo-tree-id246 . 35) (undo-tree-id247 . 35) (undo-tree-id248 . 35) (undo-tree-id249 . 35) (undo-tree-id250 . 35) (undo-tree-id251 . 35) (undo-tree-id252 . -34) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -8) (undo-tree-id257 . -34) (undo-tree-id258 . -8) (undo-tree-id259 . -8) (undo-tree-id260 . -8) (undo-tree-id261 . -8) (undo-tree-id262 . -35) 928) nil (25594 5067 749123 13000) 0 nil])
([nil nil ((#("yellow" 0 6 (fontified t face font-lock-string-face)) . 870) (undo-tree-id221 . -5) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -6)) nil (25594 5067 749099 530000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face font-lock-string-face)) . 870) (undo-tree-id218 . 1) (undo-tree-id219 . -1) (undo-tree-id220 . -1)) nil (25594 5067 749092 405000) 0 nil])
([nil nil ((818 . 819) (t 25594 5067 752336 429000)) nil (25594 5192 730992 450000) 0 nil])
([nil nil ((692 . 693)) nil (25594 5192 730991 494000) 0 nil])
([nil nil ((558 . 559)) nil (25594 5192 730990 543000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-keyword-face)) . -558) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) 559 (558 . 559)) nil (25594 5192 730989 214000) 0 nil])
([nil nil ((420 . 421)) nil (25594 5192 730965 667000) 0 nil])
([nil nil ((#(" \"{bat_vlu:0.0f}%\"" 0 2 (face font-lock-string-face fontified t) 2 16 (face nil fontified t) 16 18 (face font-lock-string-face fontified t)) . 639) (undo-tree-id31 . -17) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -17) (undo-tree-id35 . -17) (undo-tree-id36 . -18) (undo-tree-id37 . -17) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -6) (undo-tree-id43 . -6) (undo-tree-id44 . -7) (undo-tree-id45 . -7) (undo-tree-id46 . -9) (undo-tree-id47 . -9) (undo-tree-id48 . -10) (undo-tree-id49 . -10) (undo-tree-id50 . -11) (undo-tree-id51 . -11) (undo-tree-id52 . -12) (undo-tree-id53 . -12) (undo-tree-id54 . -13) (undo-tree-id55 . -13) (undo-tree-id56 . -14) (undo-tree-id57 . -14) (undo-tree-id58 . -15) (undo-tree-id59 . -15) (undo-tree-id60 . -16) (undo-tree-id61 . -16) (undo-tree-id62 . -17) (undo-tree-id63 . -17) (undo-tree-id64 . -17) (undo-tree-id65 . -18) (undo-tree-id66 . -17) 656 (t 25594 5192 735671 566000)) nil (25598 17219 146351 472000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t)) . 639) (undo-tree-id25 . 1) (undo-tree-id26 . 1) (undo-tree-id27 . 1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1)) nil (25598 17219 146331 324000) 0 nil])
([nil nil ((#("(box :space-evenly false :spacing 5 " 0 36 (face font-lock-string-face fontified t)) . 561) (undo-tree-id0 . -35) (undo-tree-id1 . -35) (undo-tree-id2 . -35) (undo-tree-id3 . -36) (undo-tree-id4 . -36) (undo-tree-id5 . -35) (undo-tree-id6 . -35) (undo-tree-id7 . -36) (undo-tree-id8 . -35) (undo-tree-id9 . -35) (undo-tree-id10 . -35) (undo-tree-id11 . -35) (undo-tree-id12 . -34) (undo-tree-id13 . -34) (undo-tree-id14 . -26) (undo-tree-id15 . -26) (undo-tree-id16 . -25) (undo-tree-id17 . -25) (undo-tree-id18 . -19) (undo-tree-id19 . -19) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . 36) (undo-tree-id23 . -1) (undo-tree-id24 . -36)) nil (25598 17219 146326 264000) 0 nil])
([nil nil ((568 . 579) (t 25598 17219 165483 912000)) nil (25599 45012 681247 251000) 0 nil])
([nil nil ((577 . 583)) nil (25599 45012 681235 814000) 0 nil])
([nil current ((584 . 598) (t 25599 45012 688935 707000)) nil (25599 45339 185072 3000) 0 nil])
nil
