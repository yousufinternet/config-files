(undo-tree-save-format-version . 1)
"d270f7741b5d4f78979abcb5581ef484e0ea23d9"
[nil nil nil nil (25589 10459 481886 384000) 0 nil]
([nil nil ((1 . 23) (t . -1)) nil (25589 10459 481885 570000) 0 nil])
([nil nil ((23 . 24) (22 . 23) 21) nil (25589 10459 481884 935000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32 . 33) (#("
" 0 1 (fontified nil)) . -434) (24 . 435)) nil (25589 10459 481884 184000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -336) (undo-tree-id7 . 12) (332 . 336) (#("            " 0 12 (fontified nil)) . -264) (undo-tree-id8 . 12) (260 . 264) (#("            " 0 12 (fontified nil)) . -192) (undo-tree-id9 . 12) (188 . 192) (#("            " 0 12 (fontified nil)) . -120) (undo-tree-id10 . 12) (116 . 120) (#("            " 0 12 (fontified nil)) . -44) (undo-tree-id11 . 12) (40 . 44) (#("        " 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t)) . -25) (undo-tree-id12 . -8) (undo-tree-id13 . -8) (undo-tree-id14 . -8) (undo-tree-id15 . -8) (undo-tree-id16 . -8) (undo-tree-id17 . -8) (undo-tree-id18 . -8) (undo-tree-id19 . -7) (undo-tree-id20 . -8) (undo-tree-id21 . -8) (undo-tree-id22 . -8) (undo-tree-id23 . -8) (undo-tree-id24 . -8) (undo-tree-id25 . -8) (undo-tree-id26 . -8) (undo-tree-id27 . -8) 435) nil (25589 10459 481882 826000) 0 nil])
([nil nil ((#("self" 0 4 (fontified t face font-lock-keyword-face)) . 25) (undo-tree-id4 . -3) (undo-tree-id5 . 4) (undo-tree-id6 . -4)) nil (25589 10459 481870 273000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 25) (undo-tree-id0 . 1) (undo-tree-id1 . 1) (undo-tree-id2 . -1) (undo-tree-id3 . -1)) nil (25589 10459 481867 966000) 0 nil])
([nil nil ((382 . 383) (381 . 382) 330) nil (25589 10459 481846 277000) 0 nil])
([nil nil ((nil rear-nonsticky nil 47 . 48) (nil fontified nil 24 . 48) (24 . 48)) nil (25589 10459 481845 607000) 0 nil])
([nil nil ((48 . 49) 47) nil (25589 10459 481842 478000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 35) (t 25589 10459 485719 468000)) nil (25589 10649 170849 41000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -36) (35 . 36)) nil (25589 10649 170848 566000) 0 nil])
([nil nil ((27 . 32)) nil (25589 10649 170848 226000) 0 nil])
([nil nil ((#("47.7888" 0 2 (fontified t face highlight-numbers-number) 2 3 (fontified t) 3 6 (fontified t face highlight-numbers-number) 6 7 (rear-nonsticky t fontified t face highlight-numbers-number)) . 45) (undo-tree-id116 . -6) (undo-tree-id117 . -6) (undo-tree-id118 . -6) (undo-tree-id119 . -6) (undo-tree-id120 . -6) (undo-tree-id121 . -6) 51) nil (25589 10649 170847 677000) 0 nil])
([nil nil ((40 . 42)) nil (25589 10649 170498 790000) 0 nil])
([nil nil ((nil rear-nonsticky nil 48 . 49) (nil fontified nil 42 . 49) (42 . 49) 41) nil (25589 10649 170498 448000) 0 nil])
([nil nil ((#("lon=
" 0 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t) 4 5 (fontified t)) . 50) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . 1) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -4) 53) nil (25589 10649 170497 760000) 0 nil])
([nil nil ((409 . 418) (#("a" 0 1 (fontified t)) . -409) (undo-tree-id101 . -1) (#("p" 0 1 (fontified t)) . -410) (undo-tree-id102 . -1) (#("i" 0 1 (fontified t)) . -411) (undo-tree-id103 . -1) (#("k" 0 1 (fontified t)) . -412) (undo-tree-id104 . -1) (#("e" 0 1 (fontified t)) . -413) (undo-tree-id105 . -1) (#("y" 0 1 (fontified t)) . -414) (undo-tree-id106 . -1) (#(" " 0 1 (fontified t)) . -415) (undo-tree-id107 . -1) 416 (409 . 416)) nil (25589 10649 170493 148000) 0 nil])
([nil nil ((428 . 429) (427 . 429) (#("[" 0 1 (fontified nil)) . -427) (426 . 428) (419 . 426) (418 . 420) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -418) (409 . 419) (409 . 410) 417) nil (25589 10649 170489 208000) 0 nil])
([nil nil ((431 . 436)) nil (25589 10649 170487 904000) 0 nil])
([nil nil ((433 . 434) (432 . 434) (#("'" 0 1 (fontified nil)) . -432) (432 . 433) (430 . 432)) nil (25589 10649 170487 493000) 0 nil])
([nil nil ((441 . 442)) nil (25589 10649 170487 6000) 0 nil])
([nil nil ((443 . 447) 451) nil (25589 10649 170486 420000) 0 nil])
([nil nil ((462 . 464) (#("(" 0 1 (fontified nil)) . -462) (456 . 463)) nil (25589 10649 170485 969000) 0 nil])
([nil nil ((23 . 33) (23 . 24)) nil (25589 10649 170485 602000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -477) (undo-tree-id100 . -4) 481 (476 . 481) 476) nil (25589 10649 170485 75000) 0 nil])
([nil nil ((nil rear-nonsticky nil 485 . 486) (#("
" 0 1 (fontified nil)) . -1086) (477 . 1087)) nil (25589 10649 170484 26000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -984) (undo-tree-id93 . -8) (undo-tree-id94 . -8) (undo-tree-id95 . -8) (undo-tree-id96 . -8) (980 . 984) (#("        " 0 8 (fontified t)) . -962) (#("                " 0 16 (fontified nil)) . -941) (933 . 941) (#("                " 0 16 (fontified nil)) . -919) (911 . 919) (#("                " 0 16 (fontified nil)) . -892) (884 . 892) (#("            " 0 12 (fontified nil)) . -858) (854 . 858) (#("                " 0 16 (fontified nil)) . -825) (817 . 825) (#("            " 0 12 (fontified nil)) . -804) (800 . 804) (#("            " 0 12 (fontified nil)) . -766) (762 . 766) (#("            " 0 12 (fontified nil)) . -647) (643 . 647) (#("            " 0 12 (fontified nil)) . -487) (483 . 487) (#("        " 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t)) . -478) (undo-tree-id97 . -8) (undo-tree-id98 . -8) (undo-tree-id99 . -8) 1076) nil (25589 10649 170482 500000) 0 nil])
([nil nil ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face nil)) . 553) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) 557) nil (25589 10649 170477 955000) 0 nil])
([nil nil ((#("self" 0 4 (fontified t face font-lock-keyword-face)) . 563) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) 566) nil (25589 10649 170473 508000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face nil)) . 563) (undo-tree-id82 . 1)) nil (25589 10649 170470 786000) 0 nil])
([nil nil ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face nil)) . 606) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -5) (undo-tree-id75 . -4) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -5) 610) nil (25589 10649 170469 685000) 0 nil])
([nil nil ((608 . 609) (#("I" 0 1 (fontified nil face nil)) . 608) (undo-tree-id47 . 1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . 1) (undo-tree-id52 . 1) (undo-tree-id53 . 1) (undo-tree-id54 . 1) (607 . 608) (#("P" 0 1 (fontified nil face nil)) . 607) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . 1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . 1) (undo-tree-id64 . 1) (606 . 607) (#("A" 0 1 (fontified t face nil)) . 606) (undo-tree-id65 . 1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 608) nil (25589 10649 170463 190000) 0 nil])
([nil nil ((#("    # req_link = f'http://api.openweathermap.org/data/2.5/weather?q={self.city_name}&units=metric&appid={self.APIkey}'
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 119 (fontified t face font-lock-comment-face)) . 628) (undo-tree-id28 . -118) (undo-tree-id29 . -28) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -28) (undo-tree-id33 . -28) (undo-tree-id34 . -28) (undo-tree-id35 . -28) (undo-tree-id36 . -28) (undo-tree-id37 . -28) (undo-tree-id38 . -118) (undo-tree-id39 . -4) (undo-tree-id40 . -118) (undo-tree-id41 . -4) (undo-tree-id42 . -28) (undo-tree-id43 . -28) (undo-tree-id44 . -28) (undo-tree-id45 . -28) (undo-tree-id46 . -119) 656) nil (25589 10649 170453 553000) 0 nil])
([nil nil ((34 . 49) (33 . 34) 32) nil (25589 10649 170440 77000) 0 nil])
([nil nil ((34 . 45) (34 . 35) 48) nil (25589 10649 170439 432000) 0 nil])
([nil nil ((884 . 885)) nil (25589 10649 170436 515000) 0 nil])
([nil nil ((#("    return
" 0 4 (fontified t) 4 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t)) . 874) (undo-tree-id479 . -10) (undo-tree-id480 . -4) (undo-tree-id481 . -9) (undo-tree-id482 . -9) 883 (t 25589 10649 179055 870000)) nil (25589 11098 709623 643000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face font-lock-string-face syntax-table (15))) . 895) (894 . 895) (893 . 895) (#("\"" 0 1 (fontified nil)) . -893) (891 . 894) (886 . 890) (885 . 887) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -885) (885 . 886) (#("i" 0 1 (fontified t)) . -885) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (#("c" 0 1 (fontified t)) . -886) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#("o" 0 1 (fontified t)) . -887) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (#("n" 0 1 (fontified t)) . -888) (undo-tree-id477 . -1) (undo-tree-id478 . -1) 889 (885 . 889) (884 . 886) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -884) (884 . 885) (883 . 885) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -883) (878 . 884) (874 . 878)) nil (25589 11098 709620 403000) 0 nil])
([nil nil ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 719) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) 723) nil (25589 11098 709615 638000) 0 nil])
([nil nil ((#("    if self.wait_time == 600:
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 11 (fontified t face font-lock-keyword-face) 11 25 (fontified t) 25 28 (fontified t face highlight-numbers-number) 28 30 (fontified t)) . 743) (undo-tree-id464 . -29) (undo-tree-id465 . -7) 750) nil (25589 11098 709612 489000) 0 nil])
([nil nil ((#("        self.wait_time = 1
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-variable-name-face) 22 25 (fontified t) 25 26 (fontified t face highlight-numbers-number) 26 27 (fontified t)) . 743) (undo-tree-id462 . -26) (undo-tree-id463 . -7) 750) nil (25589 11098 709611 258000) 0 nil])
([nil nil ((#("        time.sleep(4)
" 0 8 (fontified t) 8 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 20 (fontified t face highlight-numbers-number) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 22 (fontified t)) . 743) (undo-tree-id460 . -21) (undo-tree-id461 . -7) 750) nil (25589 11098 709610 102000) 0 nil])
([nil nil ((#("        self.wait_time = 600
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-variable-name-face) 22 25 (fontified t) 25 28 (fontified t face highlight-numbers-number) 28 29 (fontified t)) . 743) (undo-tree-id456 . -28) (undo-tree-id457 . -14) (undo-tree-id458 . -7) (undo-tree-id459 . -14) 750) nil (25589 11098 709608 811000) 0 nil])
([nil nil ((#("    if response:
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-variable-name-face) 15 17 (fontified t)) . 694) (undo-tree-id453 . -16) (undo-tree-id454 . -7) (undo-tree-id455 . -7) 701) nil (25589 11098 709606 651000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -698) (undo-tree-id448 . -8) (undo-tree-id449 . -8) (undo-tree-id450 . -8) (undo-tree-id451 . -8) (undo-tree-id452 . -7) (694 . 698) 701) nil (25589 11098 709604 958000) 0 nil])
([nil nil ((698 . 706) (#("cache" 0 5 (fontified t face font-lock-variable-name-face)) . 698) (undo-tree-id446 . -4) (undo-tree-id447 . 5)) nil (25589 11098 709602 322000) 0 nil])
([nil nil ((782 . 789) (781 . 783) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -781) (781 . 782) (780 . 782) (#("[" 0 1 (fontified nil)) . -780) (772 . 781) (#("c" 0 1 (fontified t)) . -772) (undo-tree-id430 . -1) (undo-tree-id431 . -1) 773 (#("a" 0 1 (fontified t)) . -773) (undo-tree-id432 . -1) (undo-tree-id433 . -1) 774 (772 . 774) (771 . 773) (#("(" 0 1 (fontified nil)) . -771) (762 . 772) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -762) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 763) (#("s" 0 1 (fontified t face font-lock-string-face)) . -763) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -764) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -765) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -766) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -767) (undo-tree-id444 . -1) (undo-tree-id445 . -1) 768 (763 . 768)) nil (25589 11098 709599 381000) 0 nil])
([nil nil ((796 . 800) (793 . 796) (792 . 794) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -792) (792 . 793) (791 . 793) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -791) (791 . 792)) nil (25589 11098 709591 84000) 0 nil])
([nil nil ((803 . 804) (802 . 804) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -802) (802 . 803)) nil (25589 11098 709590 257000) 0 nil])
([nil nil ((807 . 811) (806 . 808) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -806) (806 . 807) (805 . 807) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -805) (805 . 806)) nil (25589 11098 709589 520000) 0 nil])
([nil nil ((822 . 830) (#("D" 0 1 (fontified t face font-lock-string-face)) . -822) (undo-tree-id427 . -1) (undo-tree-id428 . -1) 823 (822 . 823) (821 . 823) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -821) (821 . 822) (820 . 822) (#("[" 0 1 (fontified nil)) . -820) (815 . 821) (#("s" 0 1 (fontified t)) . -815) (undo-tree-id429 . -1) 816 (813 . 816)) nil (25589 11098 709588 482000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . 822) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1)) nil (25589 11098 709586 284000) 0 nil])
([nil nil ((832 . 834)) nil (25589 11098 709584 104000) 0 nil])
([nil nil ((#("
    print({\"icon\": icons.get(response['current']['weather'][0]['icon'], icons['DEFAULT']), })" 0 1 (fontified t) 1 5 (fontified t) 5 10 (fontified t face font-lock-builtin-face) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-3-face)) 30 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-4-face)) 39 47 (fontified t face font-lock-string-face) 47 48 (fontified t face font-lock-string-face) 48 49 (fontified t face (rainbow-delimiters-depth-4-face)) 49 50 (fontified t face (rainbow-delimiters-depth-4-face)) 50 58 (fontified t face font-lock-string-face) 58 59 (fontified t face font-lock-string-face) 59 60 (fontified t face (rainbow-delimiters-depth-4-face)) 60 61 (fontified t face (rainbow-delimiters-depth-4-face)) 61 62 (fontified t face highlight-numbers-number) 62 63 (fontified t face (rainbow-delimiters-depth-4-face)) 63 64 (fontified t face (rainbow-delimiters-depth-4-face)) 64 69 (fontified t face font-lock-string-face) 69 70 (fontified t face font-lock-string-face) 70 71 (fontified t face (rainbow-delimiters-depth-4-face)) 71 78 (fontified t) 78 79 (fontified t face (rainbow-delimiters-depth-4-face)) 79 80 (fontified t face font-lock-string-face) 80 87 (fontified t face font-lock-string-face) 87 88 (fontified t face font-lock-string-face) 88 89 (fontified t face (rainbow-delimiters-depth-4-face)) 89 90 (fontified t face (rainbow-delimiters-depth-3-face)) 90 92 (fontified t) 92 93 (fontified t face (rainbow-delimiters-depth-2-face)) 93 94 (fontified t face (rainbow-delimiters-depth-1-face))) . 742) (undo-tree-id293 . 2) (undo-tree-id294 . -1) (undo-tree-id295 . -93) (undo-tree-id296 . -1) (undo-tree-id297 . -91) (undo-tree-id298 . -94) (undo-tree-id299 . -5) (undo-tree-id300 . -94) (undo-tree-id301 . -5) (undo-tree-id302 . -87) (undo-tree-id303 . -80) (undo-tree-id304 . -80) (undo-tree-id305 . -80) (undo-tree-id306 . -80) (undo-tree-id307 . -80) (undo-tree-id308 . -80) (undo-tree-id309 . -80) (undo-tree-id310 . 14) (undo-tree-id311 . -80) (undo-tree-id312 . -5) (undo-tree-id313 . -5) (undo-tree-id314 . -5) (undo-tree-id315 . -5) (undo-tree-id316 . -5) (undo-tree-id317 . -5) (undo-tree-id318 . -5) (undo-tree-id319 . -5) (undo-tree-id320 . -5) (undo-tree-id321 . -5) (undo-tree-id322 . -80) (undo-tree-id323 . -80) (undo-tree-id324 . -80) (undo-tree-id325 . -86) (undo-tree-id326 . -86) (undo-tree-id327 . -86) (undo-tree-id328 . -86) (undo-tree-id329 . -86) (undo-tree-id330 . -86) (undo-tree-id331 . -86) (undo-tree-id332 . -86) (undo-tree-id333 . -93) (undo-tree-id334 . -93) (undo-tree-id335 . -93) (undo-tree-id336 . -93) (undo-tree-id337 . -94) (undo-tree-id338 . -5) (undo-tree-id339 . -94) (undo-tree-id340 . -5) (undo-tree-id341 . -93) (undo-tree-id342 . -93) (undo-tree-id343 . -93) (undo-tree-id344 . -94) (undo-tree-id345 . -5) (undo-tree-id346 . -94) (undo-tree-id347 . -5) (undo-tree-id348 . -93) (undo-tree-id349 . -90) (undo-tree-id350 . -90) (undo-tree-id351 . -90) (undo-tree-id352 . -90) (undo-tree-id353 . -90) (undo-tree-id354 . -90) (undo-tree-id355 . -90) (undo-tree-id356 . -90) (undo-tree-id357 . -90) (undo-tree-id358 . -90) (undo-tree-id359 . 2) (undo-tree-id360 . -5) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) (undo-tree-id368 . -5) (undo-tree-id369 . -5) (undo-tree-id370 . -91) (undo-tree-id371 . -91) (undo-tree-id372 . -91) (undo-tree-id373 . 2) (undo-tree-id374 . -5) (undo-tree-id375 . -5) (undo-tree-id376 . -5) (undo-tree-id377 . -5) (undo-tree-id378 . -5) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -5) (undo-tree-id382 . -5) (undo-tree-id383 . -5) (undo-tree-id384 . -92) (undo-tree-id385 . -92) (undo-tree-id386 . -92) (undo-tree-id387 . -92) (undo-tree-id388 . -92) (undo-tree-id389 . -92) (undo-tree-id390 . -92) (undo-tree-id391 . -94) (undo-tree-id392 . -5) (undo-tree-id393 . -94) (undo-tree-id394 . -5) (undo-tree-id395 . -92) (undo-tree-id396 . -92) (undo-tree-id397 . -91) (undo-tree-id398 . -92) (undo-tree-id399 . -91) (undo-tree-id400 . -91) (undo-tree-id401 . -91) (undo-tree-id402 . -91) (undo-tree-id403 . -91) (undo-tree-id404 . -91) (undo-tree-id405 . -91) (undo-tree-id406 . -91) (undo-tree-id407 . -91) (undo-tree-id408 . -91) (undo-tree-id409 . -91) (undo-tree-id410 . -91) (undo-tree-id411 . -91) (undo-tree-id412 . -1) (undo-tree-id413 . -91) (undo-tree-id414 . -91) (undo-tree-id415 . -91) (undo-tree-id416 . -91) (undo-tree-id417 . -91) (undo-tree-id418 . -91) (undo-tree-id419 . -91) (undo-tree-id420 . -91) (undo-tree-id421 . -94) 833) nil (25589 11098 709581 744000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -725) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) 729 (724 . 729) 710) nil (25589 11098 709519 297000) 0 nil])
([nil nil ((nil rear-nonsticky nil 729 . 730) (#("
" 0 1 (fontified nil)) . -819) (725 . 820)) nil (25589 11098 709515 281000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 725) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1)) nil (25589 11098 709514 638000) 0 nil])
([nil nil ((846 . 848) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -846) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (844 . 847) (842 . 844) (#("e" 0 1 (fontified t)) . -842) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("i" 0 1 (fontified t)) . -843) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("n" 0 1 (fontified t)) . -844) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) 845 (842 . 845) (#("e" 0 1 (fontified t)) . -842) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("r" 0 1 (fontified t)) . -843) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) 844 (841 . 844) (836 . 841) 819) nil (25589 11098 709506 459000) 0 nil])
([nil nil ((#("
    print()" 0 1 (fontified t) 1 5 (fontified t) 5 10 (fontified t face font-lock-builtin-face) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t face (rainbow-delimiters-depth-1-face))) . 836) (undo-tree-id127 . 1) (undo-tree-id128 . -1) (undo-tree-id129 . -11) (undo-tree-id130 . -10) (undo-tree-id131 . -10) (undo-tree-id132 . -1) (undo-tree-id133 . -5) (undo-tree-id134 . -5) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) (undo-tree-id140 . -5) (undo-tree-id141 . -6) (undo-tree-id142 . -6) (undo-tree-id143 . -6) (undo-tree-id144 . -6) (undo-tree-id145 . -6) (undo-tree-id146 . -6) (undo-tree-id147 . -6) (undo-tree-id148 . -6) (undo-tree-id149 . -6) (undo-tree-id150 . -6) (undo-tree-id151 . -6) (undo-tree-id152 . -6) (undo-tree-id153 . -6) (undo-tree-id154 . -6) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -6) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id160 . -6) (undo-tree-id161 . -6) (undo-tree-id162 . -6) (undo-tree-id163 . -6) (undo-tree-id164 . -6) (undo-tree-id165 . -6) (undo-tree-id166 . -6) (undo-tree-id167 . -6) (undo-tree-id168 . -6) (undo-tree-id169 . -6) (undo-tree-id170 . -6) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (undo-tree-id174 . -6) (undo-tree-id175 . -6) (undo-tree-id176 . -6) (undo-tree-id177 . -7) (undo-tree-id178 . -7) (undo-tree-id179 . -7) (undo-tree-id180 . -8) (undo-tree-id181 . -8) (undo-tree-id182 . -8) (undo-tree-id183 . -9) (undo-tree-id184 . -9) (undo-tree-id185 . -9) (undo-tree-id186 . -10) (undo-tree-id187 . -10) (undo-tree-id188 . -10) (undo-tree-id189 . -10) (undo-tree-id190 . -10) (undo-tree-id191 . -10) (undo-tree-id192 . -10) (undo-tree-id193 . -10) (undo-tree-id194 . -10) (undo-tree-id195 . -10) (undo-tree-id196 . -10) (undo-tree-id197 . -10) (undo-tree-id198 . -10) (undo-tree-id199 . -10) (undo-tree-id200 . -10) (undo-tree-id201 . -10) (undo-tree-id202 . -10) (undo-tree-id203 . -11) (undo-tree-id204 . -11) (undo-tree-id205 . -11) (undo-tree-id206 . -11) (undo-tree-id207 . -11) (undo-tree-id208 . -10) (undo-tree-id209 . -10) (undo-tree-id210 . -1) (undo-tree-id211 . -10) (undo-tree-id212 . -10) (undo-tree-id213 . 2) (undo-tree-id214 . -11) (undo-tree-id215 . 1) (undo-tree-id216 . -12) (undo-tree-id217 . -10) (undo-tree-id218 . -10) (undo-tree-id219 . -10) (undo-tree-id220 . -10) (undo-tree-id221 . -10) (undo-tree-id222 . -12) (undo-tree-id223 . -5) (undo-tree-id224 . -12) (undo-tree-id225 . -5) (undo-tree-id226 . -10) (undo-tree-id227 . -10) (undo-tree-id228 . -10) (undo-tree-id229 . -10) (undo-tree-id230 . -12) 846) nil (25589 11098 709482 240000) 0 nil])
([nil nil ((845 . 847) (#("(" 0 1 (fontified nil face font-lock-constant-face)) . -845) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (841 . 846) (836 . 841) 828) nil (25589 11098 709364 508000) 0 nil])
([nil nil ((842 . 844) (#("e" 0 1 (fontified t)) . -842) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 843 (841 . 843)) nil (25589 11098 709362 332000) 0 nil])
([nil nil ((844 . 845)) nil (25589 11098 709355 429000) 0 nil])
([nil nil ((851 . 852)) nil (25589 11098 709352 600000) 0 nil])
([nil nil ((62 . 77) (61 . 62) (t 25589 11098 709063 135000) 60) nil (25589 11519 920943 651000) 0 nil])
([nil nil ((833 . 845) (832 . 834) (#("'" 0 1 (fontified nil)) . -832) (832 . 833) (#(";" 0 1 (fontified t)) . -832) (undo-tree-id490 . -1) (undo-tree-id491 . -1) 833 (832 . 833)) nil (25589 11519 920942 757000) 0 nil])
([nil nil ((869 . 871) (#("(" 0 1 (fontified nil)) . -869) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (866 . 870) (854 . 866) (#("n" 0 1 (fontified t)) . -854) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("m" 0 1 (fontified t)) . -855) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("e" 0 1 (fontified t)) . -856) (undo-tree-id489 . -1) 857 (848 . 857) (846 . 848)) nil (25589 11519 920940 731000) 0 nil])
([nil nil ((902 . 904) (882 . 902) (881 . 883) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -881) (881 . 882) (880 . 882) (#("(" 0 1 (fontified nil)) . -880) (871 . 881)) nil (25589 11519 920928 314000) 0 nil])
([nil nil ((905 . 907) (904 . 905)) nil (25589 11519 920924 242000) 0 nil])
([nil nil ((832 . 843) (#(" " 0 1 (fontified nil)) . 832) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . 1) (831 . 832) (t 25589 11519 925736 763000)) nil (25589 11592 415440 303000) 0 nil])
([nil nil ((#("datetime.datetime.now().strftime('last updated on: %H:%M %a')" 0 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 24 (fontified t) 24 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 59 (fontified t face font-lock-string-face) 59 60 (fontified t face font-lock-string-face) 60 61 (fontified t face (rainbow-delimiters-depth-3-face))) . 859) (undo-tree-id588 . -60) (undo-tree-id589 . -60) (undo-tree-id590 . -60) (undo-tree-id591 . -21) (undo-tree-id592 . -21) (undo-tree-id593 . -58) (undo-tree-id594 . -58) (undo-tree-id595 . -58) (undo-tree-id596 . -58) (undo-tree-id597 . -58) (undo-tree-id598 . -58) (undo-tree-id599 . -58) (undo-tree-id600 . -58) (undo-tree-id601 . -58) (undo-tree-id602 . -58) (undo-tree-id603 . -58) (undo-tree-id604 . -58) (undo-tree-id605 . -59) (undo-tree-id606 . -59) (undo-tree-id607 . -59) (undo-tree-id608 . -61) (undo-tree-id609 . -61) (undo-tree-id610 . -60) (undo-tree-id611 . -60) (undo-tree-id612 . -60) (undo-tree-id613 . -60) (undo-tree-id614 . -59) (undo-tree-id615 . -59) (undo-tree-id616 . -58) (undo-tree-id617 . -58) (undo-tree-id618 . -59) (undo-tree-id619 . -59) (undo-tree-id620 . -60) (undo-tree-id621 . -60) (undo-tree-id622 . -61) (undo-tree-id623 . -61) (undo-tree-id624 . -61) (undo-tree-id625 . -61) (undo-tree-id626 . -60) (undo-tree-id627 . -60) (undo-tree-id628 . -61) (undo-tree-id629 . -60) (undo-tree-id630 . -60) (undo-tree-id631 . -60) (undo-tree-id632 . -60) (undo-tree-id633 . -57) (undo-tree-id634 . -57) (undo-tree-id635 . -51) (undo-tree-id636 . -51) (undo-tree-id637 . -47) (undo-tree-id638 . -47) (undo-tree-id639 . -39) (undo-tree-id640 . -39) (undo-tree-id641 . -61)) nil (25589 11592 415436 301000) 0 nil])
([nil nil ((745 . 759) (740 . 745) 737) nil (25589 11592 415410 768000) 0 nil])
([nil nil ((nil rear-nonsticky nil 819 . 820) (nil fontified nil 759 . 820) (759 . 820) 758) nil (25589 11592 415410 268000) 0 nil])
([nil nil ((745 . 752) (741 . 745) (741 . 742) 819) nil (25589 11592 415409 645000) 0 nil])
([nil nil ((#("icons.get(response['current']['weather'][0]['icon'], icons['DEFAULT'])" 0 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-4-face)) 19 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t face (rainbow-delimiters-depth-4-face)) 29 30 (fontified t face (rainbow-delimiters-depth-4-face)) 30 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 40 (fontified t face (rainbow-delimiters-depth-4-face)) 40 41 (fontified t face (rainbow-delimiters-depth-4-face)) 41 42 (fontified t face highlight-numbers-number) 42 43 (fontified t face (rainbow-delimiters-depth-4-face)) 43 44 (fontified t face (rainbow-delimiters-depth-4-face)) 44 49 (fontified t face font-lock-string-face) 49 50 (fontified t face font-lock-string-face) 50 51 (fontified t face (rainbow-delimiters-depth-4-face)) 51 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-4-face)) 59 60 (fontified t face font-lock-string-face) 60 67 (fontified t face font-lock-string-face) 67 68 (fontified t face font-lock-string-face) 68 69 (fontified t face (rainbow-delimiters-depth-4-face)) 69 70 (fontified t face (rainbow-delimiters-depth-3-face))) . 852) (undo-tree-id583 . -69) (undo-tree-id584 . -51) (undo-tree-id585 . -52) (undo-tree-id586 . -70) (undo-tree-id587 . -70)) nil (25589 11592 415408 912000) 0 nil])
([nil nil ((nil rear-nonsticky nil 821 . 822) (nil fontified nil 752 . 822) (752 . 822) 751) nil (25589 11592 415405 916000) 0 nil])
([nil nil ((922 . 926)) nil (25589 11592 415405 266000) 0 nil])
([nil nil ((955 . 966) (#("last" 0 4 (fontified t)) . -955) (undo-tree-id554 . -4) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) 959 (954 . 959)) nil (25589 11592 415404 156000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 966) (undo-tree-id492 . 1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . 1) (undo-tree-id546 . 1) (undo-tree-id547 . 1) (undo-tree-id548 . 1) (undo-tree-id549 . 1) (undo-tree-id550 . 1) (undo-tree-id551 . 1) (undo-tree-id552 . -1) (undo-tree-id553 . -1)) nil (25589 11592 415387 658000) 0 nil])
([nil nil ((929 . 933) (928 . 930) (#("\"" 0 1 (fontified nil)) . -928) (928 . 929) (#("t" 0 1 (fontified t)) . -928) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("e" 0 1 (fontified t)) . -929) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("m" 0 1 (fontified t)) . -930) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (#("p" 0 1 (fontified t)) . -931) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (#(":" 0 1 (fontified t)) . -932) (undo-tree-id667 . -1) 933 (927 . 933) (t 25589 11592 422404 615000)) nil (25589 11711 339789 15000) 0 nil])
([nil nil ((946 . 953) (#("c" 0 1 (fontified t face font-lock-string-face)) . -946) (undo-tree-id657 . -1) (undo-tree-id658 . -1) 947 (946 . 947) (945 . 947) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -945) (945 . 946) (944 . 946) (#("[" 0 1 (fontified nil)) . -944) (936 . 945) (934 . 936)) nil (25589 11711 339783 132000) 0 nil])
([nil nil ((957 . 961) (956 . 958) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -956) (956 . 957) (955 . 957) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -955) (955 . 956)) nil (25589 11711 339780 936000) 0 nil])
([nil nil ((964 . 965) (936 . 937)) nil (25589 11711 339780 95000) 0 nil])
([nil nil ((936 . 937)) nil (25589 11711 339779 425000) 0 nil])
([nil nil ((966 . 967) (938 . 939) 964) nil (25589 11711 339778 812000) 0 nil])
([nil nil ((966 . 971)) nil (25589 11711 339777 916000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face nil)) . 967) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1)) nil (25589 11711 339775 546000) 0 nil])
([nil nil ((967 . 968) (t 25589 11711 349073 244000)) nil (25589 11723 816308 288000) 0 nil])
([nil nil ((973 . 974)) nil (25589 11723 816305 163000) 0 nil])
([nil nil ((34 . 45) (34 . 35) 44 (t 25589 11723 825740 117000)) nil (25589 11785 656316 807000) 0 nil])
([nil nil ((#("{\"icon\": icon, \"temp\": f'{response[\"current\"][\"temp\"]:0.0f}',
           'last_updated': last_update}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 13 (fontified t) 13 15 (fontified t) 15 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 24 (fontified t) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face nil) 26 34 (fontified t face nil) 34 35 (fontified t face nil) 35 43 (fontified t face nil) 43 44 (fontified t face nil) 44 45 (fontified t face nil) 45 46 (fontified t face nil) 46 51 (fontified t face nil) 51 52 (fontified t face nil) 52 58 (fontified t face nil) 58 59 (fontified t face nil) 59 60 (fontified t face font-lock-string-face) 60 61 (fontified t) 61 62 (fontified t) 62 73 (fontified t) 73 86 (fontified t face font-lock-string-face) 86 87 (fontified t face font-lock-string-face) 87 89 (fontified t) 89 100 (fontified t) 100 101 (fontified t face (rainbow-delimiters-depth-2-face))) . 925) (undo-tree-id791 . -100) (undo-tree-id792 . -25) (undo-tree-id793 . 42) (undo-tree-id794 . -25) (undo-tree-id795 . -52) (undo-tree-id796 . -14) (undo-tree-id797 . -14) (undo-tree-id798 . -100) (undo-tree-id799 . -60) (undo-tree-id800 . -60) (undo-tree-id801 . -60) (undo-tree-id802 . -60) (undo-tree-id803 . -60) (undo-tree-id804 . -61) (undo-tree-id805 . -61) (undo-tree-id806 . -52) (undo-tree-id807 . -60) (undo-tree-id808 . -60) (undo-tree-id809 . -60) (undo-tree-id810 . -62) (undo-tree-id811 . 101) (undo-tree-id812 . -1) (undo-tree-id813 . 1) (undo-tree-id814 . -101) (undo-tree-id815 . -101)) nil (25589 11785 656315 537000) 0 nil])
([nil nil ((919 . 925) (915 . 919) (915 . 916) 925) nil (25589 11785 656301 396000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1025 . 1026) (nil fontified nil 925 . 1026) (925 . 1026) 924) nil (25589 11785 656300 468000) 0 nil])
([nil nil ((1046 . 1047) (1037 . 1046)) nil (25589 11785 656299 545000) 0 nil])
([nil nil ((1037 . 1041) (1031 . 1037) (1027 . 1031) (1027 . 1028) 1046) nil (25589 11785 656298 742000) 0 nil])
([nil nil ((#("    json.dumps
" 0 14 (fontified t) 14 15 (fontified t)) . 1027) (undo-tree-id670 . 1) (undo-tree-id671 . -14) (undo-tree-id672 . -13) (undo-tree-id673 . 1) (undo-tree-id674 . -4) (undo-tree-id675 . -4) (undo-tree-id676 . -4) (undo-tree-id677 . -4) (undo-tree-id678 . -4) (undo-tree-id679 . -4) (undo-tree-id680 . -4) (undo-tree-id681 . -4) (undo-tree-id682 . -4) (undo-tree-id683 . -4) (undo-tree-id684 . -4) (undo-tree-id685 . 1) (undo-tree-id686 . -5) (undo-tree-id687 . -5) (undo-tree-id688 . -5) (undo-tree-id689 . 1) (undo-tree-id690 . -6) (undo-tree-id691 . -6) (undo-tree-id692 . -6) (undo-tree-id693 . 1) (undo-tree-id694 . -7) (undo-tree-id695 . -7) (undo-tree-id696 . -7) (undo-tree-id697 . 1) (undo-tree-id698 . -8) (undo-tree-id699 . -8) (undo-tree-id700 . -8) (undo-tree-id701 . 1) (undo-tree-id702 . -9) (undo-tree-id703 . -9) (undo-tree-id704 . -9) (undo-tree-id705 . -9) (undo-tree-id706 . -9) (undo-tree-id707 . -9) (undo-tree-id708 . -9) (undo-tree-id709 . -13) (undo-tree-id710 . -9) (undo-tree-id711 . -9) (undo-tree-id712 . -9) (undo-tree-id713 . -4) (undo-tree-id714 . -9) (undo-tree-id715 . -4) (undo-tree-id716 . -9) (undo-tree-id717 . -9) (undo-tree-id718 . -9) (undo-tree-id719 . -9) (undo-tree-id720 . 1) (undo-tree-id721 . -10) (undo-tree-id722 . -10) (undo-tree-id723 . -10) (undo-tree-id724 . -10) (undo-tree-id725 . -10) (undo-tree-id726 . -10) (undo-tree-id727 . 1) (undo-tree-id728 . -11) (undo-tree-id729 . -11) (undo-tree-id730 . -11) (undo-tree-id731 . -11) (undo-tree-id732 . -11) (undo-tree-id733 . -11) (undo-tree-id734 . 1) (undo-tree-id735 . -12) (undo-tree-id736 . -12) (undo-tree-id737 . -12) (undo-tree-id738 . -12) (undo-tree-id739 . -12) (undo-tree-id740 . -12) (undo-tree-id741 . 1) (undo-tree-id742 . -13) (undo-tree-id743 . -13) (undo-tree-id744 . -13) (undo-tree-id745 . -13) (undo-tree-id746 . -13) (undo-tree-id747 . -13) (undo-tree-id748 . 1) (undo-tree-id749 . -14) (undo-tree-id750 . -14) (undo-tree-id751 . -14) (undo-tree-id752 . -14) (undo-tree-id753 . -14) (undo-tree-id754 . -14) (undo-tree-id755 . -14) (undo-tree-id756 . -13) (undo-tree-id757 . -13) (undo-tree-id758 . -13) (undo-tree-id759 . -13) (undo-tree-id760 . -13) (undo-tree-id761 . -13) (undo-tree-id762 . -13) (undo-tree-id763 . -13) (undo-tree-id764 . -13) (undo-tree-id765 . -13) (undo-tree-id766 . -13) (undo-tree-id767 . -14) (undo-tree-id768 . -4) (undo-tree-id769 . -14) (undo-tree-id770 . -4) (undo-tree-id771 . -13) (undo-tree-id772 . -13) (undo-tree-id773 . -13) (undo-tree-id774 . -14) (undo-tree-id775 . -4) (undo-tree-id776 . -14) (undo-tree-id777 . -4) (undo-tree-id778 . -13) (undo-tree-id779 . -14) (undo-tree-id780 . -14) (undo-tree-id781 . -14) (undo-tree-id782 . -13) (undo-tree-id783 . -13) (undo-tree-id784 . -13) (undo-tree-id785 . -13) (undo-tree-id786 . -13) (undo-tree-id787 . -13) (undo-tree-id788 . -13) (undo-tree-id789 . -13) (undo-tree-id790 . -15) 1040) nil (25589 11785 656295 455000) 0 nil])
([nil nil ((1048 . 1051) (1047 . 1049) (#("(" 0 1 (fontified nil)) . -1047) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (1047 . 1048)) nil (25589 11785 656227 50000) 0 nil])
([nil nil ((99 . 102) (#("e" 0 1 (fontified t)) . -99) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (#("c" 0 1 (fontified t)) . -100) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("e" 0 1 (fontified t)) . -101) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) 102 (98 . 102) (#("e" 0 1 (fontified t)) . -98) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (#("r" 0 1 (fontified t)) . -99) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) 100 (90 . 100) (89 . 90) (t 25589 11785 662407 798000) 74) nil (25589 11943 57768 388000) 0 nil])
([nil nil ((#("import trace
" 0 6 (fontified t face font-lock-keyword-face) 6 12 (fontified t) 12 13 (fontified t)) . 90) (undo-tree-id924 . 1) (undo-tree-id925 . -12) (undo-tree-id926 . -13) (undo-tree-id927 . -13) (undo-tree-id928 . -13) (undo-tree-id929 . -11) (undo-tree-id930 . -11) (undo-tree-id931 . 1) (undo-tree-id932 . 1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . 1) (undo-tree-id937 . -2) (undo-tree-id938 . -2) (undo-tree-id939 . -2) (undo-tree-id940 . 1) (undo-tree-id941 . -3) (undo-tree-id942 . -3) (undo-tree-id943 . -3) (undo-tree-id944 . 1) (undo-tree-id945 . -4) (undo-tree-id946 . -4) (undo-tree-id947 . -4) (undo-tree-id948 . 1) (undo-tree-id949 . -5) (undo-tree-id950 . -5) (undo-tree-id951 . -5) (undo-tree-id952 . 1) (undo-tree-id953 . -6) (undo-tree-id954 . -6) (undo-tree-id955 . -6) (undo-tree-id956 . 1) (undo-tree-id957 . -7) (undo-tree-id958 . -7) (undo-tree-id959 . -7) (undo-tree-id960 . -7) (undo-tree-id961 . -7) (undo-tree-id962 . -7) (undo-tree-id963 . -7) (undo-tree-id964 . -7) (undo-tree-id965 . -7) (undo-tree-id966 . 1) (undo-tree-id967 . -8) (undo-tree-id968 . -8) (undo-tree-id969 . -8) (undo-tree-id970 . 1) (undo-tree-id971 . -8) (undo-tree-id972 . -8) (undo-tree-id973 . -8) (undo-tree-id974 . 1) (undo-tree-id975 . -8) (undo-tree-id976 . -8) (undo-tree-id977 . -8) (undo-tree-id978 . 1) (undo-tree-id979 . -8) (undo-tree-id980 . -8) (undo-tree-id981 . -8) (undo-tree-id982 . -8) (undo-tree-id983 . -8) (undo-tree-id984 . 1) (undo-tree-id985 . -8) (undo-tree-id986 . -8) (undo-tree-id987 . -8) (undo-tree-id988 . -8) (undo-tree-id989 . 1) (undo-tree-id990 . -9) (undo-tree-id991 . -9) (undo-tree-id992 . -9) (undo-tree-id993 . 1) (undo-tree-id994 . -9) (undo-tree-id995 . -9) (undo-tree-id996 . -9) (undo-tree-id997 . 1) (undo-tree-id998 . -9) (undo-tree-id999 . -9) (undo-tree-id1000 . -9) (undo-tree-id1001 . 1) (undo-tree-id1002 . -9) (undo-tree-id1003 . -9) (undo-tree-id1004 . -9) (undo-tree-id1005 . -9) (undo-tree-id1006 . -9) (undo-tree-id1007 . -9) (undo-tree-id1008 . -9) (undo-tree-id1009 . -9) (undo-tree-id1010 . -9) (undo-tree-id1011 . -9) (undo-tree-id1012 . 1) (undo-tree-id1013 . -9) (undo-tree-id1014 . -9) (undo-tree-id1015 . -9) (undo-tree-id1016 . 1) (undo-tree-id1017 . -9) (undo-tree-id1018 . -9) (undo-tree-id1019 . -9) (undo-tree-id1020 . 1) (undo-tree-id1021 . -9) (undo-tree-id1022 . -9) (undo-tree-id1023 . -9) (undo-tree-id1024 . 1) (undo-tree-id1025 . -10) (undo-tree-id1026 . -10) (undo-tree-id1027 . -10) (undo-tree-id1028 . 1) (undo-tree-id1029 . -11) (undo-tree-id1030 . -11) (undo-tree-id1031 . -11) (undo-tree-id1032 . 1) (undo-tree-id1033 . -12) (undo-tree-id1034 . -12) (undo-tree-id1035 . -12) (undo-tree-id1036 . -12) (undo-tree-id1037 . -12) (undo-tree-id1038 . -12) (undo-tree-id1039 . -12) (undo-tree-id1040 . -12) (undo-tree-id1041 . -12) (undo-tree-id1042 . -12) (undo-tree-id1043 . -12) (undo-tree-id1044 . -12) (undo-tree-id1045 . -11) (undo-tree-id1046 . -11) (undo-tree-id1047 . -11) (undo-tree-id1048 . -11) (undo-tree-id1049 . -11) (undo-tree-id1050 . -11) (undo-tree-id1051 . -11) (undo-tree-id1052 . -11) (undo-tree-id1053 . -11) (undo-tree-id1054 . -11) (undo-tree-id1055 . -13) 101) nil (25589 11943 57334 408000) 0 nil])
([nil nil ((apply -4 1054 1091 undo--wrap-and-run-primitive-undo 1054 1091 ((1074 . 1076) (1054 . 1056)))) nil (25589 11943 57272 739000) 0 nil])
([nil nil ((apply -2 534 686 undo--wrap-and-run-primitive-undo 534 686 ((534 . 536)))) nil (25589 11943 57272 178000) 0 nil])
([nil nil ((#("    " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t)) . -1002) (#("           " 0 11 (fontified nil)) . -973) (undo-tree-id816 . 11) (965 . 973) (#("    " 0 4 (fontified t)) . -897) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -4) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (#("    " 0 4 (fontified t)) . -821) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (#("    " 0 4 (fontified t)) . -743) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (#("    " 0 4 (fontified t)) . -716) (undo-tree-id912 . -4) (#("    " 0 4 (fontified t)) . -682) (undo-tree-id913 . 4) (#("    " 0 4 (fontified t)) . -541) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) 1029) nil (25589 11943 57268 313000) 0 nil])
([nil nil ((749 . 757) (748 . 750) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -748) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (743 . 749) (742 . 743) (t 25589 11943 65743 703000) 716) nil (25589 11959 293095 997000) 0 nil])
([nil nil ((539 . 545) (#("api" 0 3 (fontified t)) . -539) (undo-tree-id1130 . -3) (undo-tree-id1131 . -3) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -2) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -3) (undo-tree-id1150 . -3) (undo-tree-id1151 . -3) (undo-tree-id1152 . -3) (undo-tree-id1153 . -3) (undo-tree-id1154 . -3) (undo-tree-id1155 . -3) (undo-tree-id1156 . -3) (undo-tree-id1157 . -3) (undo-tree-id1158 . -3) (undo-tree-id1159 . -3) (undo-tree-id1160 . -3) (undo-tree-id1161 . -3) (undo-tree-id1162 . -3) (undo-tree-id1163 . -3) 542 (539 . 542) (538 . 540) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -538) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (533 . 539) (#("    " 0 4 (fontified t)) . -533) (undo-tree-id1166 . -4) (undo-tree-id1167 . -4) (undo-tree-id1168 . -4) (undo-tree-id1169 . -4) (undo-tree-id1170 . -4) (undo-tree-id1171 . -4) (undo-tree-id1172 . -4) (undo-tree-id1173 . -4) (undo-tree-id1174 . -4) (undo-tree-id1175 . -4) 537 (533 . 537) (#("    " 0 4 (fontified nil)) . 532) (undo-tree-id1176 . -4) (undo-tree-id1177 . -4) (undo-tree-id1178 . -4) (undo-tree-id1179 . -4) (undo-tree-id1180 . -4) (undo-tree-id1181 . -4) (undo-tree-id1182 . -4) (undo-tree-id1183 . -4) (undo-tree-id1184 . -4) (undo-tree-id1185 . -4) (536 . 537) (531 . 536) (t 25589 11959 299077 300000) 523) nil (25589 11983 255126 434000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 547) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1)) nil (25589 11983 255092 204000) 0 nil])
([nil nil ((537 . 539) (#("(" 0 1 (fontified nil)) . -537) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (537 . 538) (531 . 537) (t 25589 11983 262411 27000)) nil (25589 11993 980613 238000) 0 nil])
([nil nil ((#("print(apikey)
" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-1-face)) 13 14 (fontified t)) . 541) (undo-tree-id1192 . -13) (undo-tree-id1193 . -12) (undo-tree-id1194 . -12) (undo-tree-id1195 . -12) (undo-tree-id1196 . 2) (undo-tree-id1197 . -13) (undo-tree-id1198 . 9) (undo-tree-id1199 . -6) (undo-tree-id1200 . -12) (undo-tree-id1201 . -12) (undo-tree-id1202 . -12) (undo-tree-id1203 . -12) (undo-tree-id1204 . -12) (undo-tree-id1205 . -12) (undo-tree-id1206 . -14) 553 (t 25589 11993 985744 534000)) nil (25589 12036 29103 67000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 541) (undo-tree-id1189 . -1) (undo-tree-id1190 . 1) (undo-tree-id1191 . -1)) nil (25589 12036 29094 966000) 0 nil])
([nil nil ((apply 2 541 546 undo--wrap-and-run-primitive-undo 541 546 ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -541) (#<marker (moves after insertion) at 686 in weather.py> . 2) (#<marker (moves after insertion) at 686 in weather.py> . 2)))) nil (25589 12036 29092 562000) 0 nil])
([nil nil ((1055 . 1059) (#("        " 0 8 (fontified nil)) . -1026) (undo-tree-id1188 . 8) (1014 . 1026) (942 . 946) (862 . 866) (780 . 784) (760 . 764) (729 . 733) (691 . 695) (546 . 550) 1023) nil (25589 12036 29091 487000) 0 nil])
([nil nil ((apply 4 1082 1115 undo--wrap-and-run-primitive-undo 1082 1115 ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1100) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1082)))) nil (25589 12036 29082 898000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face font-lock-string-face)) . -484) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -485) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -486) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -487) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -488) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -489) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) 490 (484 . 490) (483 . 485) (#("'" 0 1 (fontified nil)) . -483) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (483 . 484) (#("s" 0 1 (fontified t)) . -483) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (#("y" 0 1 (fontified t)) . -484) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (#("s" 0 1 (fontified t)) . -485) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (#("." 0 1 (fontified t)) . -486) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (#("a" 0 1 (fontified t)) . -487) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (#("r" 0 1 (fontified t)) . -488) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) 489 (483 . 489) (#("i" 0 1 (fontified t)) . -483) (undo-tree-id1534 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -484) (undo-tree-id1535 . -1) (#(" " 0 1 (fontified t)) . -485) (undo-tree-id1536 . -1) 486 (483 . 486) (#("s" 0 1 (fontified t)) . -483) (undo-tree-id1537 . -1) 484 (480 . 484) (476 . 480) (476 . 477) 481 (t 25589 12036 35745 221000)) nil (25589 12126 1155 481000) 0 nil])
([nil nil ((23 . 32) (23 . 24) 30) nil (25589 12126 831 946000) 0 nil])
([nil nil ((23 . 24) 31) nil (25589 12126 828 982000) 0 nil])
([nil nil ((495 . 512) (#("d" 0 1 (fontified t)) . -495) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) 496 (494 . 496) (t 25589 12126 2413 358000)) nil (25589 12155 137074 684000) 0 nil])
([nil nil ((515 . 516) (512 . 513) 513) nil (25589 12155 137070 687000) 0 nil])
([nil nil ((533 . 551) (#("OP" 0 2 (fontified t face font-lock-string-face)) . -533) (undo-tree-id1538 . -2) (undo-tree-id1539 . -2) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -2) (undo-tree-id1545 . -2) (undo-tree-id1546 . -2) (undo-tree-id1547 . -2) (undo-tree-id1548 . -2) (undo-tree-id1549 . -2) (undo-tree-id1550 . -2) (undo-tree-id1551 . -2) (undo-tree-id1552 . -2) (undo-tree-id1553 . -2) (undo-tree-id1554 . -2) (undo-tree-id1555 . -2) (undo-tree-id1556 . -2) (undo-tree-id1557 . -2) (undo-tree-id1558 . -2) (undo-tree-id1559 . -2) (undo-tree-id1560 . -2) (undo-tree-id1561 . -2) (undo-tree-id1562 . -2) 535 (534 . 535) (520 . 534) (#("p" 0 1 (fontified t face font-lock-string-face)) . -520) (undo-tree-id1563 . -1) 521 (515 . 521) (514 . 515)) nil (25589 12155 137067 766000) 0 nil])
([nil nil ((561 . 569) (560 . 562) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -560) (557 . 561) (#("s" 0 1 (fontified t)) . -557) (undo-tree-id1571 . -1) 558 (553 . 558) (t 25589 12155 142413 833000)) nil (25589 12185 637485 658000) 0 nil])
([nil nil ((589 . 590) (588 . 590) (#("[" 0 1 (fontified nil)) . -588) (581 . 589) (570 . 581)) nil (25589 12185 637484 44000) 0 nil])
([nil nil ((#("sys.argv[1]" 0 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t face highlight-numbers-number) 10 11 (fontified t face (rainbow-delimiters-depth-2-face))) . 602) (undo-tree-id1568 . -10) (undo-tree-id1569 . -11) (undo-tree-id1570 . -11)) nil (25589 12185 637482 692000) 0 nil])
([nil nil ((602 . 606)) nil (25589 12185 637473 155000) 0 nil])
([nil nil ((#("    print(response)
" 0 4 (fontified t) 4 9 (fontified t face font-lock-builtin-face) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 20 (fontified t)) . 869) (undo-tree-id1572 . -19) (undo-tree-id1573 . -13) (undo-tree-id1574 . -13) (undo-tree-id1575 . -13) (undo-tree-id1576 . -13) (undo-tree-id1577 . -13) (undo-tree-id1578 . -19) (undo-tree-id1579 . -4) (undo-tree-id1580 . -19) (undo-tree-id1581 . -4) (undo-tree-id1582 . -13) (undo-tree-id1583 . -13) (undo-tree-id1584 . -13) (undo-tree-id1585 . -13) (undo-tree-id1586 . -13) (undo-tree-id1587 . -13) (undo-tree-id1588 . -13) (undo-tree-id1589 . -13) (undo-tree-id1590 . -13) (undo-tree-id1591 . -13) (undo-tree-id1592 . -13) (undo-tree-id1593 . -20) 882 (t 25589 12185 645747 675000)) nil (25589 12204 9762 188000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1203) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) 1204 (t 25589 12204 15747 974000)) nil (25589 12209 295177 951000) 0 nil])
([nil nil ((1203 . 1204)) nil (25589 12209 295162 19000) 0 nil])
([nil nil ((1212 . 1216) (1211 . 1213) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1211) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (1211 . 1212) (1210 . 1212) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1210) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (1210 . 1211) (1209 . 1211) (#("(" 0 1 (fontified nil)) . -1209) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (1201 . 1210) (1199 . 1201) (1198 . 1200) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -1198) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (1193 . 1199) (1189 . 1193) (1189 . 1190) (t 25589 12209 302414 723000)) nil (25589 15767 689375 767000) 0 nil])
([nil nil ((1218 . 1222) (1217 . 1218)) nil (25589 15767 689370 238000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1224 . 1225) (nil fontified nil 1221 . 1225) (1221 . 1225)) nil (25589 15767 689369 520000) 0 nil])
([nil nil ((1221 . 1223)) nil (25589 15767 689368 749000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 1219) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1)) nil (25589 15767 689368 179000) 0 nil])
([nil nil ((1230 . 1234) (1229 . 1231) (#("'" 0 1 (fontified nil)) . -1229) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (1227 . 1230)) nil (25589 15767 689361 10000) 0 nil])
([nil nil ((1237 . 1239) (#("'" 0 1 (fontified nil)) . -1237) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (1237 . 1238) (1235 . 1237)) nil (25589 15767 689358 973000) 0 nil])
([nil nil ((1242 . 1254) (1241 . 1243) (#("'" 0 1 (fontified nil)) . -1241) (1239 . 1242)) nil (25589 15767 689356 641000) 0 nil])
([nil nil ((1262 . 1275) (#("las" 0 3 (fontified t face font-lock-string-face)) . -1262) (undo-tree-id1609 . -3) (undo-tree-id1610 . -3) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -2) (undo-tree-id1620 . -2) (undo-tree-id1621 . -2) (undo-tree-id1622 . -2) (undo-tree-id1623 . -2) (undo-tree-id1624 . -2) (undo-tree-id1625 . -3) (undo-tree-id1626 . -3) (undo-tree-id1627 . -3) (undo-tree-id1628 . -3) 1265 (1262 . 1265) (1261 . 1263) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -1261) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (1261 . 1262) (#("l" 0 1 (fontified t)) . -1261) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) 1262 (1261 . 1262) (1260 . 1262) (#("[" 0 1 (fontified nil)) . -1260) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (1260 . 1261) (1255 . 1260)) nil (25589 15767 689352 631000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 1262) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (t 25589 15767 699139 921000)) nil (25589 15778 813774 3000) 0 nil])
([nil nil ((658 . 670) (657 . 659) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -657) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (657 . 658) (656 . 658) (#("{" 0 1 (fontified nil)) . -656) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (650 . 657) (#("    " 0 4 (fontified t)) . -650) (undo-tree-id1673 . -4) (undo-tree-id1674 . -4) (undo-tree-id1675 . -4) (undo-tree-id1676 . -4) (undo-tree-id1677 . -4) (undo-tree-id1678 . -4) (undo-tree-id1679 . -4) (undo-tree-id1680 . -4) (undo-tree-id1681 . -4) (undo-tree-id1682 . -4) (undo-tree-id1683 . -4) (undo-tree-id1684 . -4) (undo-tree-id1685 . -4) (undo-tree-id1686 . -4) 654 (650 . 654) (650 . 651) 653 (t 25589 15778 822473 445000)) nil (25589 15806 116803 157000) 0 nil])
([nil current ((674 . 683) (673 . 675) (#("'" 0 1 (fontified nil)) . -673) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (671 . 674)) nil (25589 15806 116788 704000) 0 nil])
nil
