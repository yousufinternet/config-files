(undo-tree-save-format-version . 1)
"8341656e0d36f991d7fc770344242aa1642afbd5"
[nil nil nil nil (25594 5749 79210 851000) 0 nil]
([nil nil ((1 . 23) (t . -1)) nil (25594 5749 79209 759000) 0 nil])
([nil nil ((23 . 24) (22 . 23) 21) nil (25594 5749 79208 632000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32 . 33) (#("
" 0 1 (fontified nil)) . -1023) (24 . 1024)) nil (25594 5749 79207 66000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24)) nil (25594 5749 79205 602000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23)) nil (25594 5749 79204 860000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -920) (916 . 920) (#("            " 0 12 (fontified nil)) . -868) (860 . 868) (#("            " 0 12 (fontified nil)) . -815) (807 . 815) (#("        " 0 8 (fontified nil)) . -777) (773 . 777) (#("        " 0 8 (fontified t)) . -772) (#("    " 0 4 (fontified t)) . -746) (#("        " 0 8 (fontified nil)) . -692) (688 . 692) (#("        " 0 8 (fontified nil)) . -657) (653 . 657) (#("                " 0 16 (fontified nil)) . -620) (608 . 620) (#("        " 0 8 (fontified nil)) . -567) (563 . 567) (#("                  " 0 18 (fontified nil)) . -538) (522 . 538) (#("        " 0 8 (fontified nil)) . -459) (455 . 459) (#("        " 0 8 (fontified nil)) . -423) (419 . 423) (#("        " 0 8 (fontified nil)) . -378) (374 . 378) (#("    " 0 4 (fontified t)) . -356) (#("        " 0 8 (fontified nil)) . -353) (349 . 353) (#("            " 0 12 (fontified nil)) . -294) (286 . 294) (#("            " 0 12 (fontified nil)) . -230) (222 . 230) (#("            " 0 12 (fontified nil)) . -172) (164 . 172) (#("            " 0 12 (fontified nil)) . -112) (104 . 112) (#("        " 0 8 (fontified nil)) . -87) (83 . 87) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -27) (23 . 27) 1022) nil (25594 5749 79201 724000) 0 nil])
([nil nil ((#("    self." 0 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t)) . 23) (undo-tree-id10 . -8)) nil (25594 5749 79194 916000) 0 nil])
([nil nil ((#("    self." 0 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t)) . 74) (undo-tree-id9 . -8)) nil (25594 5749 79193 546000) 0 nil])
([nil nil ((44 . 46) (23 . 44) (23 . 24)) nil (25594 5749 79192 134000) 0 nil])
([nil nil ((46 . 47) 45) nil (25594 5749 79191 76000) 0 nil])
([nil nil ((391 . 403) (#("cmd_output" 0 10 (fontified t)) . 391) (undo-tree-id8 . -9)) nil (25594 5749 79190 145000) 0 nil])
([nil nil ((692 . 694) (#("`" 0 1 (fontified nil face font-lock-string-face)) . -692) (692 . 693) (686 . 692) (#("v" 0 1 (fontified t face font-lock-string-face)) . -686) (undo-tree-id3 . -1) 687 (674 . 687) (673 . 675) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -673) (673 . 674) (672 . 674) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -672) (672 . 673) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -672) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 673) (672 . 674) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -672) (672 . 673) (#("'" 0 1 (fontified nil face font-lock-string-face)) . -672) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . 673) (672 . 674) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -672) (672 . 673) (671 . 673) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -671) (666 . 672) (662 . 666) (662 . 663) 683) nil (25594 5749 79187 42000) 0 nil])
([nil nil ((702 . 704) (701 . 703) (#("[" 0 1 (fontified nil face font-lock-string-face)) . -701) (694 . 702) (693 . 695) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -693) (693 . 694)) nil (25594 5749 79178 460000) 0 nil])
([nil nil ((703 . 706)) nil (25594 5749 79176 523000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -709) (undo-tree-id2 . -1) 710 (709 . 710)) nil (25594 5749 79175 707000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil face font-lock-string-face)) . 727) (726 . 727) (725 . 727) (#("`" 0 1 (fontified nil face font-lock-string-face)) . -725) (719 . 726) (710 . 719)) nil (25594 5749 79173 422000) 0 nil])
([nil nil ((737 . 741) (#("i" 0 1 (fontified t face font-lock-string-face)) . -737) (undo-tree-id0 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -738) (undo-tree-id1 . -1) 739 (735 . 739) (734 . 736) (#("[" 0 1 (fontified nil face font-lock-string-face)) . -734) (727 . 735) (726 . 728) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -726) (726 . 727)) nil (25594 5749 79171 95000) 0 nil])
([nil nil ((755 . 757) (#("`" 0 1 (fontified nil face font-lock-string-face)) . -755) (746 . 756) (744 . 746)) nil (25594 5768 925215 812000) 0 nil])
([nil nil ((#("~" 0 1 (fontified t face font-lock-string-face)) . -246) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -247) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -248) (undo-tree-id96 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -249) (undo-tree-id97 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -250) (undo-tree-id98 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -251) (undo-tree-id99 . -1) 252 (#("    " 0 4 (fontified t)) . -233) 256 (252 . 256) (#("S" 0 1 (fontified t face font-lock-string-face)) . -252) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -253) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 254 (250 . 254) (#("pactl set-sink-volume @DEFAULT_SINK@" 0 36 (fontified t face font-lock-string-face)) . 250) (undo-tree-id104 . -35) (undo-tree-id105 . -35) (undo-tree-id106 . -35) (undo-tree-id107 . -35) (undo-tree-id108 . -35) 285 (t 25594 5749 82346 255000)) nil (25594 5848 997911 322000) 0 nil] [nil nil ((#("        'increase': 'pactl set-sink-volume @DEFAULT_SINK@ +2%',
" 0 8 (fontified t) 8 18 (fontified t face font-lock-string-face) 18 20 (fontified t) 20 62 (fontified t face font-lock-string-face) 62 64 (fontified t)) . 229) (undo-tree-id22 . -21) (undo-tree-id23 . -63) (undo-tree-id24 . -21) (undo-tree-id25 . -21) (undo-tree-id26 . -21) (undo-tree-id27 . -21) (undo-tree-id28 . -21) (undo-tree-id29 . -21) (undo-tree-id30 . -21) (undo-tree-id31 . -21) (undo-tree-id32 . -21) (undo-tree-id33 . -21) (undo-tree-id34 . -21) (undo-tree-id35 . -21) (undo-tree-id36 . -63) (undo-tree-id37 . -63) (undo-tree-id38 . -63) (undo-tree-id39 . -63) (undo-tree-id40 . -21) (undo-tree-id41 . -21) (undo-tree-id42 . -21) (undo-tree-id43 . -21) (undo-tree-id44 . -64) 250 (t 25594 5749 82346 255000)) ((229 . 293)) (25594 5768 828287 134000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -237) (229 . 237) 245) nil (25594 5848 997899 694000) 0 nil])
([nil nil ((#("        'decrease': 'pactl set-sink-volume @DEFAULT_SINK@ -2%'
" 0 8 (fontified t) 8 18 (fontified t face font-lock-string-face) 18 20 (fontified t) 20 62 (fontified t face font-lock-string-face) 62 63 (fontified t)) . 229) (undo-tree-id11 . -62) (undo-tree-id12 . -21) (undo-tree-id13 . 63) (undo-tree-id14 . -62) (undo-tree-id15 . -21) (undo-tree-id16 . -21) (undo-tree-id17 . -21) (undo-tree-id18 . -21) (undo-tree-id19 . -21) (undo-tree-id20 . -21) (undo-tree-id21 . -63) 250) ((229 . 292)) (25594 5768 827994 267000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-string-face)) . -249) (undo-tree-id88 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -250) (undo-tree-id89 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -251) (undo-tree-id90 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -252) (undo-tree-id91 . -1) 253 (#("    " 0 4 (fontified t)) . -233) 257 (250 . 257)) nil (25594 5848 997898 212000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified nil)) . -237) (229 . 237) 248) nil (25594 5848 997892 874000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face font-lock-string-face)) . 250)) nil (25594 5848 997891 749000) 0 nil])
([nil nil ((260 . 261) (250 . 260)) nil (25594 5848 997890 958000) 0 nil])
([nil nil ((270 . 287) (#("volume_sc" 0 9 (fontified t face font-lock-string-face)) . -270) (undo-tree-id86 . -9) (undo-tree-id87 . -9) 279 (263 . 279)) nil (25594 5848 997889 485000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . 286)) nil (25594 5848 997886 215000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t face font-lock-string-face)) . 287)) nil (25594 5848 997885 422000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t face font-lock-string-face)) . 287)) nil (25594 5848 997884 736000) 0 nil])
([nil nil ((#("%" 0 1 (fontified t face font-lock-string-face)) . 287)) nil (25594 5848 997884 52000) 0 nil])
([nil nil ((287 . 289)) nil (25594 5848 997883 326000) 0 nil])
([nil nil ((229 . 292) 288) nil (25594 5848 997882 700000) 0 nil])
([nil nil ((301 . 309) (#("increase" 0 8 (fontified t face font-lock-string-face)) . 301) (undo-tree-id85 . -7)) nil (25594 5848 997881 668000) 0 nil])
([nil nil ((250 . 252)) nil (25594 5848 997880 196000) 0 nil])
([nil nil ((315 . 317)) nil (25594 5848 997879 255000) 0 nil])
([nil nil ((354 . 358) (#("up" 0 2 (fontified t face font-lock-string-face)) . 354) (undo-tree-id83 . -1) (undo-tree-id84 . -1)) nil (25594 5848 997878 630000) 0 nil])
([nil nil ((#(" down" 0 5 (fontified t face font-lock-string-face)) . 353) (undo-tree-id80 . -4) (undo-tree-id81 . 5) (undo-tree-id82 . -1)) nil (25594 5848 997876 545000) 0 nil])
([nil nil ((#("        'decrease': '~/.config/eww/scripts/volume_script.py',
" 0 8 (fontified t) 8 18 (fontified t face font-lock-string-face) 18 20 (fontified t) 20 43 (fontified t face font-lock-string-face) 43 59 (fontified t face font-lock-string-face) 59 60 (fontified t face font-lock-string-face) 60 62 (fontified t)) . 294) (undo-tree-id67 . 3) (undo-tree-id68 . -61) (undo-tree-id69 . -21) (undo-tree-id70 . 3) (undo-tree-id71 . -21) (undo-tree-id72 . -21) (undo-tree-id73 . -21) (undo-tree-id74 . -21) (undo-tree-id75 . -21) (undo-tree-id76 . -43) (undo-tree-id77 . -59) (undo-tree-id78 . -21) (undo-tree-id79 . -59) 353) nil (25594 5848 997873 451000) 0 nil])
([nil nil ((#("        'decrease': 'pactl set-sink-volume @DEFAULT_SINK@ -2%'
" 0 8 (fontified t) 8 18 (fontified t face font-lock-string-face) 18 20 (fontified t) 20 21 (fontified t face font-lock-string-face) 21 62 (fontified t face font-lock-string-face) 62 63 (fontified t)) . 294) (undo-tree-id63 . 63) (undo-tree-id64 . -62) (undo-tree-id65 . 63) (undo-tree-id66 . -59) 353) nil (25594 5848 997864 481000) 0 nil])
([nil nil ((238 . 244) (#("increase" 0 8 (fontified t face font-lock-string-face)) . 238) (undo-tree-id60 . -7) (undo-tree-id61 . -8) (undo-tree-id62 . -8)) nil (25594 5848 997861 166000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-string-face)) . 287) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1)) nil (25594 5848 997858 58000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-string-face)) . 287) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . 1) (undo-tree-id50 . -1) (undo-tree-id51 . -1)) nil (25594 5848 997851 199000) 0 nil])
([nil nil ((287 . 289) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -287) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (287 . 288)) nil (25594 5848 997843 768000) 0 nil])
([nil nil ((701 . 709) (700 . 702) (#("[" 0 1 (fontified nil face font-lock-string-face)) . -700) (693 . 701) (692 . 694) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -692) (692 . 693) (t 25594 5849 5681 31000)) nil (25594 6102 94718 756000) 0 nil])
([nil nil ((714 . 719) (713 . 715) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -713) (712 . 714)) nil (25594 6102 94704 656000) 0 nil])
([nil nil ((713 . 717) (#(" " 0 1 (fontified nil face font-lock-string-face)) . 712) (undo-tree-id121 . -1) (713 . 714)) nil (25594 6102 94703 205000) 0 nil])
([nil nil ((717 . 718) (717 . 718)) nil (25594 6102 94701 656000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 717)) nil (25594 6102 94700 633000) 0 nil])
([nil nil ((712 . 713)) nil (25594 6102 94699 792000) 0 nil])
([nil nil ((783 . 787) (782 . 784) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -782) (776 . 783) (763 . 776) (#("s" 0 1 (fontified t face font-lock-string-face)) . -763) (undo-tree-id120 . -1) 764 (756 . 764) (755 . 757) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -755) (746 . 756) (725 . 746)) nil (25594 6102 94698 565000) 0 nil])
([nil nil ((718 . 719)) nil (25594 6102 94695 460000) 0 nil])
([nil nil ((791 . 793) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -791) (791 . 792) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -791) (undo-tree-id119 . -1) (#(")" 0 1 (fontified t face font-lock-string-face)) . 792) (791 . 793) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -791) (790 . 792)) nil (25594 6102 94694 467000) 0 nil])
([nil nil ((794 . 795) (791 . 792) 792) nil (25594 6102 94692 267000) 0 nil])
([nil nil ((793 . 796)) nil (25594 6102 94691 302000) 0 nil])
([nil nil ((793 . 794) (#("c" 0 1 (fontified t face nil)) . 793)) nil (25594 6102 94690 212000) 0 nil])
([nil nil ((793 . 794) (#("C" 0 1 (fontified t face nil)) . 793)) nil (25594 6102 94689 216000) 0 nil])
([nil nil ((806 . 823) (800 . 806) (799 . 801) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -799) (798 . 800)) nil (25594 6102 94688 121000) 0 nil])
([nil nil ((828 . 832) (822 . 828)) nil (25594 6102 94686 889000) 0 nil])
([nil nil ((842 . 855) (833 . 842)) nil (25594 6102 94686 219000) 0 nil])
([nil nil ((859 . 866) (857 . 859) (856 . 858) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -856) (856 . 857) (#(":" 0 1 (fontified t face font-lock-string-face)) . -856) (undo-tree-id118 . -1) 857 (855 . 857)) nil (25594 6102 94685 367000) 0 nil])
([nil nil ((866 . 871)) nil (25594 6102 94683 50000) 0 nil])
([nil nil ((866 . 867)) nil (25594 6102 94682 518000) 0 nil])
([nil nil ((878 . 881) (877 . 879) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -877) (874 . 878) (873 . 875) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -873) (873 . 874) (872 . 873)) nil (25594 6102 94681 313000) 0 nil])
([nil nil ((801 . 802) (801 . 802) (799 . 800) (799 . 800)) nil (25594 6102 94679 565000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 801)) nil (25594 6102 94678 383000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 799)) nil (25594 6102 94677 762000) 0 nil])
([nil nil ((800 . 811)) nil (25594 6102 94676 858000) 0 nil])
([nil nil ((811 . 812)) nil (25594 6102 94676 158000) 0 nil])
([nil nil ((714 . 724) (#("    " 0 4 (fontified t)) . 714) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) 718) nil (25594 6102 94674 342000) 0 nil])
([nil nil ((903 . 905)) nil (25594 6102 94363 571000) 0 nil])
([nil nil ((905 . 919)) nil (25594 6102 94362 794000) 0 nil])
([nil nil ((919 . 920)) nil (25594 6102 94359 495000) 0 nil])
([nil nil ((#("def command(self, event):

    if event.startswith('pactl'):
        action = self.actions[event.lstrip('pactl')]
        subprocess.Popen(action, text=True, shell=True)
    return True
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 16 (fontified t face font-lock-keyword-face) 16 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 26 (fontified t) 26 31 (fontified t) 31 33 (fontified t face font-lock-keyword-face) 33 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-1-face)) 51 52 (fontified t face font-lock-string-face) 52 57 (fontified t face font-lock-string-face) 57 58 (fontified t face font-lock-string-face) 58 59 (fontified t face (rainbow-delimiters-depth-1-face)) 59 69 (fontified t) 69 75 (fontified t face font-lock-variable-name-face) 75 78 (fontified t) 78 82 (fontified t face font-lock-keyword-face) 82 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-1-face)) 91 103 (fontified t) 103 104 (fontified t face (rainbow-delimiters-depth-2-face)) 104 105 (fontified t face font-lock-string-face) 105 110 (fontified t face font-lock-string-face) 110 111 (fontified t face font-lock-string-face) 111 112 (fontified t face (rainbow-delimiters-depth-2-face)) 112 113 (fontified t face (rainbow-delimiters-depth-1-face)) 113 122 (fontified t) 122 138 (fontified t) 138 139 (fontified t face (rainbow-delimiters-depth-1-face)) 139 152 (fontified t) 152 156 (fontified t face font-lock-constant-face) 156 164 (fontified t) 164 168 (fontified t face font-lock-constant-face) 168 169 (fontified t face (rainbow-delimiters-depth-1-face)) 169 174 (fontified t) 174 180 (fontified t face font-lock-keyword-face) 180 181 (fontified t) 181 185 (fontified t face font-lock-constant-face) 185 186 (fontified t)) . 1020) (undo-tree-id364 . -186) (undo-tree-id365 . -185) (undo-tree-id366 . -24) (undo-tree-id367 . -186) (undo-tree-id368 . -26) (undo-tree-id369 . -186) (undo-tree-id370 . -186) (undo-tree-id371 . -186) (undo-tree-id372 . -24) (undo-tree-id373 . -24) (undo-tree-id374 . -24) (undo-tree-id375 . -24) (undo-tree-id376 . -24) (undo-tree-id377 . -25) (undo-tree-id378 . -24) (undo-tree-id379 . -24) (undo-tree-id380 . -24) (undo-tree-id381 . -186) (undo-tree-id382 . -24) (undo-tree-id383 . -186) (undo-tree-id384 . -24) (undo-tree-id385 . -24) (undo-tree-id386 . -24) (undo-tree-id387 . -26) (undo-tree-id388 . -26) (undo-tree-id389 . -51) (undo-tree-id390 . -51) (undo-tree-id391 . -85) (undo-tree-id392 . -138) (undo-tree-id393 . -185) (undo-tree-id394 . -185) (undo-tree-id395 . -186) (undo-tree-id396 . -186) (undo-tree-id397 . -186) (undo-tree-id398 . -186) (undo-tree-id399 . -186) 1206 (t 25594 6102 99018 37000)) nil (25594 6110 330373 181000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1019) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) 1020) nil (25594 6110 330343 725000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1018) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) 1019) nil (25594 6110 330319 373000) 0 nil])
([nil nil ((#("
    return prefix+ficon(icon)+f'{int(vol):02d}%%'+suffix" 0 1 (fontified t) 1 5 (fontified t) 5 11 (fontified t face font-lock-keyword-face) 11 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-1-face)) 30 32 (fontified t) 32 33 (fontified t face font-lock-string-face) 33 34 (fontified t face nil) 34 37 (fontified t face font-lock-builtin-face) 37 38 (fontified t face nil) 38 41 (fontified t face nil) 41 42 (fontified t face nil) 42 43 (fontified t face nil) 43 46 (fontified t face nil) 46 47 (fontified t face nil) 47 49 (fontified t face font-lock-string-face) 49 50 (fontified t face font-lock-string-face) 50 57 (fontified t)) . 961) (undo-tree-id199 . -57) (undo-tree-id200 . -1) (undo-tree-id201 . -56) (undo-tree-id202 . -57) (undo-tree-id203 . -57) (undo-tree-id204 . -57) (undo-tree-id205 . -57) (undo-tree-id206 . -57) (undo-tree-id207 . -57) (undo-tree-id208 . -57) (undo-tree-id209 . -1) (undo-tree-id210 . -56) (undo-tree-id211 . -56) (undo-tree-id212 . -57) (undo-tree-id213 . -57) (undo-tree-id214 . -57) (undo-tree-id215 . -57) (undo-tree-id216 . -57) (undo-tree-id217 . -57) (undo-tree-id218 . -57) (undo-tree-id219 . -57) (undo-tree-id220 . -57) (undo-tree-id221 . -57) (undo-tree-id222 . -57) (undo-tree-id223 . -57) (undo-tree-id224 . -57) (undo-tree-id225 . -57) (undo-tree-id226 . -57) (undo-tree-id227 . -57) (undo-tree-id228 . -57) (undo-tree-id229 . -57) (undo-tree-id230 . -57) (undo-tree-id231 . -57) (undo-tree-id232 . -57) (undo-tree-id233 . -57) (undo-tree-id234 . -57) (undo-tree-id235 . -57) (undo-tree-id236 . -57) (undo-tree-id237 . -57) (undo-tree-id238 . -57) (undo-tree-id239 . -57) (undo-tree-id240 . -57) (undo-tree-id241 . -57) (undo-tree-id242 . -57) (undo-tree-id243 . -57) (undo-tree-id244 . -57) (undo-tree-id245 . -57) (undo-tree-id246 . -57) (undo-tree-id247 . -57) (undo-tree-id248 . -57) (undo-tree-id249 . -57) (undo-tree-id250 . -57) (undo-tree-id251 . -57) (undo-tree-id252 . -57) (undo-tree-id253 . -57) (undo-tree-id254 . -1) (undo-tree-id255 . -5) (undo-tree-id256 . -5) (undo-tree-id257 . -57) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -57) 962) nil (25594 6110 330283 291000) 0 nil])
([nil nil ((#("
    suffix = '%{A5}%{A4}%{A}%{A3}'" 0 1 (fontified t) 1 5 (fontified t) 5 11 (fontified t face font-lock-variable-name-face) 11 14 (fontified t) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 33 (fontified t face font-lock-string-face) 33 34 (fontified t face font-lock-string-face) 34 35 (fontified t face font-lock-string-face)) . 926) (undo-tree-id122 . -35) (undo-tree-id123 . -1) (undo-tree-id124 . -34) (undo-tree-id125 . -35) (undo-tree-id126 . -35) (undo-tree-id127 . -35) (undo-tree-id128 . -35) (undo-tree-id129 . -35) (undo-tree-id130 . -35) (undo-tree-id131 . -35) (undo-tree-id132 . -1) (undo-tree-id133 . -34) (undo-tree-id134 . -34) (undo-tree-id135 . -35) (undo-tree-id136 . -35) (undo-tree-id137 . -35) (undo-tree-id138 . -35) (undo-tree-id139 . -35) (undo-tree-id140 . -35) (undo-tree-id141 . -35) (undo-tree-id142 . -35) (undo-tree-id143 . -35) (undo-tree-id144 . -35) (undo-tree-id145 . -35) (undo-tree-id146 . -35) (undo-tree-id147 . -35) (undo-tree-id148 . -35) (undo-tree-id149 . -35) (undo-tree-id150 . -35) (undo-tree-id151 . -35) (undo-tree-id152 . -35) (undo-tree-id153 . -35) (undo-tree-id154 . -35) (undo-tree-id155 . -35) (undo-tree-id156 . -35) (undo-tree-id157 . -35) (undo-tree-id158 . -35) (undo-tree-id159 . -35) (undo-tree-id160 . -35) (undo-tree-id161 . -35) (undo-tree-id162 . -35) (undo-tree-id163 . -35) (undo-tree-id164 . -35) (undo-tree-id165 . -35) (undo-tree-id166 . -35) (undo-tree-id167 . -35) (undo-tree-id168 . -35) (undo-tree-id169 . -35) (undo-tree-id170 . -35) (undo-tree-id171 . -35) (undo-tree-id172 . -35) (undo-tree-id173 . -35) (undo-tree-id174 . -35) (undo-tree-id175 . -35) (undo-tree-id176 . -35) (undo-tree-id177 . -35) (undo-tree-id178 . -35) (undo-tree-id179 . -35) (undo-tree-id180 . -35) (undo-tree-id181 . -35) (undo-tree-id182 . -35) (undo-tree-id183 . -35) (undo-tree-id184 . -35) (undo-tree-id185 . -35) (undo-tree-id186 . -35) (undo-tree-id187 . -35) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -5) (undo-tree-id191 . -5) (undo-tree-id192 . -14) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -35) 927) nil (25594 6110 330247 770000) 0 nil])
([nil nil ((926 . 927)) nil (25594 6110 330035 58000) 0 nil])
([nil nil ((934 . 936) (#("(" 0 1 (fontified nil)) . -934) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (928 . 935) (#("    " 0 4 (fontified t)) . -928) (undo-tree-id402 . -4) (undo-tree-id403 . -4) 932 (928 . 932) (#("    " 0 4 (fontified nil)) . 927) (undo-tree-id404 . -4) (931 . 932) (926 . 931) (t 25594 6110 335684 825000) 807) nil (25594 6217 673097 528000) 0 nil])
([nil nil ((#("self" 0 4 (fontified t face font-lock-keyword-face)) . 310) (undo-tree-id405 . -3) (undo-tree-id406 . -4) (t 25594 6217 679019 712000)) nil (25594 6224 862265 70000) 0 nil])
([nil nil ((#("self" 0 4 (fontified t face font-lock-keyword-face)) . 530) (undo-tree-id410 . -3) (undo-tree-id411 . -4) (t 25594 6224 865686 482000)) nil (25594 6233 842533 472000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 530) (undo-tree-id407 . 1) (undo-tree-id408 . -1) (undo-tree-id409 . -1)) nil (25594 6233 842528 467000) 0 nil])
([nil nil ((599 . 600) (t 25594 6233 849019 948000)) nil (25594 6254 814071 321000) 0 nil])
([nil nil ((704 . 705) (t 25594 6254 819020 254000)) nil (25594 6309 566765 712000) 0 nil])
([nil nil ((789 . 790) (782 . 783) 787 (t 25594 6275 339020 553000)) nil (25594 6313 987340 632000) 0 nil] [nil nil ((782 . 784) (#("{icon}" 0 5 (fontified t face nil) 5 6 (fontified t face nil)) . 782) (undo-tree-id412 . -5) (undo-tree-id413 . -6) (undo-tree-id414 . -6) (undo-tree-id415 . -5) (undo-tree-id416 . -5) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . 6) (undo-tree-id426 . -1) (undo-tree-id427 . 1) (undo-tree-id428 . -6) (undo-tree-id429 . -6) (undo-tree-id430 . -6) (undo-tree-id431 . -6) (t 25594 6275 339020 553000)) ((782 . 788) (#("s\"" 0 2 (fontified t face font-lock-string-face)) . 782) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1)) (25594 6309 566482 430000) 0 nil])
([nil nil ((730 . 737) (729 . 731) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -729) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (728 . 730) (727 . 729) (#("`" 0 1 (fontified nil)) . -727) (727 . 728) (#(" " 0 1 (fontified nil)) . -727) (undo-tree-id442 . -1) (727 . 728) (#("`" 0 1 (fontified nil face font-lock-string-face)) . -727) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (718 . 728) (717 . 719) (#("'" 0 1 (fontified nil)) . -717) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (717 . 718) (706 . 717) (t 25594 6313 992354 451000) 704) nil (25594 6428 243355 98000) 0 nil])
nil
([nil nil ((738 . 758)) nil (25594 6428 243350 190000) 0 nil])
([nil nil ((752 . 753)) nil (25594 6428 243349 878000) 0 nil])
([nil nil ((759 . 764)) nil (25594 6428 243349 538000) 0 nil])
([nil nil ((782 . 789) (781 . 783) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -781) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (780 . 782) (779 . 781) (#("`" 0 1 (fontified nil)) . -779) (779 . 780) (#(" " 0 1 (fontified nil)) . -779) (undo-tree-id437 . -1) (779 . 780) (#("`" 0 1 (fontified nil face font-lock-string-face)) . -779) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (779 . 780) (765 . 779)) nil (25594 6428 243348 307000) 0 nil])
([nil nil ((798 . 817) (790 . 798)) nil (25594 6428 243334 270000) 0 nil])
([nil nil ((985 . 990) (#("progress" 0 8 (fontified t face font-lock-string-face)) . 985) (undo-tree-id451 . -7) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -8) (undo-tree-id455 . -8) (t 25594 6428 249022 769000)) nil (25594 7093 269329 351000) 0 nil])
([nil nil ((996 . 1009) (#(" " 0 1 (fontified t face font-lock-string-face)) . -996) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) 997 (991 . 997)) nil (25594 7093 269322 901000) 0 nil])
([nil nil ((1017 . 1025) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1017) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) 1018 (1009 . 1018) (t 25594 7093 275699 142000)) nil (25594 7106 156664 254000) 0 nil])
([nil nil ((1086 . 1088) (#("{" 0 1 (fontified nil face nil)) . -1086) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (1086 . 1087) (1085 . 1087) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -1085) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (1080 . 1086) (#("r" 0 1 (fontified t face font-lock-string-face)) . -1080) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) 1081 (1078 . 1081) (1071 . 1078) (#("s" 0 1 (fontified t face font-lock-string-face)) . -1071) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1072) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1073) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) 1074 (1071 . 1074) (1070 . 1072) (#("`" 0 1 (fontified nil face font-lock-string-face)) . -1070) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (1059 . 1071) (t 25594 7106 162365 996000)) nil (25594 7152 774866 92000) 0 nil])
([nil nil ((1097 . 1106) (#("d" 0 1 (fontified t face font-lock-string-face)) . -1097) (undo-tree-id512 . -1) 1098 (1092 . 1098) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1092) (undo-tree-id513 . -1) 1093 (1090 . 1093) (t 25594 7152 779033 344000)) nil (25594 8224 531243 783000) 0 nil])
([nil nil ((599 . 608) (t 25594 8224 535715 588000)) nil (25594 8658 609092 63000) 0 nil])
([nil nil ((921 . 922)) nil (25594 8668 639892 456000) 0 nil] [nil nil ((#("          f'(box :space-evenly false :spacing 5 (label :class \"icon\" :text \"{icon}\") \"{vol}\" '
" 0 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil face font-lock-string-face) 12 13 (fontified nil face font-lock-string-face) 13 48 (fontified nil face font-lock-string-face) 48 75 (fontified nil face font-lock-string-face) 75 76 (fontified nil face font-lock-string-face) 76 81 (fontified nil face nil) 81 82 (fontified nil face nil) 82 83 (fontified nil face font-lock-string-face) 83 85 (fontified nil face font-lock-string-face) 85 86 (fontified nil face font-lock-string-face) 86 87 (fontified nil face nil) 87 88 (fontified nil face nil) 88 90 (fontified nil face nil) 90 91 (fontified nil face nil) 91 93 (fontified nil face font-lock-string-face) 93 94 (fontified nil face font-lock-string-face) 94 95 (fontified nil)) . 924) (undo-tree-id662 . -75) (undo-tree-id663 . 12) (undo-tree-id664 . -75) (undo-tree-id665 . -81) (undo-tree-id666 . -95) (undo-tree-id667 . -75) (undo-tree-id668 . -81) (undo-tree-id669 . -75) (undo-tree-id670 . -75) (undo-tree-id671 . -7) (undo-tree-id673 . -94) (undo-tree-id675 . -94) (undo-tree-id677 . -7) (undo-tree-id679 . 95) (811 . 924) (#("          ':onhover `${EWW_CMD} update volume_reveal=true` :onhoverlost `${EWW_CMD} update volume_reveal=false`'
" 0 10 (fontified t) 10 20 (fontified t face font-lock-string-face) 20 22 (fontified t face font-lock-string-face) 22 30 (fontified t face font-lock-string-face) 30 57 (fontified t face font-lock-string-face) 57 72 (fontified t face font-lock-string-face) 72 74 (fontified t face font-lock-string-face) 74 82 (fontified t face font-lock-string-face) 82 110 (fontified t face font-lock-string-face) 110 111 (fontified t face font-lock-string-face) 111 112 (fontified t face font-lock-string-face) 112 113 (fontified t)) . 716) (undo-tree-id681 . -12) (undo-tree-id683 . -7) (undo-tree-id685 . -7) (undo-tree-id687 . -7) (829 . 924) 836) ((#("          f'(box :space-evenly false :spacing 5 (label :class \"icon\" :text \"{icon}\") \"{vol}\" '
" 0 7 (fontified nil) 7 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil face font-lock-string-face) 12 13 (fontified nil face font-lock-string-face) 13 48 (fontified nil face font-lock-string-face) 48 75 (fontified nil face font-lock-string-face) 75 76 (fontified nil face font-lock-string-face) 76 81 (fontified nil face nil) 81 82 (fontified nil face nil) 82 83 (fontified nil face font-lock-string-face) 83 85 (fontified nil face font-lock-string-face) 85 86 (fontified nil face font-lock-string-face) 86 87 (fontified nil face nil) 87 88 (fontified nil face nil) 88 90 (fontified nil face nil) 90 91 (fontified nil face nil) 91 93 (fontified nil face font-lock-string-face) 93 94 (fontified nil face font-lock-string-face) 94 95 (fontified nil)) . 829) (undo-tree-id1255 . 95) (undo-tree-id1256 . -95) (undo-tree-id1257 . -7) (undo-tree-id1258 . 95) (undo-tree-id1259 . 95) (undo-tree-id1260 . 95) (undo-tree-id1261 . 95) (undo-tree-id1262 . -7) (undo-tree-id1263 . -7) (undo-tree-id1264 . -7) (undo-tree-id1265 . -7) (undo-tree-id1266 . -94) (undo-tree-id1267 . -7) (undo-tree-id1268 . -7) (undo-tree-id1269 . -95) (undo-tree-id1270 . -95) (undo-tree-id1271 . 95) (716 . 829) (#("          ':onhover `${EWW_CMD} update volume_reveal=true` :onhoverlost `${EWW_CMD} update volume_reveal=false`'
" 0 10 (fontified t) 10 20 (fontified t face font-lock-string-face) 20 22 (fontified t face font-lock-string-face) 22 30 (fontified t face font-lock-string-face) 30 57 (fontified t face font-lock-string-face) 57 72 (fontified t face font-lock-string-face) 72 74 (fontified t face font-lock-string-face) 74 82 (fontified t face font-lock-string-face) 82 110 (fontified t face font-lock-string-face) 110 111 (fontified t face font-lock-string-face) 111 112 (fontified t face font-lock-string-face) 112 113 (fontified t)) . 811) (undo-tree-id1272 . 113) (undo-tree-id1273 . -113) (924 . 1019)) (25594 8655 892056 805000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . 921) (undo-tree-id1305 . 1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (t 25594 8668 645722 88000)) nil (25594 8724 850557 689000) 0 nil])
([nil nil ((#("          f'(box :space-evenly false :spacing 5 (label :class \"icon\" :text \"{icon}\") \"{vol}\" '
" 0 7 (fontified nil) 7 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil face font-lock-string-face) 12 13 (fontified nil face font-lock-string-face) 13 48 (fontified nil face font-lock-string-face) 48 75 (fontified nil face font-lock-string-face) 75 76 (fontified nil face font-lock-string-face) 76 81 (fontified nil face nil) 81 82 (fontified nil face nil) 82 83 (fontified nil face font-lock-string-face) 83 85 (fontified nil face font-lock-string-face) 85 86 (fontified nil face font-lock-string-face) 86 87 (fontified nil face nil) 87 88 (fontified nil face nil) 88 90 (fontified nil face nil) 90 91 (fontified nil face nil) 91 93 (fontified nil face font-lock-string-face) 93 94 (fontified nil face font-lock-string-face) 94 95 (fontified nil)) . 811) (undo-tree-id514 . -95) (undo-tree-id515 . -7) (undo-tree-id517 . 95) (undo-tree-id519 . -7) (undo-tree-id521 . -7) (undo-tree-id523 . -7) (undo-tree-id525 . -7) (undo-tree-id527 . 95) (695 . 811) (#("        f'(eventbox :onclick `{actions[\"max\"]}` :onrightclick `{actions[\"mute\"]}` :onscroll `{actions[\"change\"]}` '
" 0 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t face font-lock-string-face) 10 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 38 (fontified t face nil) 38 40 (fontified t face nil) 40 43 (fontified t face font-lock-builtin-face) 43 44 (fontified t face nil) 44 45 (fontified t face nil) 45 46 (fontified t face nil) 46 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 71 (fontified t face nil) 71 78 (fontified t face nil) 78 79 (fontified t face nil) 79 80 (fontified t face nil) 80 92 (fontified t face font-lock-string-face) 92 93 (fontified t face font-lock-string-face) 93 101 (fontified t face nil) 101 110 (fontified t face nil) 110 111 (fontified t face nil) 111 112 (fontified t face nil) 112 115 (fontified t face font-lock-string-face) 115 116 (fontified t)) . 600) (undo-tree-id528 . 108) (undo-tree-id530 . -92) (undo-tree-id531 . -92) (undo-tree-id533 . -60) (undo-tree-id535 . -60) (undo-tree-id537 . -60) (undo-tree-id539 . -59) (undo-tree-id541 . -58) (undo-tree-id543 . -57) (undo-tree-id545 . -56) (undo-tree-id547 . -55) (undo-tree-id549 . -54) (undo-tree-id551 . -53) (undo-tree-id553 . -52) (undo-tree-id555 . -51) (undo-tree-id557 . -50) (undo-tree-id559 . -49) (undo-tree-id561 . -48) (undo-tree-id563 . -47) (undo-tree-id565 . -46) (undo-tree-id567 . -45) (undo-tree-id569 . -44) (undo-tree-id571 . -43) (undo-tree-id573 . -43) (undo-tree-id575 . -42) (undo-tree-id577 . -41) (undo-tree-id579 . -40) (undo-tree-id581 . -39) (undo-tree-id583 . -38) (undo-tree-id585 . -37) (undo-tree-id587 . -36) (undo-tree-id589 . -115) (undo-tree-id591 . -34) (undo-tree-id593 . -33) (undo-tree-id595 . -32) (undo-tree-id597 . -31) (undo-tree-id599 . -30) (undo-tree-id601 . -29) (undo-tree-id603 . -28) (undo-tree-id605 . -27) (undo-tree-id607 . -26) (undo-tree-id609 . -25) (undo-tree-id611 . -24) (undo-tree-id613 . -23) (undo-tree-id615 . -22) (undo-tree-id617 . -21) (undo-tree-id619 . -20) (undo-tree-id621 . -20) (undo-tree-id623 . -19) (undo-tree-id625 . -18) (undo-tree-id627 . -17) (undo-tree-id629 . -16) (undo-tree-id631 . -15) (undo-tree-id633 . -14) (undo-tree-id635 . -13) (undo-tree-id637 . -12) (undo-tree-id639 . -11) (undo-tree-id641 . -10) (undo-tree-id643 . -9) (undo-tree-id645 . -115) (undo-tree-id647 . -10) (undo-tree-id649 . -9) (undo-tree-id651 . 108) (undo-tree-id653 . -8) (undo-tree-id655 . -8) (undo-tree-id657 . -7) (undo-tree-id659 . -7) (undo-tree-id661 . -7) (716 . 811) 723) ((#("          f'(box :space-evenly false :spacing 5 (label :class \"icon\" :text \"{icon}\") \"{vol}\" '
" 0 7 (fontified nil) 7 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil face font-lock-string-face) 12 13 (fontified nil face font-lock-string-face) 13 48 (fontified nil face font-lock-string-face) 48 75 (fontified nil face font-lock-string-face) 75 76 (fontified nil face font-lock-string-face) 76 81 (fontified nil face nil) 81 82 (fontified nil face nil) 82 83 (fontified nil face font-lock-string-face) 83 85 (fontified nil face font-lock-string-face) 85 86 (fontified nil face font-lock-string-face) 86 87 (fontified nil face nil) 87 88 (fontified nil face nil) 88 90 (fontified nil face nil) 90 91 (fontified nil face nil) 91 92 (fontified nil face font-lock-string-face) 92 93 (fontified nil face font-lock-string-face) 93 94 (fontified nil face font-lock-string-face) 94 95 (fontified nil)) . 716) (undo-tree-id1076 . -48) (undo-tree-id1077 . 2) (undo-tree-id1078 . -48) (undo-tree-id1079 . -92) (undo-tree-id1080 . -7) (undo-tree-id1081 . -92) (undo-tree-id1082 . -93) (undo-tree-id1083 . -93) (undo-tree-id1084 . -93) (undo-tree-id1085 . -93) (undo-tree-id1086 . -93) (undo-tree-id1087 . -93) (undo-tree-id1088 . -93) (undo-tree-id1089 . -93) (undo-tree-id1090 . -93) (undo-tree-id1091 . -93) (undo-tree-id1092 . -70) (undo-tree-id1093 . -70) (undo-tree-id1094 . -70) (undo-tree-id1095 . -70) (undo-tree-id1096 . -70) (undo-tree-id1097 . -70) (undo-tree-id1098 . -70) (undo-tree-id1099 . -70) (undo-tree-id1100 . -70) (undo-tree-id1101 . -70) (undo-tree-id1102 . -51) (undo-tree-id1103 . -51) (undo-tree-id1104 . -51) (undo-tree-id1105 . -51) (undo-tree-id1106 . -51) (undo-tree-id1107 . -51) (undo-tree-id1108 . -51) (undo-tree-id1109 . -51) (undo-tree-id1110 . -51) (undo-tree-id1111 . -51) (undo-tree-id1112 . -92) (undo-tree-id1113 . -92) (undo-tree-id1114 . -92) (undo-tree-id1115 . -92) (undo-tree-id1116 . -92) (undo-tree-id1117 . -92) (undo-tree-id1118 . -92) (undo-tree-id1119 . -92) (undo-tree-id1120 . -92) (undo-tree-id1121 . -92) (undo-tree-id1122 . -91) (undo-tree-id1123 . -91) (undo-tree-id1124 . -90) (undo-tree-id1125 . -90) (undo-tree-id1126 . -89) (undo-tree-id1127 . -89) (undo-tree-id1128 . -88) (undo-tree-id1129 . -88) (undo-tree-id1130 . -87) (undo-tree-id1131 . -87) (undo-tree-id1132 . -86) (undo-tree-id1133 . -86) (undo-tree-id1134 . -85) (undo-tree-id1135 . -85) (undo-tree-id1136 . -84) (undo-tree-id1137 . -84) (undo-tree-id1138 . -83) (undo-tree-id1139 . -83) (undo-tree-id1140 . -82) (undo-tree-id1141 . -82) (undo-tree-id1142 . -81) (undo-tree-id1143 . -81) (undo-tree-id1144 . -80) (undo-tree-id1145 . -80) (undo-tree-id1146 . -79) (undo-tree-id1147 . -79) (undo-tree-id1148 . -78) (undo-tree-id1149 . -78) (undo-tree-id1150 . -77) (undo-tree-id1151 . -77) (undo-tree-id1152 . -76) (undo-tree-id1153 . -76) (undo-tree-id1154 . -75) (undo-tree-id1155 . -75) (undo-tree-id1156 . -74) (undo-tree-id1157 . -74) (undo-tree-id1158 . -73) (undo-tree-id1159 . -73) (undo-tree-id1160 . -72) (undo-tree-id1161 . -72) (undo-tree-id1162 . -71) (undo-tree-id1163 . -71) (undo-tree-id1164 . -70) (undo-tree-id1165 . -70) (undo-tree-id1166 . -69) (undo-tree-id1167 . -69) (undo-tree-id1168 . -68) (undo-tree-id1169 . -68) (undo-tree-id1170 . -67) (undo-tree-id1171 . -67) (undo-tree-id1172 . -66) (undo-tree-id1173 . -66) (undo-tree-id1174 . -65) (undo-tree-id1175 . -65) (undo-tree-id1176 . -64) (undo-tree-id1177 . -64) (undo-tree-id1178 . -63) (undo-tree-id1179 . -63) (undo-tree-id1180 . -62) (undo-tree-id1181 . -62) (undo-tree-id1182 . -61) (undo-tree-id1183 . -61) (undo-tree-id1184 . -60) (undo-tree-id1185 . -60) (undo-tree-id1186 . -59) (undo-tree-id1187 . -59) (undo-tree-id1188 . -58) (undo-tree-id1189 . -58) (undo-tree-id1190 . -57) (undo-tree-id1191 . -57) (undo-tree-id1192 . -56) (undo-tree-id1193 . -56) (undo-tree-id1194 . -55) (undo-tree-id1195 . -55) (undo-tree-id1196 . -54) (undo-tree-id1197 . -54) (undo-tree-id1198 . -53) (undo-tree-id1199 . -53) (undo-tree-id1200 . -53) (undo-tree-id1201 . -52) (undo-tree-id1202 . -52) (undo-tree-id1203 . -51) (undo-tree-id1204 . -51) (undo-tree-id1205 . -50) (undo-tree-id1206 . -50) (undo-tree-id1207 . -49) (undo-tree-id1208 . -49) (undo-tree-id1209 . -53) (undo-tree-id1210 . -53) (undo-tree-id1211 . -60) (undo-tree-id1212 . -60) (undo-tree-id1213 . -60) (undo-tree-id1214 . -60) (undo-tree-id1215 . -60) (undo-tree-id1216 . -60) (undo-tree-id1217 . -60) (undo-tree-id1218 . -60) (undo-tree-id1219 . -60) (undo-tree-id1220 . -55) (undo-tree-id1221 . -55) (undo-tree-id1222 . -53) (undo-tree-id1223 . -53) (undo-tree-id1224 . -60) (undo-tree-id1225 . -60) (undo-tree-id1226 . -67) (undo-tree-id1227 . -67) (undo-tree-id1228 . -73) (undo-tree-id1229 . -73) (undo-tree-id1230 . -83) (undo-tree-id1231 . -83) (undo-tree-id1232 . -91) (undo-tree-id1233 . -91) (undo-tree-id1234 . -92) (undo-tree-id1235 . -92) (undo-tree-id1236 . -92) (undo-tree-id1237 . -92) (undo-tree-id1238 . -92) (undo-tree-id1239 . -92) (undo-tree-id1240 . -92) (undo-tree-id1241 . -92) (undo-tree-id1242 . -48) (undo-tree-id1243 . -48) (undo-tree-id1244 . -48) (undo-tree-id1245 . 2) (undo-tree-id1246 . -92) (undo-tree-id1247 . -92) (undo-tree-id1248 . -92) (undo-tree-id1249 . -92) (undo-tree-id1250 . -92) (undo-tree-id1251 . -95) (undo-tree-id1252 . -95) (undo-tree-id1253 . 95) (600 . 716) (#("        f'(eventbox :onclick `{actions[\"max\"]}` :onrightclick `{actions[\"mute\"]}` :onscroll `{actions[\"change\"]}` '
" 0 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t face font-lock-string-face) 10 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 38 (fontified t face nil) 38 40 (fontified t face nil) 40 43 (fontified t face font-lock-builtin-face) 43 44 (fontified t face nil) 44 45 (fontified t face nil) 45 46 (fontified t face nil) 46 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 71 (fontified t face nil) 71 78 (fontified t face nil) 78 79 (fontified t face nil) 79 80 (fontified t face nil) 80 92 (fontified t face font-lock-string-face) 92 93 (fontified t face font-lock-string-face) 93 101 (fontified t face nil) 101 110 (fontified t face nil) 110 111 (fontified t face nil) 111 112 (fontified t face nil) 112 115 (fontified t face font-lock-string-face) 115 116 (fontified t)) . 695) (undo-tree-id1254 . -116) (811 . 906) (t 25594 8591 139054 292000)) (25594 8654 961047 974000) 0 nil])
([nil nil ((921 . 922)) nil (25594 8724 850553 437000) 0 nil])
([nil nil ((#("(label :class \"icon\" :text \"{icon}\") \"{vol}\" " 0 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 33 (fontified t face nil) 33 34 (fontified t face nil) 34 35 (fontified t face font-lock-string-face) 35 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t face nil) 39 40 (fontified t face nil) 40 42 (fontified t face nil) 42 43 (fontified t face nil) 43 45 (fontified t face font-lock-string-face)) . 648) (undo-tree-id899 . -44) (undo-tree-id900 . -44) (undo-tree-id901 . -44) (undo-tree-id902 . -44) (undo-tree-id903 . -45) (undo-tree-id904 . -45) (undo-tree-id905 . -45) (undo-tree-id906 . -45) (undo-tree-id907 . -45) (undo-tree-id908 . -45) (undo-tree-id909 . -45) (undo-tree-id910 . -45) (undo-tree-id911 . -45) (undo-tree-id912 . -45) (undo-tree-id913 . -22) (undo-tree-id914 . -22) (undo-tree-id915 . -22) (undo-tree-id916 . -22) (undo-tree-id917 . -22) (undo-tree-id918 . -22) (undo-tree-id919 . -22) (undo-tree-id920 . -22) (undo-tree-id921 . -22) (undo-tree-id922 . -22) (undo-tree-id923 . -3) (undo-tree-id924 . -3) (undo-tree-id925 . -3) (undo-tree-id926 . -3) (undo-tree-id927 . -3) (undo-tree-id928 . -3) (undo-tree-id929 . -3) (undo-tree-id930 . -3) (undo-tree-id931 . -3) (undo-tree-id932 . -3) (undo-tree-id933 . -44) (undo-tree-id934 . -44) (undo-tree-id935 . -44) (undo-tree-id936 . -44) (undo-tree-id937 . -44) (undo-tree-id938 . -44) (undo-tree-id939 . -44) (undo-tree-id940 . -44) (undo-tree-id941 . -44) (undo-tree-id942 . -44) (undo-tree-id943 . -43) (undo-tree-id944 . -43) (undo-tree-id945 . -42) (undo-tree-id946 . -42) (undo-tree-id947 . -41) (undo-tree-id948 . -41) (undo-tree-id949 . -40) (undo-tree-id950 . -40) (undo-tree-id951 . -39) (undo-tree-id952 . -39) (undo-tree-id953 . -38) (undo-tree-id954 . -38) (undo-tree-id955 . -37) (undo-tree-id956 . -37) (undo-tree-id957 . -36) (undo-tree-id958 . -36) (undo-tree-id959 . -35) (undo-tree-id960 . -35) (undo-tree-id961 . -34) (undo-tree-id962 . -34) (undo-tree-id963 . -33) (undo-tree-id964 . -33) (undo-tree-id965 . -32) (undo-tree-id966 . -32) (undo-tree-id967 . -31) (undo-tree-id968 . -31) (undo-tree-id969 . -30) (undo-tree-id970 . -30) (undo-tree-id971 . -29) (undo-tree-id972 . -29) (undo-tree-id973 . -28) (undo-tree-id974 . -28) (undo-tree-id975 . -27) (undo-tree-id976 . -27) (undo-tree-id977 . -26) (undo-tree-id978 . -26) (undo-tree-id979 . -25) (undo-tree-id980 . -25) (undo-tree-id981 . -24) (undo-tree-id982 . -24) (undo-tree-id983 . -23) (undo-tree-id984 . -23) (undo-tree-id985 . -22) (undo-tree-id986 . -22) (undo-tree-id987 . -21) (undo-tree-id988 . -21) (undo-tree-id989 . -20) (undo-tree-id990 . -20) (undo-tree-id991 . -19) (undo-tree-id992 . -19) (undo-tree-id993 . -18) (undo-tree-id994 . -18) (undo-tree-id995 . -17) (undo-tree-id996 . -17) (undo-tree-id997 . -16) (undo-tree-id998 . -16) (undo-tree-id999 . -15) (undo-tree-id1000 . -15) (undo-tree-id1001 . -14) (undo-tree-id1002 . -14) (undo-tree-id1003 . -13) (undo-tree-id1004 . -13) (undo-tree-id1005 . -12) (undo-tree-id1006 . -12) (undo-tree-id1007 . -11) (undo-tree-id1008 . -11) (undo-tree-id1009 . -10) (undo-tree-id1010 . -10) (undo-tree-id1011 . -9) (undo-tree-id1012 . -9) (undo-tree-id1013 . -8) (undo-tree-id1014 . -8) (undo-tree-id1015 . -7) (undo-tree-id1016 . -7) (undo-tree-id1017 . -6) (undo-tree-id1018 . -6) (undo-tree-id1019 . -5) (undo-tree-id1020 . -5) (undo-tree-id1021 . -5) (undo-tree-id1022 . -4) (undo-tree-id1023 . -4) (undo-tree-id1024 . -3) (undo-tree-id1025 . -3) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -5) (undo-tree-id1031 . -5) (undo-tree-id1032 . -12) (undo-tree-id1033 . -12) (undo-tree-id1034 . -12) (undo-tree-id1035 . -12) (undo-tree-id1036 . -12) (undo-tree-id1037 . -12) (undo-tree-id1038 . -12) (undo-tree-id1039 . -12) (undo-tree-id1040 . -12) (undo-tree-id1041 . -7) (undo-tree-id1042 . -7) (undo-tree-id1043 . -45) (undo-tree-id1044 . -44) (undo-tree-id1045 . -5) (undo-tree-id1046 . -5) (undo-tree-id1047 . -12) (undo-tree-id1048 . -12) (undo-tree-id1049 . -19) (undo-tree-id1050 . -19) (undo-tree-id1051 . -25) (undo-tree-id1052 . -25) (undo-tree-id1053 . -35) (undo-tree-id1054 . -35) (undo-tree-id1055 . -43) (undo-tree-id1056 . -43) (undo-tree-id1057 . -44) (undo-tree-id1058 . -44) (undo-tree-id1059 . -44) (undo-tree-id1060 . -44) (undo-tree-id1061 . -44) (undo-tree-id1062 . -44) (undo-tree-id1063 . -44) (undo-tree-id1064 . -44) (undo-tree-id1065 . -44) (undo-tree-id1066 . -45) 692 (t 25594 8591 139054 292000)) ((648 . 693)) (25594 8654 479054 991000) 0 nil] [nil nil ((#("        " 0 8 (fontified t)) . -600) (undo-tree-id688 . -8) (undo-tree-id689 . -8) (undo-tree-id690 . -8) (undo-tree-id691 . -8) (undo-tree-id692 . -8) (undo-tree-id693 . -8) (undo-tree-id694 . -8) 608 (600 . 608) (600 . 601) (#("          f'(box :space-evenly false :spacing 5 (label :class \"icon\" :text \"{icon}\") \"{vol}\" '
" 0 7 (fontified t) 7 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 48 (fontified t face font-lock-string-face) 48 75 (fontified t face font-lock-string-face) 75 76 (fontified t face font-lock-string-face) 76 81 (fontified t face nil) 81 82 (fontified t face nil) 82 83 (fontified t face font-lock-string-face) 83 85 (fontified t face font-lock-string-face) 85 86 (fontified t face font-lock-string-face) 86 87 (fontified t face nil) 87 88 (fontified t face nil) 88 90 (fontified t face nil) 90 91 (fontified t face nil) 91 93 (fontified t face font-lock-string-face) 93 94 (fontified t face font-lock-string-face) 94 95 (fontified t)) . 600) (undo-tree-id695 . 95) (undo-tree-id696 . -60) (undo-tree-id697 . -94) (undo-tree-id698 . -48) (undo-tree-id699 . 34) (undo-tree-id700 . -48) (undo-tree-id701 . -60) (undo-tree-id702 . -95) (undo-tree-id703 . -95) (undo-tree-id704 . -95) (undo-tree-id705 . 95) (undo-tree-id706 . 95) (undo-tree-id707 . -95) (undo-tree-id708 . -95) (undo-tree-id709 . -95) (undo-tree-id710 . -95) (undo-tree-id711 . -95) (undo-tree-id712 . -7) (undo-tree-id713 . -60) (undo-tree-id714 . -7) (undo-tree-id715 . -7) (undo-tree-id716 . -7) (undo-tree-id717 . -7) (undo-tree-id718 . -7) (undo-tree-id719 . -7) (undo-tree-id720 . -7) (undo-tree-id721 . -94) (undo-tree-id722 . -7) (undo-tree-id723 . -7) (undo-tree-id724 . -94) (undo-tree-id725 . -94) (undo-tree-id726 . -7) (undo-tree-id727 . -93) (undo-tree-id728 . -93) (undo-tree-id729 . -93) (undo-tree-id730 . -93) (undo-tree-id731 . -93) (undo-tree-id732 . -93) (undo-tree-id733 . -93) (undo-tree-id734 . -93) (undo-tree-id735 . -93) (undo-tree-id736 . -93) (undo-tree-id737 . -70) (undo-tree-id738 . -70) (undo-tree-id739 . -70) (undo-tree-id740 . -70) (undo-tree-id741 . -70) (undo-tree-id742 . -70) (undo-tree-id743 . -70) (undo-tree-id744 . -70) (undo-tree-id745 . -70) (undo-tree-id746 . -70) (undo-tree-id747 . -26) (undo-tree-id748 . -26) (undo-tree-id749 . -26) (undo-tree-id750 . -26) (undo-tree-id751 . -26) (undo-tree-id752 . -26) (undo-tree-id753 . -26) (undo-tree-id754 . -26) (undo-tree-id755 . -26) (undo-tree-id756 . -26) (undo-tree-id757 . -51) (undo-tree-id758 . -51) (undo-tree-id759 . -51) (undo-tree-id760 . -51) (undo-tree-id761 . -51) (undo-tree-id762 . -51) (undo-tree-id763 . -51) (undo-tree-id764 . -51) (undo-tree-id765 . -51) (undo-tree-id766 . -51) (undo-tree-id767 . -92) (undo-tree-id768 . -92) (undo-tree-id769 . -92) (undo-tree-id770 . -92) (undo-tree-id771 . -92) (undo-tree-id772 . -92) (undo-tree-id773 . -92) (undo-tree-id774 . -92) (undo-tree-id775 . -92) (undo-tree-id776 . -94) (undo-tree-id777 . -92) (undo-tree-id778 . -91) (undo-tree-id779 . -91) (undo-tree-id780 . -90) (undo-tree-id781 . -90) (undo-tree-id782 . -89) (undo-tree-id783 . -89) (undo-tree-id784 . -88) (undo-tree-id785 . -88) (undo-tree-id786 . -87) (undo-tree-id787 . -87) (undo-tree-id788 . -86) (undo-tree-id789 . -86) (undo-tree-id790 . -85) (undo-tree-id791 . -85) (undo-tree-id792 . -84) (undo-tree-id793 . -84) (undo-tree-id794 . -83) (undo-tree-id795 . -83) (undo-tree-id796 . -82) (undo-tree-id797 . -82) (undo-tree-id798 . -81) (undo-tree-id799 . -81) (undo-tree-id800 . -80) (undo-tree-id801 . -80) (undo-tree-id802 . -79) (undo-tree-id803 . -79) (undo-tree-id804 . -78) (undo-tree-id805 . -78) (undo-tree-id806 . -77) (undo-tree-id807 . -77) (undo-tree-id808 . -76) (undo-tree-id809 . -76) (undo-tree-id810 . -75) (undo-tree-id811 . -75) (undo-tree-id812 . -74) (undo-tree-id813 . -74) (undo-tree-id814 . -73) (undo-tree-id815 . -73) (undo-tree-id816 . -72) (undo-tree-id817 . -72) (undo-tree-id818 . -71) (undo-tree-id819 . -71) (undo-tree-id820 . -70) (undo-tree-id821 . -70) (undo-tree-id822 . -69) (undo-tree-id823 . -69) (undo-tree-id824 . -68) (undo-tree-id825 . -68) (undo-tree-id826 . -67) (undo-tree-id827 . -67) (undo-tree-id828 . -66) (undo-tree-id829 . -66) (undo-tree-id830 . -65) (undo-tree-id831 . -65) (undo-tree-id832 . -64) (undo-tree-id833 . -64) (undo-tree-id834 . -63) (undo-tree-id835 . -63) (undo-tree-id836 . -62) (undo-tree-id837 . -62) (undo-tree-id838 . -61) (undo-tree-id839 . -61) (undo-tree-id840 . -60) (undo-tree-id841 . -60) (undo-tree-id842 . -59) (undo-tree-id843 . -59) (undo-tree-id844 . -58) (undo-tree-id845 . -58) (undo-tree-id846 . -57) (undo-tree-id847 . -57) (undo-tree-id848 . -56) (undo-tree-id849 . -56) (undo-tree-id850 . -55) (undo-tree-id851 . -55) (undo-tree-id852 . -54) (undo-tree-id853 . -54) (undo-tree-id854 . -53) (undo-tree-id855 . -53) (undo-tree-id856 . -53) (undo-tree-id857 . -52) (undo-tree-id858 . -52) (undo-tree-id859 . -51) (undo-tree-id860 . -51) (undo-tree-id861 . -50) (undo-tree-id862 . -50) (undo-tree-id863 . -49) (undo-tree-id864 . -49) (undo-tree-id865 . -48) (undo-tree-id866 . -48) (undo-tree-id867 . -47) (undo-tree-id868 . -47) (undo-tree-id869 . -46) (undo-tree-id870 . -46) (undo-tree-id871 . -47) (undo-tree-id872 . -47) (undo-tree-id873 . -48) (undo-tree-id874 . -48) (undo-tree-id875 . -48) (undo-tree-id876 . -61) (undo-tree-id877 . -48) (undo-tree-id878 . -60) (undo-tree-id879 . -48) (undo-tree-id880 . -48) (undo-tree-id881 . -48) (undo-tree-id882 . -53) (undo-tree-id883 . -53) (undo-tree-id884 . -60) (undo-tree-id885 . -60) (undo-tree-id886 . -60) (undo-tree-id887 . -95) (undo-tree-id888 . -95) (undo-tree-id889 . -95) 660 (t 25594 8591 139054 292000)) ((600 . 695) (#("
" 0 1 (fontified nil)) . 600) (undo-tree-id890 . 1) (undo-tree-id891 . 1) (undo-tree-id892 . 1) (#("        " 0 8 (fontified nil)) . 600) (undo-tree-id893 . -8) (undo-tree-id894 . -8) (undo-tree-id895 . -8) (undo-tree-id896 . -8) (undo-tree-id897 . -8) (undo-tree-id898 . -8) (600 . 608)) (25594 8623 994346 43000) 0 nil])
([nil nil ((922 . 923)) nil (25594 8724 850552 976000) 0 nil])
([nil nil ((nil rear-nonsticky nil 935 . 936) (nil fontified nil 891 . 936) (891 . 936)) ((#("(label :class \"icon\" :text \"{icon}\") \"{vol}\" " 0 28 (fontified nil face font-lock-string-face) 28 34 (fontified nil face nil) 34 38 (fontified nil face font-lock-string-face) 38 43 (fontified nil face nil) 43 44 (fontified nil face font-lock-string-face) 44 45 (fontified nil rear-nonsticky nil face font-lock-string-face)) . 891) (undo-tree-id1067 . 1) (undo-tree-id1068 . -44) (undo-tree-id1069 . -44) (undo-tree-id1070 . -44) (undo-tree-id1071 . 1) (undo-tree-id1072 . -44) (undo-tree-id1073 . -44) (undo-tree-id1074 . -44) (undo-tree-id1075 . -44) (nil rear-nonsticky t 935 . 936)) (25594 8654 26613 239000) 0 nil])
nil
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . 1120) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . 1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1)) nil (25594 8724 850552 203000) 0 nil])
([nil nil ((935 . 936)) ((#(")" 0 1 (fontified t face font-lock-string-face)) . 935)) (25594 8654 26248 967000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . 1119) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . 1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1)) nil (25594 8724 850546 881000) 0 nil])
nil
([nil nil ((610 . 612) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -610) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (610 . 611)) nil (25594 8724 850532 966000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . 611) (undo-tree-id1274 . 1) (undo-tree-id1275 . 1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1)) nil (25594 8724 850529 403000) 0 nil])
([nil nil ((640 . 646) (632 . 640) (611 . 632)) nil (25594 8724 850515 329000) 0 nil])
([nil nil ((1155 . 1156) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -1155) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#(")" 0 1 (fontified t face font-lock-string-face)) . 1156) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (1155 . 1157) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -1155) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (1155 . 1156) (t 25594 8724 855722 909000)) nil (25594 8732 383100 53000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . 958) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . 1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (t 25594 8732 389056 356000)) nil (25594 8822 993789 555000) 0 nil])
([nil nil ((1155 . 1156)) nil (25594 8822 993785 607000) 0 nil])
([nil nil ((763 . 765) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -763) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (763 . 764)) nil (25594 8822 993785 84000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . 764) (undo-tree-id1337 . 1) (undo-tree-id1338 . 1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1)) nil (25594 8822 993783 30000) 0 nil])
([nil nil ((769 . 773) (#(" " 0 1 (fontified t face font-lock-string-face)) . -769) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) 770 (764 . 770)) nil (25594 8822 993778 872000) 0 nil])
([nil nil ((968 . 969)) nil (25594 8822 993764 356000) 0 nil])
([nil nil ((#("(box :space-evenly false :spacing 5 " 0 36 (fontified t face font-lock-string-face)) . 610) (undo-tree-id1350 . -35) (undo-tree-id1351 . -35) (undo-tree-id1352 . -35) (undo-tree-id1353 . -35) (undo-tree-id1354 . -36) (undo-tree-id1355 . -36) (undo-tree-id1356 . -34) (undo-tree-id1357 . -34) (undo-tree-id1358 . -25) (undo-tree-id1359 . -25) (undo-tree-id1360 . -19) (undo-tree-id1361 . -19) (undo-tree-id1362 . -5) (undo-tree-id1363 . -5) (undo-tree-id1364 . -36) (undo-tree-id1365 . -35) (undo-tree-id1366 . -3) (undo-tree-id1367 . -3) (undo-tree-id1368 . -17) (undo-tree-id1369 . -17) (undo-tree-id1370 . -23) (undo-tree-id1371 . -23) (undo-tree-id1372 . -32) (undo-tree-id1373 . -32) (undo-tree-id1374 . -34) (undo-tree-id1375 . -34) (undo-tree-id1376 . -35) (undo-tree-id1377 . -35) (undo-tree-id1378 . -35) (undo-tree-id1379 . -36) 645 (t 25594 8822 999057 678000)) nil (25594 8884 576702 588000) 0 nil])
([nil nil ((nil rear-nonsticky nil 762 . 763) (nil fontified nil 727 . 763) (727 . 763) 726) nil (25594 8884 576673 503000) 0 nil])
([nil nil ((#(":onhover `${EWW_CMD} update volume_reveal=true` :onhoverlost `${EWW_CMD} update volume_reveal=false`" 0 9 (fontified t face font-lock-string-face) 9 11 (fontified t face font-lock-string-face) 11 19 (fontified t face font-lock-string-face) 19 46 (fontified t face font-lock-string-face) 46 61 (fontified t face font-lock-string-face) 61 63 (fontified t face font-lock-string-face) 63 71 (fontified t face font-lock-string-face) 71 99 (fontified t face font-lock-string-face) 99 100 (fontified t face font-lock-string-face)) . 773) (undo-tree-id1498 . -99) (undo-tree-id1499 . -99) (undo-tree-id1500 . -99) (undo-tree-id1501 . -99) (undo-tree-id1502 . -100) (undo-tree-id1503 . -100) (undo-tree-id1504 . -9) (undo-tree-id1505 . -9) (undo-tree-id1506 . -8) (undo-tree-id1507 . -8) (undo-tree-id1508 . -7) (undo-tree-id1509 . -7) (undo-tree-id1510 . -6) (undo-tree-id1511 . -6) (undo-tree-id1512 . -5) (undo-tree-id1513 . -5) (undo-tree-id1514 . -4) (undo-tree-id1515 . -4) (undo-tree-id1516 . -3) (undo-tree-id1517 . -3) (undo-tree-id1518 . -2) (undo-tree-id1519 . -2) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -100) (undo-tree-id1523 . -99) (undo-tree-id1524 . -100) (undo-tree-id1525 . -100) (undo-tree-id1526 . -99) (undo-tree-id1527 . -99) (undo-tree-id1528 . -99) (undo-tree-id1529 . -99) (undo-tree-id1530 . -99) (undo-tree-id1531 . -99) (undo-tree-id1532 . -99) (undo-tree-id1533 . -99) (undo-tree-id1534 . -99) (undo-tree-id1535 . -100) 872 (t 25594 8884 582391 912000)) nil (25594 8942 475496 137000) 0 nil])
([nil nil ((nil rear-nonsticky nil 719 . 720) (nil fontified nil 620 . 720) (620 . 720)) nil (25594 8942 475474 113000) 0 nil])
([nil nil ((720 . 721)) nil (25594 8942 475473 427000) 0 nil])
([nil nil ((#(":onclick `{actions[\"max\"]}` :onrightclick `{actions[\"mute\"]}` :onscroll `{actions[\"change\"]}` " 0 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face) 10 18 (fontified t face nil) 18 20 (fontified t face nil) 20 23 (fontified t face font-lock-builtin-face) 23 24 (fontified t face nil) 24 25 (fontified t face nil) 25 26 (fontified t face nil) 26 42 (fontified t face font-lock-string-face) 42 43 (fontified t face font-lock-string-face) 43 51 (fontified t face nil) 51 58 (fontified t face nil) 58 59 (fontified t face nil) 59 60 (fontified t face nil) 60 72 (fontified t face font-lock-string-face) 72 73 (fontified t face font-lock-string-face) 73 81 (fontified t face nil) 81 90 (fontified t face nil) 90 91 (fontified t face nil) 91 92 (fontified t face nil) 92 94 (fontified t face font-lock-string-face)) . 721) (undo-tree-id1388 . 94) (undo-tree-id1389 . -93) (undo-tree-id1390 . -93) (undo-tree-id1391 . -93) (undo-tree-id1392 . -72) (undo-tree-id1393 . -72) (undo-tree-id1394 . -93) (undo-tree-id1395 . -37) (undo-tree-id1396 . -36) (undo-tree-id1397 . -36) (undo-tree-id1398 . -36) (undo-tree-id1399 . -36) (undo-tree-id1400 . -36) (undo-tree-id1401 . -36) (undo-tree-id1402 . -36) (undo-tree-id1403 . -36) (undo-tree-id1404 . -36) (undo-tree-id1405 . -36) (undo-tree-id1406 . -35) (undo-tree-id1407 . -35) (undo-tree-id1408 . -34) (undo-tree-id1409 . -34) (undo-tree-id1410 . -33) (undo-tree-id1411 . -33) (undo-tree-id1412 . -32) (undo-tree-id1413 . -32) (undo-tree-id1414 . -31) (undo-tree-id1415 . -31) (undo-tree-id1416 . -30) (undo-tree-id1417 . -30) (undo-tree-id1418 . -29) (undo-tree-id1419 . -29) (undo-tree-id1420 . -28) (undo-tree-id1421 . -28) (undo-tree-id1422 . -27) (undo-tree-id1423 . -27) (undo-tree-id1424 . -26) (undo-tree-id1425 . -26) (undo-tree-id1426 . -25) (undo-tree-id1427 . -25) (undo-tree-id1428 . -24) (undo-tree-id1429 . -24) (undo-tree-id1430 . -23) (undo-tree-id1431 . -23) (undo-tree-id1432 . -22) (undo-tree-id1433 . -22) (undo-tree-id1434 . -21) (undo-tree-id1435 . -21) (undo-tree-id1436 . -20) (undo-tree-id1437 . -20) (undo-tree-id1438 . -19) (undo-tree-id1439 . -19) (undo-tree-id1440 . -18) (undo-tree-id1441 . -18) (undo-tree-id1442 . -17) (undo-tree-id1443 . -17) (undo-tree-id1444 . -16) (undo-tree-id1445 . -16) (undo-tree-id1446 . -15) (undo-tree-id1447 . -15) (undo-tree-id1448 . -14) (undo-tree-id1449 . -14) (undo-tree-id1450 . -13) (undo-tree-id1451 . -13) (undo-tree-id1452 . -12) (undo-tree-id1453 . -12) (undo-tree-id1454 . -11) (undo-tree-id1455 . -11) (undo-tree-id1456 . -10) (undo-tree-id1457 . -10) (undo-tree-id1458 . -9) (undo-tree-id1459 . -9) (undo-tree-id1460 . -8) (undo-tree-id1461 . -8) (undo-tree-id1462 . -7) (undo-tree-id1463 . -7) (undo-tree-id1464 . -6) (undo-tree-id1465 . -6) (undo-tree-id1466 . -5) (undo-tree-id1467 . -5) (undo-tree-id1468 . -4) (undo-tree-id1469 . -4) (undo-tree-id1470 . -3) (undo-tree-id1471 . -3) (undo-tree-id1472 . -2) (undo-tree-id1473 . -2) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . 94) (undo-tree-id1477 . 94) (undo-tree-id1478 . 94) (undo-tree-id1479 . 94) (undo-tree-id1480 . -94) (undo-tree-id1481 . -93) (undo-tree-id1482 . -94) (undo-tree-id1483 . -94) (undo-tree-id1484 . -93) (undo-tree-id1485 . -93) (undo-tree-id1486 . -92) (undo-tree-id1487 . -92) (undo-tree-id1488 . -91) (undo-tree-id1489 . -91) (undo-tree-id1490 . -92) (undo-tree-id1491 . -92) (undo-tree-id1492 . -93) (undo-tree-id1493 . -93) (undo-tree-id1494 . -93) (undo-tree-id1495 . -93) (undo-tree-id1496 . -93) (undo-tree-id1497 . -94) 814) nil (25594 8942 475470 810000) 0 nil])
([nil nil ((nil rear-nonsticky nil 873 . 874) (nil fontified nil 780 . 874) (780 . 874) 779) nil (25594 8942 475038 544000) 0 nil])
([nil nil ((733 . 734)) nil (25594 8942 475037 452000) 0 nil])
([nil current ((#("f" 0 1 (fontified t)) . 608) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1)) nil (25594 8942 475034 562000) 0 nil])
nil
