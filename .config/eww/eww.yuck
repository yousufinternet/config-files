(include "polls_listeners.yuck")

(defvar daterevealed false)
(defvar sysstats_exp false)

(defwidget _datetime []
  (eventbox :onhover `eww update daterevealed=true` :onhoverlost `eww update daterevealed=false` (box :orientation "h" :space-evenly false :spacing 5 
       (label :class "orange-icon" :text "") (revealer :reveal daterevealed :transition "slideright" _date) (label :style "min-width: 45px" :text _time) (label :class "icon" :vexpand false :hexpand false :text ""))))

(defwindow top_bar :monitor 1 :geometry (geometry :width "90%" :height "20px" :y "3px" :anchor "top center") :stacking "bg" :reserve (struts :distance "30px" :side "top") :wmignore false :hexpand false :vexpand true (bar_content))

(defwidget bar_content [] (centerbox :orientation "horizontal" :hexpand false (left) (center) (right)))

(defwidget _workspace []
  (box :class "icon" (for entry in workspaces_json (button :onclick `herbstclient use_index "${entry.ws_no}"` :style "padding: 2px; border-radius: 2px; font-family: 'Font Awesome 6 Free'; ${entry.ws_style}" "${entry.ws_icn}"))))

(defwidget _sysstats [] (eventbox :onclick {sysstats_exp ? `eww update sysstats_exp=false` : `eww update sysstats_exp=true`} (box :space-evenly false :spacing 5 (literal :content _cpuusage) (revealer :transition "slideleft" :vexpand true :hexpand true :halign "end" :reveal sysstats_exp (box :class "subwidget" :vexpand true :space-evenly false :spacing 5 (literal :content _cputemp) (literal :content _gputemp))))))

(defvar weather_revealed false)

(defwidget _ramusage [] (box :space-evenly false :spacing 5 (label :class "green-icon" :text "\\uf538") "${round((EWW_RAM.free_mem / EWW_RAM.total_mem)*100, 0)}%"))

(defwidget _diskusage [] (box :space-evenly false :spacing 5 (label :class "blue-icon" :text "\\uf0a0") "(/) ${round((EWW_DISK["/"].used / EWW_DISK["/"].total)*100, 0)}%") )

(defwidget _weatherwdgt [] (box :space-evenly false :spacing 5 :tooltip "${_weather["last_updated"]}" (label :class "blue-icon" :text {_weather["icon"]}) {_weather["temp"]} "℃" ))

(defwidget _keyboard [] (eventbox :style "min-width: 40px" :onclick `xkb-switch -n` (box :space-evenly false :spacing 5 (label :class "icon" :text "\\uf11c") {captures(klayout, "(\\w+)")[0][0]})))

(defvar xautolocker_enabled true)

(defvar enable_action "xautolock -enable;xset +dpms;eww update xautolocker_enabled=true")
(defvar disable_action "xautolock -disable;xset -dpms;eww update xautolocker_enabled=false")
(defwidget coffee_widget []
  (box :space-evenly false :spacing 5
       (button :onclick {xautolocker_enabled ? disable_action : enable_action}
	       :class "${xautolocker_enabled ? 'grey' : 'green'}-icon"
	       {xautolocker_enabled ? "\\uf0f4" : "\\uf7b6"})
       (button :onclick `xautolock -locknow` :class "yellow-icon" "\\uf023")))

(defwidget bluetooth_devices []
  (box :spacing 5 :space-evenly false
       (button :onclick "bluetoothctl power ${_bluestatus == 'yes' ? 'off' : 'on'}"
	       :class {_bluestatus == 'yes' ? "green-icon" : "grey-icon"} "\\uf294")
       (button :onclick {_podsstatus == 'yes' ? "bluetoothctl disconnect" : "bluetoothctl connect 88:D0:39:ED:EA:64"}
	       :class {_podsstatus == 'yes' ? "green-icon" : "grey-icon"} "\\uf025")
       ))

(defvar playerrevealer false)
(defwidget playerctl [] (box :space-evenly false :spacing 5
			     (button :onclick `playerctl previous` :class "icon" "\\uf048")
			     (button :onclick `playerctl play-pause` :class "yellow-icon" {_playerctlstatus == "Playing" ? "\\uf04c" : "\\uf04b"})
			     (button :onclick `playerctl next` :class "icon" "\\uf051")
			     (button :onclick `playerctl stop` :class "red-icon" "\\uf04d")
			     (eventbox :onhover `${EWW_CMD} update playerrevealer=true` :onhoverlost `${EWW_CMD} update playerrevealer=false`
				       (box :space-evenly false :spacing 5 :tooltip "${_playerctlartist} - ${_playerctltitle}"
					    (label :class "green-icon" :text {_playerctlstatus == "Playing" ? "\\uf001" : ""})
					    (revealer :reveal playerrevealer :transition "slideleft" _playername)))))



(defvar volume_reveal false)

(defwidget nmliteralstate [] (literal :content _nmliteral))

(defvar disks_reveal false)

(defwidget left []
 (box :style "border 2px solid white" :class "main_container" :orientation "h" :space-evenly false :halign "start" :spacing 10 (_workspace) (_weatherwdgt) (playerctl)))

(defwidget center [] (box :space-evenly false :class "main_container" :spacing 10 (bluetooth_devices) (literal :content _udiskie) (coffee_widget) (nmliteralstate)))

(defwidget right [] (box :style "border 2px solid white" :orientation "h" :class "main_container" :halign "end" :space-evenly false :spacing 10
			 (literal :content _volume)
			 (_keyboard)
			 (_ramusage)
			 (_diskusage)
			 (_sysstats)
			 (literal :content _battery)
			 (_datetime)))
