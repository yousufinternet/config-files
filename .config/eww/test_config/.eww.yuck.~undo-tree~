(undo-tree-save-format-version . 1)
"faa8feab2f50ab0db1cbf0091714fd1de405e4f3"
[nil nil nil nil (25583 62280 658400 416000) 0 nil]
([nil nil ((100 . 101) (t 25583 61748 153070 110000) 40) nil (25583 62280 658399 452000) 0 nil])
([nil nil ((nil rear-nonsticky nil 101 . 102) (#("
" 0 1 (fontified nil)) . -320) (101 . 321)) nil (25583 62280 658398 282000) 0 nil])
([nil nil ((#("(deflisten test_var \"scripts/test.py\")
(defwindow testwin :stacking \"fg\" :anchor \"center\" test_var)

" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 10 (fontified t face font-lock-keyword-face) 10 20 (fontified t) 20 37 (fontified t face font-lock-string-face) 37 38 (fontified t face (rainbow-delimiters-depth-1-face)) 38 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-1-face)) 40 49 (fontified t face font-lock-keyword-face) 49 58 (fontified t) 58 67 (fontified t face font-lock-builtin-face) 67 68 (fontified t) 68 72 (fontified t face font-lock-string-face) 72 73 (fontified t) 73 80 (fontified t face font-lock-builtin-face) 80 81 (fontified t) 81 89 (fontified t face font-lock-string-face) 89 98 (fontified t) 98 99 (fontified t face (rainbow-delimiters-depth-1-face)) 99 100 (fontified t) 100 101 (fontified t rear-nonsticky t)) . 1) (undo-tree-id0 . -39) (undo-tree-id1 . -100) (undo-tree-id2 . -100) (undo-tree-id3 . -100) (undo-tree-id4 . -100) (undo-tree-id5 . -100) (undo-tree-id6 . -100) (undo-tree-id7 . -100) (undo-tree-id8 . -100) (undo-tree-id9 . -100) (undo-tree-id10 . -100) (undo-tree-id11 . -101) (undo-tree-id12 . -101) (undo-tree-id13 . -101) (undo-tree-id14 . -100) (undo-tree-id15 . -100) (undo-tree-id16 . -101) (undo-tree-id17 . -100) (undo-tree-id18 . -100) (undo-tree-id19 . -100) (undo-tree-id20 . -100) (undo-tree-id21 . 101) (undo-tree-id22 . -1) (undo-tree-id23 . 64) (undo-tree-id24 . -38) (undo-tree-id25 . -39) (undo-tree-id26 . -101)) nil (25583 62280 658395 335000) 0 nil])
([nil nil ((203 . 204) (t 25583 62280 663078 160000)) nil (25583 62333 400996 372000) 0 nil])
([nil nil ((187 . 201) (t 25583 62333 403078 922000)) nil (25583 62764 211410 881000) 0 nil])
([nil nil ((30 . 32) (#("\"" 0 1 (fontified nil)) . -30) (30 . 31) (#(" " 0 1 (fontified nil)) . -30) (undo-tree-id27 . -1) (30 . 31) (#("\"" 0 1 (fontified nil)) . -30) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (30 . 31) (#(":" 0 1 (fontified t face font-lock-builtin-face)) . -30) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 31 (21 . 31) (t 25583 62764 216418 784000)) nil (25583 62789 23725 457000) 0 nil])
([nil nil ((32 . 33)) nil (25583 62789 23714 331000) 0 nil])
([nil nil ((31 . 38)) nil (25583 62789 23711 115000) 0 nil])
([nil nil ((40 . 41) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 40) (undo-tree-id40 . -1) (t 25583 62789 26419 160000)) nil (25583 62803 375076 898000) 0 nil])
([nil nil ((50 . 51) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 50) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1)) nil (25583 63130 96113 533000) 0 nil])
([nil nil ((41 . 54) (#("./test.py" 0 9 (fontified t face font-lock-string-face)) . 41) (undo-tree-id176 . -1) (undo-tree-id177 . -8) (undo-tree-id178 . -9) (undo-tree-id179 . -9) (undo-tree-id180 . -9) (undo-tree-id181 . -9) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -9) (undo-tree-id189 . -9) (undo-tree-id190 . -8) (undo-tree-id191 . -8) (undo-tree-id192 . -7) (undo-tree-id193 . -7) (undo-tree-id194 . -6) (undo-tree-id195 . -6) (undo-tree-id196 . -5) (undo-tree-id197 . -5) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -9) (undo-tree-id207 . -9) (undo-tree-id208 . -9)) nil (25583 63146 305523 43000) 0 nil] [nil nil ((#("(label :style \"background-color: black; color: white; font-size: 3em\" :text test_var)" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 6 (fontified t face font-lock-type-face) 6 7 (fontified t) 7 13 (fontified t face font-lock-builtin-face) 13 14 (fontified t) 14 68 (fontified t face font-lock-string-face) 68 69 (fontified t face font-lock-string-face) 69 70 (fontified t) 70 75 (fontified t face font-lock-builtin-face) 75 76 (fontified t) 76 80 (fontified t) 80 84 (fontified t) 84 85 (fontified t face (rainbow-delimiters-depth-2-face))) . 167) (undo-tree-id108 . -84) (undo-tree-id109 . -84) (undo-tree-id110 . -84) (undo-tree-id111 . -69) (undo-tree-id112 . -84) (undo-tree-id113 . -1) (undo-tree-id114 . -85) (undo-tree-id115 . -85) (undo-tree-id116 . -84) (undo-tree-id117 . -84) (undo-tree-id118 . -85) (undo-tree-id119 . -84) (undo-tree-id120 . -85) (undo-tree-id121 . 1) (undo-tree-id122 . -85) (undo-tree-id123 . 85) (undo-tree-id124 . -1) (undo-tree-id125 . -85) (undo-tree-id126 . -84) (undo-tree-id127 . -84) (undo-tree-id128 . -84) (undo-tree-id129 . -85) 251 (t 25583 62803 383086 42000)) ((167 . 252)) (25583 63129 233385 972000) 0 nil])
([nil current ((41 . 50) (#("xkb-switch -W" 0 13 (fontified t face font-lock-string-face)) . 41) (undo-tree-id209 . -12) (undo-tree-id210 . -12) (undo-tree-id211 . -12) (undo-tree-id212 . -12) (undo-tree-id213 . -12) (undo-tree-id214 . -12) (undo-tree-id215 . -12) (undo-tree-id216 . -12) (undo-tree-id217 . -12) (undo-tree-id218 . -12) (undo-tree-id219 . -12) (undo-tree-id220 . -12) (undo-tree-id221 . -12) (undo-tree-id222 . -12) (undo-tree-id223 . -12) (undo-tree-id224 . -12) (undo-tree-id225 . -12) (undo-tree-id226 . -13) (undo-tree-id227 . -13) 53 (t 25583 63146 309757 957000)) nil (25583 63450 305652 829000) 0 nil])
([nil nil ((167 . 175) (#("test_" 0 5 (fontified t)) . -167) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -5) 172 (167 . 172) (#("y" 0 1 (fontified t)) . -167) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("e" 0 1 (fontified t)) . -168) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("s" 0 1 (fontified t)) . -169) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("y" 0 1 (fontified t)) . -170) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 171 (167 . 171)) ((#("yesy" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 167) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (167 . 171) (#("test_" 0 5 (fontified nil)) . 167) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -5) (undo-tree-id157 . -5) (undo-tree-id158 . -5) (undo-tree-id159 . -5) (undo-tree-id160 . -5) (undo-tree-id161 . -5) (undo-tree-id162 . -5) (167 . 172) (#("test_var" 0 8 (fontified t)) . 167) (undo-tree-id163 . -7) (undo-tree-id164 . -7) (undo-tree-id165 . -7) (undo-tree-id166 . -7) (undo-tree-id167 . -7) (undo-tree-id168 . -7) (undo-tree-id169 . -7) (undo-tree-id170 . -7) (undo-tree-id171 . -7) (undo-tree-id172 . -7) (undo-tree-id173 . -7) (undo-tree-id174 . -7) (undo-tree-id175 . -7) (t 25583 63105 666424 3000)) (25583 63105 663980 529000) 0 nil])
nil
nil
