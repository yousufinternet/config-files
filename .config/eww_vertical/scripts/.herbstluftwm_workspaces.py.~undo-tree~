(undo-tree-save-format-version . 1)
"80fe91525c5ab458b24ab037f17f5b5f827d30bd"
[nil nil nil nil (25583 54772 218994 246000) 0 nil]
([nil nil ((1 . 23) (t . -1)) nil (25583 54772 218993 404000) 0 nil])
([nil nil ((23 . 24) (22 . 23) 21) nil (25583 54772 218992 762000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32 . 33) (#("
" 0 1 (fontified nil)) . -1155) (24 . 1156)) nil (25583 54772 218991 854000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23)) nil (25583 54772 218990 853000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23)) nil (25583 54772 218990 359000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -987) (983 . 987) (#("                " 0 16 (fontified t)) . -982) (#("                " 0 16 (fontified nil)) . -934) (922 . 934) (#("            " 0 12 (fontified nil)) . -916) (908 . 916) (#("                    " 0 20 (fontified nil)) . -891) (875 . 891) (#("                    " 0 20 (fontified nil)) . -818) (802 . 818) (#("                " 0 16 (fontified nil)) . -781) (769 . 781) (#("                    " 0 20 (fontified nil)) . -760) (744 . 760) (#("                    " 0 20 (fontified nil)) . -705) (689 . 705) (#("                " 0 16 (fontified nil)) . -668) (656 . 668) (#("            " 0 12 (fontified nil)) . -648) (640 . 648) (#("            " 0 12 (fontified nil)) . -606) (598 . 606) (#("                " 0 16 (fontified nil)) . -582) (570 . 582) (#("            " 0 12 (fontified nil)) . -551) (543 . 551) (#("                " 0 16 (fontified nil)) . -479) (467 . 479) (#("            " 0 12 (fontified nil)) . -432) (424 . 432) (#("            " 0 12 (fontified nil)) . -405) (397 . 405) (#("        " 0 8 (fontified nil)) . -349) (345 . 349) (#("        " 0 8 (fontified nil)) . -327) (323 . 327) (#("                       " 0 23 (fontified nil)) . -295) (275 . 295) (#("        " 0 8 (fontified nil)) . -221) (217 . 221) (#("        " 0 8 (fontified nil)) . -194) (190 . 194) (#("        " 0 8 (fontified nil)) . -156) (152 . 156) (#("        " 0 8 (fontified nil)) . -118) (114 . 118) (#("        " 0 8 (fontified nil)) . -83) (79 . 83) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -27) (23 . 27) 1094) nil (25583 54772 218987 7000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -887) (#("            " 0 12 (fontified nil)) . -838) (830 . 838) (#("        " 0 8 (fontified nil)) . -824) (820 . 824) (#("                " 0 16 (fontified nil)) . -803) (791 . 803) (#("                " 0 16 (fontified nil)) . -734) (722 . 734) (#("            " 0 12 (fontified nil)) . -701) (693 . 701) (#("                " 0 16 (fontified nil)) . -684) (672 . 684) (#("                " 0 16 (fontified nil)) . -633) (621 . 633) (#("            " 0 12 (fontified nil)) . -600) (592 . 600) (#("        " 0 8 (fontified nil)) . -584) (580 . 584) (#("        " 0 8 (fontified nil)) . -546) (542 . 546) (#("            " 0 12 (fontified nil)) . -526) (518 . 526) (#("        " 0 8 (fontified nil)) . -499) (495 . 499) (#("            " 0 12 (fontified nil)) . -431) (423 . 431) (#("        " 0 8 (fontified nil)) . -388) (384 . 388) (#("        " 0 8 (fontified nil)) . -365) (361 . 365) (#("    " 0 4 (fontified t)) . -313) (#("    " 0 4 (fontified t)) . -295) (#("                    " 0 20 (fontified nil)) . -267) (251 . 267) (#("    " 0 4 (fontified t)) . -197) (#("    " 0 4 (fontified t)) . -174) (#("    " 0 4 (fontified t)) . -140) (#("    " 0 4 (fontified t)) . -106) (#("    " 0 4 (fontified t)) . -75) (#("    " 0 4 (fontified t)) . -23) 983) nil (25583 54772 218978 219000) 0 nil])
([nil nil ((44 . 46) (23 . 44) (23 . 24) 37) nil (25583 54772 218974 47000) 0 nil])
([nil nil ((46 . 47) 45) nil (25583 54772 218973 140000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 75 78 nil nil nil nil #s(yas--exit 79 nil))) #s(yas--exit 79 nil) 0 nil #s(yas--field 1 75 78 nil nil nil nil #s(yas--exit 79 nil)) nil nil)) (65 . 79) (#("getoutput" 0 9 (fontified nil)) . -65) (65 . 74) (#("get" 0 3 (fontified t)) . -65) (undo-tree-id90 . -3) (undo-tree-id91 . -3) 68 (65 . 68) (#("s" 0 1 (fontified t)) . -65) (undo-tree-id92 . -1) (#("h" 0 1 (fontified t)) . -66) (undo-tree-id93 . -1) (#("o" 0 1 (fontified t)) . -67) (undo-tree-id94 . -1) 68 (65 . 68) (#("o" 0 1 (fontified t)) . -65) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("u" 0 1 (fontified t)) . -66) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("t" 0 1 (fontified t)) . -67) (undo-tree-id99 . -1) 68 (65 . 68) (#("p" 0 1 (fontified t)) . -65) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 66 (62 . 66) (#("cmd_output" 0 10 (fontified t)) . 62) (undo-tree-id102 . -9)) nil (25583 54772 218971 135000) 0 nil])
([nil nil ((apply yas--snippet-revive 65 79 #s(yas--snippet nil (#s(yas--field 1 75 78 nil nil nil nil #s(yas--exit 79 nil))) #s(yas--exit 79 nil) 0 nil #s(yas--field 1 75 78 nil nil nil nil #s(yas--exit 79 nil)) nil nil))) nil (25583 54772 218941 596000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 74) (undo-tree-id88 . 1) (undo-tree-id89 . -1)) nil (25583 54772 218940 906000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 74) (undo-tree-id87 . 1)) nil (25583 54772 218939 190000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 74) (undo-tree-id86 . 1)) nil (25583 54772 218937 855000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 74) (undo-tree-id85 . 1)) nil (25583 54772 218936 753000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . 74) (undo-tree-id82 . 1) (undo-tree-id83 . 1) (undo-tree-id84 . -1)) nil (25583 54772 218935 461000) 0 nil])
([nil nil ((100 . 112)) nil (25583 54772 218933 116000) 0 nil])
([nil nil ((#("pre1 = '%{A:HERBST_WIDGETdesk'
pre2 = '%{A4:HERBST_WIDGETnext:}'
pre3 = '%{A5:HERBST_WIDGETprev:}'
sfx = '%{-o}%{U-}%{A}'
" 0 4 (fontified t face font-lock-variable-name-face) 4 7 (fontified t) 7 30 (fontified t face font-lock-string-face) 30 31 (fontified t) 31 38 (fontified t) 38 64 (fontified t face font-lock-string-face) 64 65 (fontified t) 65 72 (fontified t) 72 98 (fontified t face font-lock-string-face) 98 99 (fontified t) 99 105 (fontified t) 105 121 (fontified t face font-lock-string-face) 121 122 (fontified t)) . 114) (undo-tree-id74 . -29) (undo-tree-id75 . -121) (undo-tree-id76 . -121) (undo-tree-id77 . -121) (undo-tree-id78 . -29) (undo-tree-id79 . -121) (undo-tree-id80 . -29) (undo-tree-id81 . -121) 235) nil (25583 54772 218932 436000) 0 nil])
([nil nil ((211 . 212) 190) nil (25583 54772 218927 750000) 0 nil])
([nil nil ((#("self" 0 4 (fontified t face font-lock-keyword-face)) . 309) (undo-tree-id73 . -3)) nil (25583 54772 218926 862000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 309)) nil (25583 54772 218925 927000) 0 nil])
([nil nil ((23 . 33) (22 . 23) 19) nil (25583 54772 218925 278000) 0 nil])
([nil nil ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 333) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) 337) nil (25583 54772 218924 458000) 0 nil])
([nil nil ((#(" ficon" 0 6 (fontified t)) . 355) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) 360) nil (25583 54772 218921 420000) 0 nil])
([nil nil ((355 . 356)) nil (25583 54772 218916 681000) 0 nil])
([nil nil ((#("(self." 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t)) . 356) (undo-tree-id59 . -5) (undo-tree-id60 . 6) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) 361) nil (25583 54772 218916 79000) 0 nil])
([nil nil ((#(", beforepad=5, afterpad=5)" 0 2 (fontified t) 2 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t) 12 13 (fontified t face highlight-numbers-number) 13 15 (fontified t) 15 23 (fontified t face font-lock-variable-name-face) 23 24 (fontified t) 24 25 (fontified t face highlight-numbers-number) 25 26 (fontified t face (rainbow-delimiters-unmatched-face))) . 376) (undo-tree-id58 . -25)) nil (25583 54772 218912 349000) 0 nil])
([nil nil ((213 . 231)) nil (25583 54772 218911 222000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil face font-lock-string-face)) . 237) (undo-tree-id55 . 1) (236 . 237) (#(" " 0 1 (fontified nil)) . -236) (236 . 237) (#("'" 0 1 (fontified nil face font-lock-string-face)) . -236) (234 . 237) (231 . 234) (#("current" 0 7 (fontified t face font-lock-string-face)) . 231) (undo-tree-id56 . 7) (undo-tree-id57 . -6)) nil (25583 54772 218910 299000) 0 nil])
([nil nil ((236 . 250)) nil (25583 54772 218906 818000) 0 nil])
([nil nil ((157 . 164)) nil (25583 54772 218906 70000) 0 nil])
([nil nil ((180 . 186) (#("c" 0 1 (fontified t face font-lock-string-face)) . -180) (undo-tree-id52 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -181) (undo-tree-id53 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -182) (undo-tree-id54 . -1) 183 (179 . 183)) nil (25583 54772 218904 758000) 0 nil])
([nil nil ((215 . 222)) nil (25583 54772 218901 580000) 0 nil])
([nil nil ((146 . 158) (145 . 147) (#("'" 0 1 (fontified nil)) . -145) (145 . 146) (#("None" 0 4 (fontified t face font-lock-constant-face)) . 145) (undo-tree-id51 . -3)) nil (25583 54772 218900 572000) 0 nil])
([nil nil ((#("        if clr == 'current':
            formatted_ws.append('%{R}'+wor+'%{R}')
            continue
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 18 (fontified t) 18 27 (fontified t face font-lock-string-face) 27 41 (fontified t) 41 60 (fontified t) 60 61 (fontified t face (rainbow-delimiters-depth-1-face)) 61 67 (fontified t face font-lock-string-face) 67 72 (fontified t) 72 78 (fontified t face font-lock-string-face) 78 79 (fontified t face (rainbow-delimiters-depth-1-face)) 79 92 (fontified t) 92 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t)) . 535) (undo-tree-id43 . -90) (undo-tree-id44 . -100) (undo-tree-id45 . -10) (undo-tree-id46 . -90) (undo-tree-id47 . -10) (undo-tree-id48 . -90) (undo-tree-id49 . -10) (undo-tree-id50 . -90) 625 (t 25583 54633 282955 620000)) nil (25583 54772 218898 414000) 0 nil])
([nil nil ((#("        formatted_ws.append(
            pre1+w[1:]+':}'+(('%{U'+cdict[clr]+'}') if clr else '')+
            '%{+o}'+wor+sfx)
    else:
        formatted_ws.append(pre1+w[1:]+':}'+wor+'%{A}')
" 0 8 (fontified t) 8 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t) 29 41 (fontified t) 41 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 49 (fontified t face highlight-numbers-number) 49 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-2-face)) 51 52 (fontified t) 52 56 (fontified t face font-lock-string-face) 56 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 59 (fontified t face (rainbow-delimiters-depth-3-face)) 59 64 (fontified t face font-lock-string-face) 64 70 (fontified t) 70 71 (fontified t face (rainbow-delimiters-depth-4-face)) 71 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-4-face)) 75 76 (fontified t) 76 79 (fontified t face font-lock-string-face) 79 80 (fontified t face (rainbow-delimiters-depth-3-face)) 80 81 (fontified t) 81 83 (fontified t face font-lock-keyword-face) 83 88 (fontified t) 88 92 (fontified t face font-lock-keyword-face) 92 93 (fontified t) 93 95 (fontified t face font-lock-string-face) 95 96 (fontified t face (rainbow-delimiters-depth-2-face)) 96 110 (fontified t) 110 117 (fontified t face font-lock-string-face) 117 125 (fontified t) 125 126 (fontified t face (rainbow-delimiters-depth-1-face)) 126 131 (fontified t) 131 135 (fontified t face font-lock-keyword-face) 135 145 (fontified t) 145 164 (fontified t) 164 165 (fontified t face (rainbow-delimiters-depth-1-face)) 165 171 (fontified t) 171 172 (fontified t face (rainbow-delimiters-depth-2-face)) 172 173 (fontified t face highlight-numbers-number) 173 174 (fontified t) 174 175 (fontified t face (rainbow-delimiters-depth-2-face)) 175 176 (fontified t) 176 180 (fontified t face font-lock-string-face) 180 185 (fontified t) 185 191 (fontified t face font-lock-string-face) 191 192 (fontified t face (rainbow-delimiters-depth-1-face)) 192 193 (fontified t)) . 535) (undo-tree-id35 . -147) (undo-tree-id36 . -192) (undo-tree-id37 . -10) (undo-tree-id38 . -147) (undo-tree-id39 . -10) (undo-tree-id40 . -147) (undo-tree-id41 . -10) (undo-tree-id42 . -147) 682) nil (25583 54772 218856 387000) 0 nil])
([nil nil ((#("    if clr:
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 12 (fontified t)) . 523) (undo-tree-id30 . -12) (undo-tree-id31 . -11) (undo-tree-id32 . -12) (undo-tree-id33 . -12) (undo-tree-id34 . -12)) nil (25583 54772 218851 103000) 0 nil])
([nil nil ((549 . 554) (548 . 550) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -548) (548 . 549) (#("w" 0 1 (fontified t)) . -548) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("s" 0 1 (fontified t)) . -549) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 550 (548 . 550) (547 . 549) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -547) (547 . 548) (546 . 548) (#("(" 0 1 (fontified nil)) . -546) (539 . 547) (#(" " 0 1 (fontified t)) . -539) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("=" 0 1 (fontified t)) . -540) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#(" " 0 1 (fontified t)) . -541) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 542 (539 . 542) (527 . 539) (522 . 527) 500) nil (25583 54772 218846 739000) 0 nil])
([nil nil ((566 . 567) (#("o" 0 1 (fontified t face font-lock-string-face)) . -566) (undo-tree-id19 . -1) 567 (561 . 567) (560 . 562) (#("'" 0 1 (fontified nil)) . -560) (555 . 561)) nil (25583 54772 218837 428000) 0 nil])
([nil nil ((#("self" 0 4 (fontified t face font-lock-keyword-face)) . 447) (undo-tree-id18 . -3)) nil (25583 54772 218835 180000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 447)) nil (25583 54772 218833 979000) 0 nil])
([nil nil ((571 . 579) (570 . 572) (#("'" 0 1 (fontified nil)) . -570) (565 . 571) (563 . 565)) nil (25583 54772 218832 905000) 0 nil])
([nil nil ((582 . 585) (580 . 582)) nil (25583 54772 218831 407000) 0 nil])
([nil nil ((513 . 525) (512 . 514) (#("'" 0 1 (fontified nil)) . -512) (512 . 513) (#("None" 0 4 (fontified t face font-lock-constant-face)) . 512) (undo-tree-id0 . -3) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -4) (undo-tree-id17 . -4)) nil (25583 54772 218827 940000) 0 nil])
([nil nil ((#("return pre2+pre3+''.join(formatted_ws)+'%{A5}%{A4}'
" 0 6 (fontified t face font-lock-keyword-face) 6 17 (fontified t) 17 19 (fontified t face font-lock-string-face) 19 20 (fontified t) 20 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-1-face)) 38 39 (fontified t) 39 51 (fontified t face font-lock-string-face) 51 52 (fontified t)) . 599) (undo-tree-id170 . -51) (undo-tree-id171 . -50) (undo-tree-id172 . -50) (undo-tree-id173 . -51) (undo-tree-id174 . -50) (undo-tree-id175 . -50) (undo-tree-id176 . -50) (undo-tree-id177 . -50) (undo-tree-id178 . -50) (undo-tree-id179 . -52) 649 (t 25583 54772 229624 569000)) nil (25583 54807 922253 561000) 0 nil])
([nil nil ((605 . 617) (#("formatted" 0 9 (fontified t)) . -605) (undo-tree-id103 . -9) (undo-tree-id104 . -9) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -5) (undo-tree-id129 . -6) (undo-tree-id130 . -6) (undo-tree-id131 . -6) (undo-tree-id132 . -6) (undo-tree-id133 . -6) (undo-tree-id134 . -6) (undo-tree-id135 . -7) (undo-tree-id136 . -7) (undo-tree-id137 . -7) (undo-tree-id138 . -7) (undo-tree-id139 . -7) (undo-tree-id140 . -7) (undo-tree-id141 . -7) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (undo-tree-id144 . -8) (undo-tree-id145 . -8) (undo-tree-id146 . -8) (undo-tree-id147 . -8) (undo-tree-id148 . -8) (undo-tree-id149 . -8) (undo-tree-id150 . -8) (undo-tree-id151 . -8) (undo-tree-id152 . -8) (undo-tree-id153 . -9) (undo-tree-id154 . -9) (undo-tree-id155 . -9) (undo-tree-id156 . -9) (undo-tree-id157 . -9) (undo-tree-id158 . -9) (undo-tree-id159 . -9) (undo-tree-id160 . -9) (undo-tree-id161 . -9) (undo-tree-id162 . -9) (undo-tree-id163 . -9) (undo-tree-id164 . -9) (undo-tree-id165 . -9) (undo-tree-id166 . -9) (undo-tree-id167 . -9) 614 (605 . 614) (604 . 606) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -604) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (599 . 605)) nil (25583 54807 922246 450000) 0 nil])
([nil nil ((618 . 619)) nil (25583 54807 921929 162000) 0 nil])
([nil nil ((59 . 281) 76 (t 25583 54807 932958 502000)) nil (25583 54856 554437 326000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -211) (undo-tree-id180 . 8) (207 . 211) (#("        " 0 8 (fontified nil)) . -151) (undo-tree-id181 . 8) (147 . 151) (#("        " 0 8 (fontified nil)) . -77) (undo-tree-id182 . 8) (73 . 77) (#("    " 0 4 (fontified t)) . -59) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -3) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) 219) nil (25583 54856 554435 173000) 0 nil])
([nil nil ((264 . 265) 207) nil (25583 54856 554386 359000) 0 nil])
([nil nil ((628 . 629) (624 . 628) (t 25583 54856 559625 981000)) nil (25583 54885 93954 929000) 0 nil])
([nil nil ((270 . 277) (#("-" 0 1 (fontified t)) . -270) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) 271 (266 . 271) (266 . 267) 284) nil (25583 54885 93954 83000) 0 nil])
([nil nil ((nil rear-nonsticky nil 277 . 278) (#("
" 0 1 (fontified nil)) . -289) (277 . 290) 276) nil (25583 54885 93947 677000) 0 nil])
([nil nil ((278 . 285) (#("icns" 0 4 (fontified t face font-lock-variable-name-face)) . 278) (undo-tree-id271 . -3) (undo-tree-id272 . 4) (undo-tree-id273 . -4) (undo-tree-id274 . -4)) nil (25583 54885 93946 579000) 0 nil])
([nil nil ((288 . 293) (#("True" 0 4 (fontified t face font-lock-constant-face)) . 288) (undo-tree-id264 . -4) (undo-tree-id265 . -3) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4)) nil (25583 54885 93942 167000) 0 nil])
([nil nil ((#(", shell=True" 0 8 (fontified t) 8 12 (fontified t face font-lock-constant-face)) . 346) (undo-tree-id286 . -11) (undo-tree-id287 . -11) (undo-tree-id288 . -11) (undo-tree-id289 . -11) (undo-tree-id290 . -12) (undo-tree-id291 . -12) (undo-tree-id292 . -12) (undo-tree-id293 . -12) (undo-tree-id294 . -11) (undo-tree-id295 . -11) (undo-tree-id296 . -12) (undo-tree-id297 . -11) (undo-tree-id298 . -11) (undo-tree-id299 . -11) (undo-tree-id300 . -11) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -12) (t 25583 54885 99626 453000)) nil (25583 55747 60093 282000) 0 nil])
([nil nil ((354 . 365) (353 . 355) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -353) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (348 . 354) (347 . 348) (t 25583 55747 66307 609000) 346) nil (25583 55763 827493 109000) 0 nil])
([nil nil ((603 . 604) (602 . 604) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -602) (597 . 603) (593 . 597) (593 . 594) 614 (t 25583 55763 829641 212000)) nil (25583 56235 285072 793000) 0 nil])
([nil nil ((598 . 606) (#("g" 0 1 (fontified t)) . -598) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) 599 (597 . 599) (593 . 597) (593 . 594) 603 (t 25583 56235 289649 114000)) nil (25583 56260 187591 73000) 0 nil])
([nil nil ((615 . 623) (606 . 615) 605) nil (25583 56260 187579 907000) 0 nil])
([nil nil ((#("    print(w)
" 0 4 (fontified t) 4 9 (fontified t face font-lock-builtin-face) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t)) . 624) (undo-tree-id320 . -12) (undo-tree-id321 . -11) (undo-tree-id322 . -11) (undo-tree-id323 . 2) (undo-tree-id324 . -12) (undo-tree-id325 . 4) (undo-tree-id326 . -10) (undo-tree-id327 . -11) (undo-tree-id328 . -11) (undo-tree-id329 . -11) (undo-tree-id330 . -11) (undo-tree-id331 . -13) 635 (t 25583 56260 192982 884000)) nil (25583 56273 150128 831000) 0 nil])
([nil nil ((#("print(tags_status)
" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 19 (fontified t)) . 348) (undo-tree-id312 . -18) (undo-tree-id313 . -19) (undo-tree-id314 . -11) (undo-tree-id315 . -11) (undo-tree-id316 . -11) (undo-tree-id317 . -11) (undo-tree-id318 . -11) (undo-tree-id319 . -19) 359) nil (25583 56273 150118 863000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -787) (undo-tree-id441 . -4) (undo-tree-id442 . -4) 791 (787 . 791) (787 . 788) 798 (t 25583 56273 159649 768000)) nil (25583 57311 768942 304000) 0 nil])
([nil nil ((537 . 539) (#("'" 0 1 (fontified nil)) . -537) (530 . 538) (526 . 530) (526 . 527)) nil (25583 57311 768939 640000) 0 nil])
([nil nil ((820 . 826) (819 . 820) (818 . 820) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -818) (818 . 819) (817 . 819) (#("'" 0 1 (fontified nil)) . -817) (814 . 818) (#("=" 0 1 (fontified t)) . -814) (undo-tree-id437 . -1) (#(" " 0 1 (fontified t)) . -815) (undo-tree-id438 . -1) 816 (814 . 816) (813 . 814) (805 . 813) (#("yuck" 0 4 (fontified t)) . -805) (undo-tree-id439 . -4) (undo-tree-id440 . -4) 809 (805 . 809) (801 . 805)) nil (25583 57311 768937 879000) 0 nil])
([nil nil ((817 . 818)) nil (25583 57311 768932 110000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil face font-lock-string-face)) . 838) (837 . 838) (836 . 838) (#("`" 0 1 (fontified nil face font-lock-string-face)) . -836) (830 . 837) (827 . 830)) nil (25583 57311 768931 442000) 0 nil])
([nil nil ((837 . 850)) nil (25583 57311 768930 554000) 0 nil])
([nil nil ((855 . 856) (854 . 856) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -854) (854 . 855) (#("i" 0 1 (fontified t face font-lock-string-face)) . -854) (undo-tree-id435 . -1) (undo-tree-id436 . -1) 855 (850 . 855)) nil (25583 57311 768929 626000) 0 nil])
([nil nil ((858 . 861)) nil (25583 57311 768702 877000) 0 nil])
([nil nil ((860 . 863)) nil (25583 57311 768701 949000) 0 nil])
([nil nil ((860 . 861) (#("wor" 0 3 (fontified t face font-lock-string-face)) . 860) (undo-tree-id406 . -2) (undo-tree-id407 . -3) (undo-tree-id408 . -2) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -3) (undo-tree-id434 . -3)) nil (25583 57311 768700 872000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 859) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1)) nil (25583 57311 768686 598000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . 859) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . 1) (undo-tree-id354 . -1) (undo-tree-id355 . -1)) nil (25583 57311 768660 87000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 859) (undo-tree-id334 . 1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . 1) (undo-tree-id346 . 1) (undo-tree-id347 . 1) (undo-tree-id348 . 1) (undo-tree-id349 . -1) (undo-tree-id350 . -1)) nil (25583 57311 768656 487000) 0 nil])
([nil nil ((860 . 861) (859 . 861) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -859) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (859 . 860)) nil (25583 57311 768643 430000) 0 nil])
([nil nil ((912 . 913) (#("wor" 0 3 (fontified t)) . 912) (undo-tree-id443 . -2) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (t 25583 57311 779667 196000)) nil (25583 57318 420417 85000) 0 nil])
([nil nil ((34 . 45) (33 . 34) (t 25583 57318 429667 309000) 32) nil (25583 57472 425709 78000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 976 979 nil nil nil nil #s(yas--field 2 981 983 nil nil nil nil #s(yas--exit 984 nil))) #s(yas--field 2 981 983 nil nil nil nil #s(yas--exit 984 nil))) #s(yas--exit 984 nil) 1 nil #s(yas--field 1 976 979 nil nil nil nil #s(yas--field 2 981 983 nil nil nil nil #s(yas--exit 984 nil))) nil nil)) (971 . 984) (#("dump" 0 4 (fontified nil)) . -971) (971 . 975) (#("du" 0 2 (fontified t)) . -971) (undo-tree-id730 . -2) (undo-tree-id731 . -2) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -2) (undo-tree-id736 . -2) (undo-tree-id737 . -2) (undo-tree-id738 . -2) 973 (971 . 973) (#("f" 0 1 (fontified t)) . -971) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (#("o" 0 1 (fontified t)) . -972) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -973) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("m" 0 1 (fontified t)) . -974) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) 975 (966 . 975)) nil (25583 57472 425706 519000) 0 nil])
([nil nil ((apply yas--snippet-revive 971 984 #s(yas--snippet nil (#s(yas--field 1 976 979 nil nil nil nil #s(yas--field 2 981 983 nil nil nil nil #s(yas--exit 984 nil))) #s(yas--field 2 981 983 nil nil nil nil #s(yas--exit 984 nil))) #s(yas--exit 984 nil) 1 nil #s(yas--field 1 976 979 nil nil nil nil #s(yas--field 2 981 983 nil nil nil nil #s(yas--exit 984 nil))) nil nil))) nil (25583 57472 425649 522000) 0 nil])
([nil nil ((996 . 1008) (#("formatted" 0 9 (fontified t)) . -996) (undo-tree-id622 . -9) (undo-tree-id623 . -9) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -2) (undo-tree-id629 . -2) (undo-tree-id630 . -2) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -4) (undo-tree-id635 . -4) (undo-tree-id636 . -4) (undo-tree-id637 . -4) (undo-tree-id638 . -4) (undo-tree-id639 . -5) (undo-tree-id640 . -5) (undo-tree-id641 . -5) (undo-tree-id642 . -5) (undo-tree-id643 . -5) (undo-tree-id644 . -5) (undo-tree-id645 . -6) (undo-tree-id646 . -6) (undo-tree-id647 . -6) (undo-tree-id648 . -6) (undo-tree-id649 . -6) (undo-tree-id650 . -6) (undo-tree-id651 . -7) (undo-tree-id652 . -7) (undo-tree-id653 . -7) (undo-tree-id654 . -7) (undo-tree-id655 . -7) (undo-tree-id656 . -7) (undo-tree-id657 . -7) (undo-tree-id658 . -7) (undo-tree-id659 . -7) (undo-tree-id660 . -8) (undo-tree-id661 . -8) (undo-tree-id662 . -8) (undo-tree-id663 . -8) (undo-tree-id664 . -8) (undo-tree-id665 . -8) (undo-tree-id666 . -8) (undo-tree-id667 . -8) (undo-tree-id668 . -8) (undo-tree-id669 . -8) (undo-tree-id670 . -8) (undo-tree-id671 . -8) (undo-tree-id672 . -8) (undo-tree-id673 . -8) (undo-tree-id674 . -8) (undo-tree-id675 . -8) (undo-tree-id676 . -8) (undo-tree-id677 . -8) (undo-tree-id678 . -8) (undo-tree-id679 . -8) (undo-tree-id680 . -8) (undo-tree-id681 . -8) (undo-tree-id682 . -9) (undo-tree-id683 . -9) (undo-tree-id684 . -9) (undo-tree-id685 . -9) (undo-tree-id686 . -9) (undo-tree-id687 . -9) (undo-tree-id688 . -9) (undo-tree-id689 . -9) (undo-tree-id690 . -9) (undo-tree-id691 . -9) (undo-tree-id692 . -9) (undo-tree-id693 . -9) (undo-tree-id694 . -9) (undo-tree-id695 . -9) 1005 (1004 . 1005) (#("e" 0 1 (fontified t)) . -1004) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) 1005 (996 . 1005) (995 . 997) (#("(" 0 1 (fontified nil)) . -995) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (995 . 996) (994 . 995) (#("s" 0 1 (fontified t)) . -994) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) 995 (985 . 995) (984 . 985) 975) nil (25583 57472 425647 174000) 0 nil])
([nil nil ((#("json.dump(obj, fp)
" 0 5 (fontified t) 5 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 19 (fontified t)) . 966) (undo-tree-id549 . -18) (undo-tree-id550 . -17) (undo-tree-id551 . -17) (undo-tree-id552 . -5) (undo-tree-id553 . -5) (undo-tree-id554 . -5) (undo-tree-id555 . -5) (undo-tree-id556 . -5) (undo-tree-id557 . -5) (undo-tree-id558 . -5) (undo-tree-id559 . -5) (undo-tree-id560 . -5) (undo-tree-id561 . -5) (undo-tree-id562 . -5) (undo-tree-id563 . -5) (undo-tree-id564 . -5) (undo-tree-id565 . -5) (undo-tree-id566 . -5) (undo-tree-id567 . -5) (undo-tree-id568 . -5) (undo-tree-id569 . -5) (undo-tree-id570 . -5) (undo-tree-id571 . -5) (undo-tree-id572 . -5) (undo-tree-id573 . -5) (undo-tree-id574 . -5) (undo-tree-id575 . -5) (undo-tree-id576 . -5) (undo-tree-id577 . -5) (undo-tree-id578 . -5) (undo-tree-id579 . -5) (undo-tree-id580 . -5) (undo-tree-id581 . -5) (undo-tree-id582 . -5) (undo-tree-id583 . -5) (undo-tree-id584 . -5) (undo-tree-id585 . -5) (undo-tree-id586 . -5) (undo-tree-id587 . -5) (undo-tree-id588 . -5) (undo-tree-id589 . -5) (undo-tree-id590 . -5) (undo-tree-id591 . -5) (undo-tree-id592 . -5) (undo-tree-id593 . -9) (undo-tree-id594 . -19) (undo-tree-id595 . -19) (undo-tree-id596 . -19) (undo-tree-id597 . -19) (undo-tree-id598 . -19) (undo-tree-id599 . -19) (undo-tree-id600 . -19) (undo-tree-id601 . -19) (undo-tree-id602 . -19) (undo-tree-id603 . -19) (undo-tree-id604 . -19) (undo-tree-id605 . -19) (undo-tree-id606 . -19) (undo-tree-id607 . -19) (undo-tree-id608 . -19) (undo-tree-id609 . -19) (undo-tree-id610 . -19) (undo-tree-id611 . -19) (undo-tree-id612 . -17) (undo-tree-id613 . 2) (undo-tree-id614 . -18) (undo-tree-id615 . 10) (undo-tree-id616 . -10) (undo-tree-id617 . -17) (undo-tree-id618 . -17) (undo-tree-id619 . -17) (undo-tree-id620 . -17) (undo-tree-id621 . -19) 983) nil (25583 57472 425345 359000) 0 nil])
([nil nil ((#("print(formatted_ws)
" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 20 (fontified t)) . 946) (undo-tree-id462 . -19) (undo-tree-id463 . -17) (undo-tree-id464 . -17) (undo-tree-id465 . -17) (undo-tree-id466 . -17) (undo-tree-id467 . -20) (undo-tree-id468 . -20) (undo-tree-id469 . -20) (undo-tree-id470 . -20) (undo-tree-id471 . -20) (undo-tree-id472 . -20) (undo-tree-id473 . -20) (undo-tree-id474 . -20) (undo-tree-id475 . -20) (undo-tree-id476 . -20) (undo-tree-id477 . -20) (undo-tree-id478 . -20) (undo-tree-id479 . -20) (undo-tree-id480 . -20) (undo-tree-id481 . -20) (undo-tree-id482 . -20) (undo-tree-id483 . -20) (undo-tree-id484 . -20) (undo-tree-id485 . -20) (undo-tree-id486 . -20) (undo-tree-id487 . -20) (undo-tree-id488 . -20) (undo-tree-id489 . -20) (undo-tree-id490 . -20) (undo-tree-id491 . -20) (undo-tree-id492 . -20) (undo-tree-id493 . -20) (undo-tree-id494 . -20) (undo-tree-id495 . -20) (undo-tree-id496 . -20) (undo-tree-id497 . -20) (undo-tree-id498 . -20) (undo-tree-id499 . -20) (undo-tree-id500 . -20) (undo-tree-id501 . -20) (undo-tree-id502 . -20) (undo-tree-id503 . -20) (undo-tree-id504 . -20) (undo-tree-id505 . -20) (undo-tree-id506 . -20) (undo-tree-id507 . -20) (undo-tree-id508 . -20) (undo-tree-id509 . -20) (undo-tree-id510 . -20) (undo-tree-id511 . -20) (undo-tree-id512 . -20) (undo-tree-id513 . -20) (undo-tree-id514 . -20) (undo-tree-id515 . -20) (undo-tree-id516 . -20) (undo-tree-id517 . -20) (undo-tree-id518 . -20) (undo-tree-id519 . -20) (undo-tree-id520 . -20) (undo-tree-id521 . -20) (undo-tree-id522 . -20) (undo-tree-id523 . -20) (undo-tree-id524 . -20) (undo-tree-id525 . -20) (undo-tree-id526 . -20) (undo-tree-id527 . -20) (undo-tree-id528 . -20) (undo-tree-id529 . -20) (undo-tree-id530 . -20) (undo-tree-id531 . -20) (undo-tree-id532 . -20) (undo-tree-id533 . -20) (undo-tree-id534 . -17) (undo-tree-id535 . -17) (undo-tree-id536 . -17) (undo-tree-id537 . -17) (undo-tree-id538 . -17) (undo-tree-id539 . -17) (undo-tree-id540 . -17) (undo-tree-id541 . -17) (undo-tree-id542 . -17) (undo-tree-id543 . -17) (undo-tree-id544 . -17) (undo-tree-id545 . -17) (undo-tree-id546 . -17) (undo-tree-id547 . -17) (undo-tree-id548 . -20) 963) nil (25583 57472 425314 766000) 0 nil])
([nil nil ((946 . 957)) nil (25583 57472 425263 245000) 0 nil])
([nil nil ((994 . 996) (#("n" 0 1 (fontified t)) . -994) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) 995 (988 . 995) (987 . 989) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -987) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (982 . 988) (981 . 982) 956) nil (25583 57472 425261 883000) 0 nil])
([nil nil ((997 . 998)) nil (25583 57472 425247 856000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 924) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (t 25583 57472 433003 241000)) nil (25583 57634 541958 492000) 0 nil])
([nil nil ((924 . 927)) nil (25583 57634 541949 187000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78 . 79) (#("
" 0 1 (fontified nil)) . -236) (70 . 237) (t 25583 57634 549672 625000)) nil (25583 59127 496510 734000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -160) (undo-tree-id891 . 12) (152 . 160) (#("            " 0 12 (fontified nil)) . -105) (undo-tree-id892 . 12) (97 . 105) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -75) (undo-tree-id893 . -8) (undo-tree-id894 . -8) (undo-tree-id895 . -8) (undo-tree-id896 . -8) (undo-tree-id897 . -8) (undo-tree-id898 . -8) (undo-tree-id899 . -8) (undo-tree-id900 . -8) (undo-tree-id901 . -8) (undo-tree-id902 . -8) (undo-tree-id903 . -8) (undo-tree-id904 . -8) (undo-tree-id905 . -7) (undo-tree-id906 . -8) (undo-tree-id907 . -8) (undo-tree-id908 . -8) (undo-tree-id909 . -8) (undo-tree-id910 . -8) (undo-tree-id911 . -8) (undo-tree-id912 . -8) (undo-tree-id913 . -8) (undo-tree-id914 . -8) (undo-tree-id915 . -8) (undo-tree-id916 . -8) (undo-tree-id917 . -8) (undo-tree-id918 . -8) (undo-tree-id919 . -8) (undo-tree-id920 . -8) (undo-tree-id921 . 8) (71 . 75) 160) nil (25583 59127 496509 407000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -148) (undo-tree-id851 . -8) (undo-tree-id852 . 8) (144 . 148) (#("        " 0 8 (fontified nil)) . -97) (undo-tree-id853 . -8) (undo-tree-id854 . 8) (93 . 97) (#("    " 0 4 (fontified t)) . -71) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -3) 152) nil (25583 59127 496493 255000) 0 nil])
([nil nil ((212 . 213) 144) nil (25583 59127 496470 36000) 0 nil])
([nil nil ((178 . 180) (#("subprocess" 0 10 (fontified t)) . 178) (undo-tree-id846 . -9) (undo-tree-id847 . -10) (undo-tree-id848 . -10) (undo-tree-id849 . -10) (undo-tree-id850 . -10)) nil (25583 59127 496468 958000) 0 nil])
([nil nil ((75 . 77) (#("subprocess" 0 10 (fontified t)) . 75) (undo-tree-id843 . -9) (undo-tree-id844 . -10) (undo-tree-id845 . -10)) nil (25583 59127 496463 65000) 0 nil])
([nil nil ((433 . 444) (433 . 434) 438 (t 25583 59127 499696 956000)) nil (25583 59290 904931 893000) 0 nil])
([nil nil ((466 . 468) (#("(" 0 1 (fontified nil)) . -466) (450 . 467) (449 . 450) (444 . 449) 443) nil (25583 59290 904930 994000) 0 nil])
([nil nil ((#("tags_status = sp.getoutput('herbstclient tag_status')
format_dict = {':': 'color: white', '-': 'color: orange', '.': 'color: cyan',
                '!': 'color: red', '#': 'background-color: white; color: black'}

formatted_ws = []
yuck_str = ''
for i, w in enumerate(tags_status.split('\\t')):
    if not w:
        continue
    wor = f' {w[1:]} '
    if icns and not numbers:
        wor = tags_icns.get(w[1:], '')
    elif numbers:
        wor = f' {i} ' 
    clr = format_dict.get(w[0], 'color: white')
    yuck_str += f'(button :onclick `herbstclient use {i}` {i})'
    formatted_ws.append({'ws_no': i, 'ws_icn': wor, 'ws_style': clr})

json_obj = json.dumps(formatted_ws)
print(json_obj)
" 0 11 (fontified t face font-lock-variable-name-face) 11 17 (fontified t) 17 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 52 (fontified t face font-lock-string-face) 52 53 (fontified t face (rainbow-delimiters-depth-1-face)) 53 54 (fontified t) 54 65 (fontified t face font-lock-variable-name-face) 65 68 (fontified t) 68 69 (fontified t face (rainbow-delimiters-depth-1-face)) 69 72 (fontified t face font-lock-string-face) 72 74 (fontified t) 74 87 (fontified t face font-lock-string-face) 87 88 (fontified t face font-lock-string-face) 88 90 (fontified t) 90 93 (fontified t face font-lock-string-face) 93 95 (fontified t) 95 110 (fontified t face font-lock-string-face) 110 112 (fontified t) 112 115 (fontified t face font-lock-string-face) 115 117 (fontified t) 117 130 (fontified t face font-lock-string-face) 130 131 (fontified t) 131 132 (fontified t) 132 148 (fontified t) 148 151 (fontified t face font-lock-string-face) 151 153 (fontified t) 153 165 (fontified t face font-lock-string-face) 165 167 (fontified t) 167 170 (fontified t face font-lock-string-face) 170 172 (fontified t) 172 210 (fontified t face font-lock-string-face) 210 211 (fontified t face font-lock-string-face) 211 212 (fontified t face (rainbow-delimiters-depth-1-face)) 212 213 (fontified t) 213 214 (fontified t) 214 226 (fontified t) 226 229 (fontified t) 229 230 (fontified t face (rainbow-delimiters-depth-1-face)) 230 231 (fontified t face (rainbow-delimiters-depth-1-face)) 231 232 (fontified t) 232 240 (fontified t face font-lock-variable-name-face) 240 243 (fontified t) 243 244 (fontified t face font-lock-string-face) 244 245 (fontified t face font-lock-string-face) 245 246 (fontified t) 246 249 (fontified t face font-lock-keyword-face) 249 255 (fontified t) 255 257 (fontified t face font-lock-keyword-face) 257 258 (fontified t) 258 267 (fontified t face font-lock-builtin-face) 267 268 (fontified t face (rainbow-delimiters-depth-1-face)) 268 285 (fontified t) 285 286 (fontified t face (rainbow-delimiters-depth-2-face)) 286 290 (fontified t face font-lock-string-face) 290 291 (fontified t face (rainbow-delimiters-depth-2-face)) 291 292 (fontified t face (rainbow-delimiters-depth-1-face)) 292 294 (fontified t) 294 298 (fontified t) 298 300 (fontified t face font-lock-keyword-face) 300 301 (fontified t) 301 304 (fontified t face font-lock-keyword-face) 304 305 (fontified t) 305 306 (fontified t face font-lock-variable-name-face) 306 307 (fontified t) 307 308 (fontified t) 308 316 (fontified t) 316 324 (fontified t face font-lock-keyword-face) 324 325 (fontified t) 325 329 (fontified t) 329 332 (fontified t) 332 336 (fontified t) 336 338 (fontified t face font-lock-string-face) 338 345 (fontified t face nil) 345 347 (fontified t face font-lock-string-face) 347 348 (fontified t) 348 352 (fontified t) 352 354 (fontified t face font-lock-keyword-face) 354 355 (fontified t) 355 360 (fontified t) 360 363 (fontified t composition (3 3 [8743]) prettify-symbols-start 829 prettify-symbols-end 832 face font-lock-keyword-face) 363 364 (fontified t) 364 367 (fontified t face font-lock-keyword-face) 367 368 (fontified t) 368 375 (fontified t face font-lock-variable-name-face) 375 377 (fontified t) 377 385 (fontified t) 385 388 (fontified t) 388 396 (fontified t) 396 404 (fontified t) 404 405 (fontified t face (rainbow-delimiters-depth-1-face)) 405 406 (fontified t) 406 407 (fontified t face (rainbow-delimiters-depth-2-face)) 407 408 (fontified t face highlight-numbers-number) 408 409 (fontified t) 409 410 (fontified t face (rainbow-delimiters-depth-2-face)) 410 412 (fontified t) 412 415 (fontified t face font-lock-string-face) 415 416 (fontified t face (rainbow-delimiters-depth-1-face)) 416 417 (fontified t) 417 421 (fontified t) 421 425 (fontified t face font-lock-keyword-face) 425 426 (fontified t) 426 433 (fontified t face font-lock-variable-name-face) 433 435 (fontified t) 435 443 (fontified t) 443 446 (fontified t) 446 450 (fontified t) 450 452 (fontified t face font-lock-string-face) 452 455 (fontified t face nil) 455 457 (fontified t face font-lock-string-face) 457 459 (fontified t) 459 463 (fontified t) 463 466 (fontified t face font-lock-variable-name-face) 466 484 (fontified t) 484 485 (fontified t face (rainbow-delimiters-depth-1-face)) 485 486 (fontified t) 486 487 (fontified t face (rainbow-delimiters-depth-2-face)) 487 488 (fontified t face highlight-numbers-number) 488 489 (fontified t face (rainbow-delimiters-depth-2-face)) 489 491 (fontified t) 491 504 (fontified t face font-lock-string-face) 504 505 (fontified t face font-lock-string-face) 505 506 (fontified t face (rainbow-delimiters-depth-1-face)) 506 507 (fontified t) 507 511 (fontified t) 511 519 (fontified t) 519 524 (fontified t) 524 525 (fontified t face font-lock-string-face) 525 542 (fontified t face font-lock-string-face) 542 560 (fontified t face font-lock-string-face) 560 562 (fontified t face nil) 562 563 (fontified t face nil) 563 565 (fontified t face font-lock-string-face) 565 567 (fontified t face nil) 567 568 (fontified t face nil) 568 569 (fontified t face font-lock-string-face) 569 570 (fontified t face font-lock-string-face) 570 571 (fontified t) 571 575 (fontified t) 575 594 (fontified t) 594 595 (fontified t face (rainbow-delimiters-depth-1-face)) 595 596 (fontified t face (rainbow-delimiters-depth-2-face)) 596 602 (fontified t face font-lock-string-face) 602 603 (fontified t face font-lock-string-face) 603 608 (fontified t) 608 615 (fontified t face font-lock-string-face) 615 616 (fontified t face font-lock-string-face) 616 623 (fontified t) 623 632 (fontified t face font-lock-string-face) 632 633 (fontified t face font-lock-string-face) 633 638 (fontified t) 638 639 (fontified t face (rainbow-delimiters-depth-2-face)) 639 640 (fontified t face (rainbow-delimiters-depth-1-face)) 640 641 (fontified t) 641 642 (fontified t) 642 650 (fontified t) 650 653 (fontified t) 653 663 (fontified t) 663 664 (fontified t face (rainbow-delimiters-depth-1-face)) 664 676 (fontified t) 676 677 (fontified t face (rainbow-delimiters-depth-1-face)) 677 678 (fontified t) 678 683 (fontified t face font-lock-builtin-face) 683 684 (fontified t face (rainbow-delimiters-depth-1-face)) 684 692 (fontified t) 692 693 (fontified t face (rainbow-delimiters-depth-1-face)) 693 694 (fontified t)) . 469) (undo-tree-id938 . -678) (undo-tree-id939 . -693) (undo-tree-id940 . -21) (undo-tree-id941 . -678) (undo-tree-id942 . -54) (undo-tree-id943 . -368) (undo-tree-id944 . -232) (undo-tree-id945 . -555) (undo-tree-id946 . -641) (undo-tree-id947 . -642) (undo-tree-id948 . -642) (undo-tree-id949 . -476) (undo-tree-id950 . -476) (undo-tree-id951 . -213) (undo-tree-id952 . -641) (undo-tree-id953 . -641) (undo-tree-id954 . -641) (undo-tree-id955 . -641) (undo-tree-id956 . -641) (undo-tree-id957 . -641) (undo-tree-id958 . -641) (undo-tree-id959 . -52) (undo-tree-id960 . -65) (undo-tree-id961 . -65) (undo-tree-id962 . -65) (undo-tree-id963 . -555) (undo-tree-id964 . -555) (undo-tree-id965 . -620) (undo-tree-id966 . -555) (undo-tree-id967 . -554) (undo-tree-id968 . -554) (undo-tree-id969 . -554) (undo-tree-id970 . -554) (undo-tree-id971 . -554) (undo-tree-id972 . -691) (undo-tree-id973 . -691) (undo-tree-id974 . -620) (undo-tree-id975 . -620) (undo-tree-id976 . -678) (undo-tree-id977 . -678) (undo-tree-id978 . -21) (undo-tree-id979 . -678) (undo-tree-id980 . -21) (undo-tree-id981 . -213) (undo-tree-id982 . -641) (undo-tree-id983 . -694) 1147) nil (25583 59290 904929 498000) 0 nil])
([nil nil ((444 . 446) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -444) (434 . 445) (433 . 434) (432 . 433) 417) nil (25583 59290 904906 986000) 0 nil])
([nil nil ((446 . 447)) nil (25583 59290 904906 275000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -448) (undo-tree-id936 . -4) (undo-tree-id937 . -4) 452 (447 . 452) 446) nil (25583 59290 904905 657000) 0 nil])
([nil nil ((nil rear-nonsticky nil 448 . 449) (#("
" 0 1 (fontified nil)) . -1142) (448 . 1143)) nil (25583 59290 904903 739000) 0 nil])
([nil nil ((1195 . 1199) (1155 . 1159) (#("    " 0 4 (fontified nil)) . -1088) (1080 . 1088) (#("    " 0 4 (fontified nil)) . -1020) (1012 . 1020) (#("    " 0 4 (fontified nil)) . -968) (960 . 968) (#("        " 0 8 (fontified nil)) . -944) (932 . 944) (#("    " 0 4 (fontified nil)) . -918) (910 . 918) (#("        " 0 8 (fontified nil)) . -878) (866 . 878) (#("    " 0 4 (fontified nil)) . -841) (833 . 841) (#("    " 0 4 (fontified nil)) . -814) (806 . 814) (#("        " 0 8 (fontified nil)) . -797) (785 . 797) (#("    " 0 4 (fontified nil)) . -775) (767 . 775) (715 . 719) (697 . 701) (675 . 679) (#("                " 0 16 (fontified nil)) . -609) (589 . 609) (507 . 511) (449 . 453) 1127) nil (25583 59290 904902 343000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 448) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1)) nil (25583 59290 904899 890000) 0 nil])
([nil nil ((1260 . 1262) (#("(" 0 1 (fontified nil)) . -1260) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (1254 . 1261) (1249 . 1254) 1234) nil (25583 59290 904897 502000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1214) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) 1218 (1214 . 1218) (1214 . 1215) 1224) nil (25583 59290 904893 826000) 0 nil])
([nil nil ((1231 . 1232) (1230 . 1232) (#("[" 0 1 (fontified nil)) . -1230) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (1215 . 1231) (#("    " 0 4 (fontified t)) . -1215) (undo-tree-id1002 . -4) (undo-tree-id1003 . -4) 1219 (1215 . 1219) (1215 . 1216) (t 25583 59290 909699 433000)) nil (25583 59828 709553 693000) 0 nil])
([nil nil ((1232 . 1233)) nil (25583 59828 709532 615000) 0 nil])
([nil nil ((1234 . 1235)) nil (25583 59828 709532 301000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1288) (undo-tree-id998 . 4) (1280 . 1288) (#("    " 0 4 (fontified nil)) . -1260) (undo-tree-id999 . 4) (1252 . 1260) (1236 . 1240) 1285) nil (25583 59828 709531 647000) 0 nil])
([nil nil ((1297 . 1301) (1297 . 1302) (#("    " 0 4 (fontified t)) . -1297) (undo-tree-id994 . -4) (undo-tree-id995 . -4) 1301 (#("    " 0 4 (fontified t)) . -1301) (undo-tree-id996 . -4) (undo-tree-id997 . -4) 1305 (1297 . 1305) (1297 . 1298)) nil (25583 59828 709529 557000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1297) (undo-tree-id986 . -4) (undo-tree-id987 . -4) (undo-tree-id988 . -4) (undo-tree-id989 . -4) (undo-tree-id990 . -4) (undo-tree-id991 . -4) (undo-tree-id992 . -4) (undo-tree-id993 . -4) 1305) nil (25583 59828 709525 930000) 0 nil])
([nil nil ((1313 . 1315) (#("(" 0 1 (fontified nil)) . -1313) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (1307 . 1314) (1302 . 1307) 1301) nil (25583 59828 709518 853000) 0 nil])
([nil nil ((apply -2 1280 1305 undo--wrap-and-run-primitive-undo 1280 1305 ((1288 . 1290) 1290)) (t 25583 59828 723040 851000)) nil (25583 60724 928807 909000) 0 nil])
([nil nil ((1294 . 1298) (1293 . 1295) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -1293) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (1288 . 1294) (1280 . 1288) (1280 . 1281) 1292) nil (25583 60724 928806 609000) 0 nil])
([nil nil ((1299 . 1300) (1294 . 1295)) nil (25583 60724 928796 647000) 0 nil])
([nil nil ((1301 . 1303) (1295 . 1297) 1298 (t 25583 60724 929721 97000)) nil (25583 60743 380079 104000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face font-lock-string-face)) . 1295) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . 1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (t 25583 60743 383054 710000)) nil (25583 61111 417969 484000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 1295) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . 1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1)) nil (25583 61111 417964 122000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 1299) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1)) nil (25583 61111 417961 139000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face font-lock-string-face)) . 1299) (undo-tree-id1006 . 1) (undo-tree-id1007 . 1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1)) nil (25583 61111 417957 845000) 0 nil])
([nil nil ((#("        print(\"test\")
" 0 8 (fontified t) 8 13 (fontified t face font-lock-builtin-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 15 (fontified t face font-lock-string-face) 15 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 22 (fontified t)) . 1280) (undo-tree-id1028 . 2) (undo-tree-id1029 . -19) (undo-tree-id1030 . -21) (undo-tree-id1031 . -15) (undo-tree-id1032 . 3) (undo-tree-id1033 . -15) (undo-tree-id1034 . -18) (undo-tree-id1035 . -19) (undo-tree-id1036 . -18) (undo-tree-id1037 . -15) (undo-tree-id1038 . -15) (undo-tree-id1039 . -19) (undo-tree-id1040 . -19) (undo-tree-id1041 . -19) (undo-tree-id1042 . -19) (undo-tree-id1043 . -19) (undo-tree-id1044 . -19) (undo-tree-id1045 . -19) (undo-tree-id1046 . -19) (undo-tree-id1047 . -21) (undo-tree-id1048 . -8) (undo-tree-id1049 . -8) (undo-tree-id1050 . -21) (undo-tree-id1051 . -8) (undo-tree-id1052 . -8) (undo-tree-id1053 . -19) (undo-tree-id1054 . -19) (undo-tree-id1055 . -19) (undo-tree-id1056 . -19) (undo-tree-id1057 . -22) 1299 (t 25583 61111 423060 330000)) nil (25583 63520 33254 171000) 0 nil])
([nil nil ((apply 2 1280 1297 undo--wrap-and-run-primitive-undo 1280 1297 ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1288) 1297))) nil (25583 63520 33231 686000) 0 nil])
([nil nil ((1321 . 1323) (#("(" 0 1 (fontified nil)) . -1321) (1305 . 1322) (1296 . 1305) 1295) nil (25583 63520 33228 183000) 0 nil])
([nil nil ((1118 . 1120) (t 25583 63520 36430 306000)) nil (25583 64037 567545 636000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . 1118) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (t 25583 64037 573104 854000)) nil (25583 64052 556967 138000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1118) (undo-tree-id1058 . 1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1)) nil (25583 64052 556957 972000) 0 nil])
([nil nil ((511 . 513) (#("(" 0 1 (fontified nil)) . -511) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (505 . 512) (t 25583 64052 563105 80000)) nil (25583 64099 31078 875000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1345 . 1346) (#("
" 0 1 (fontified nil)) . -1364) (1337 . 1365) 1332 (t 25583 64099 36439 121000)) nil (25583 64408 25513 840000) 0 nil])
([nil nil ((#("        sys.stdout.flush()
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t)) . 1338) (undo-tree-id1093 . -26) (undo-tree-id1094 . -26) (undo-tree-id1095 . -8) (undo-tree-id1096 . -27) (undo-tree-id1097 . -27) (undo-tree-id1098 . -27) (undo-tree-id1099 . 1) (undo-tree-id1100 . 1) (undo-tree-id1101 . -26) (undo-tree-id1102 . 1) (undo-tree-id1103 . -7) (undo-tree-id1104 . 19) (undo-tree-id1105 . -8) (undo-tree-id1106 . -8) (undo-tree-id1107 . -8) (undo-tree-id1108 . -8) (undo-tree-id1109 . -8) (undo-tree-id1110 . -8) (undo-tree-id1111 . -26) (undo-tree-id1112 . -8) (undo-tree-id1113 . -8) (undo-tree-id1114 . -26) (undo-tree-id1115 . -8) (undo-tree-id1116 . -8) (undo-tree-id1117 . -27) (undo-tree-id1118 . -8) (undo-tree-id1119 . -8) (undo-tree-id1120 . -8) (undo-tree-id1121 . -8) (undo-tree-id1122 . -27) 1346) nil (25583 64408 25512 47000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1377) (1350 . 1378) 1346) nil (25583 64408 25494 640000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -1355) (undo-tree-id1074 . -8) (undo-tree-id1075 . -8) (undo-tree-id1076 . -8) (undo-tree-id1077 . -8) (undo-tree-id1078 . -8) (undo-tree-id1079 . -8) (undo-tree-id1080 . -8) (undo-tree-id1081 . -8) (undo-tree-id1082 . -8) (undo-tree-id1083 . -8) (undo-tree-id1084 . -8) (undo-tree-id1085 . -8) (undo-tree-id1086 . -8) (undo-tree-id1087 . -8) (undo-tree-id1088 . -8) (undo-tree-id1089 . -8) (undo-tree-id1090 . -8) (undo-tree-id1091 . -8) (undo-tree-id1092 . 8) (1351 . 1355) 1359) nil (25583 64408 25491 88000) 0 nil])
([nil nil ((560 . 570) (t 25583 64408 29777 196000)) nil (25583 64922 834674 899000) 0 nil])
([nil nil ((569 . 570) (t 25583 64922 839785 237000)) nil (25583 64935 860486 264000) 0 nil])
([nil nil ((584 . 597) (#(":" 0 1 (fontified t face font-lock-string-face)) . -584) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) 585 (584 . 585) (t 25583 64935 866452 106000)) nil (25583 64955 583794 477000) 0 nil])
([nil nil ((633 . 651) (#(" " 0 1 (fontified t face font-lock-string-face)) . -633) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) 634 (627 . 634) (606 . 627) (t 25583 64955 589785 742000)) nil (25583 65025 924337 535000) 0 nil])
([nil nil ((622 . 627) (t 25583 65025 929786 826000)) nil (25583 65130 383206 637000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . 617) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (t 25583 65130 389788 425000)) nil (25583 65179 331870 6000) 0 nil])
([nil nil ((#("-line" 0 5 (fontified t face font-lock-string-face)) . 621) (undo-tree-id1139 . -4) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -3) (undo-tree-id1145 . -3) (undo-tree-id1146 . -4) (undo-tree-id1147 . -4) (undo-tree-id1148 . -5) (undo-tree-id1149 . -5) (undo-tree-id1150 . -5) (undo-tree-id1151 . -5) (undo-tree-id1152 . -4) (undo-tree-id1153 . -4) (undo-tree-id1154 . -3) (undo-tree-id1155 . -3) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -5) (undo-tree-id1161 . -5) (t 25583 65179 336455 853000)) nil (25583 65209 726825 657000) 0 nil])
([nil nil ((#("; text-decoration-color: " 0 25 (fontified t face font-lock-string-face)) . 632) (undo-tree-id1162 . -24) (undo-tree-id1163 . -24) (undo-tree-id1164 . -24) (undo-tree-id1165 . -17) (undo-tree-id1166 . -17) (undo-tree-id1167 . -24) (undo-tree-id1168 . -2) (undo-tree-id1169 . -2) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -25) (undo-tree-id1173 . -24) (undo-tree-id1174 . -5) (undo-tree-id1175 . -5) (undo-tree-id1176 . -6) (undo-tree-id1177 . -6) (undo-tree-id1178 . -16) (undo-tree-id1179 . -16) (undo-tree-id1180 . -17) (undo-tree-id1181 . -17) (undo-tree-id1182 . -22) (undo-tree-id1183 . -22) (undo-tree-id1184 . -23) (undo-tree-id1185 . -23) (undo-tree-id1186 . -25) (undo-tree-id1187 . -25) (undo-tree-id1188 . -24) (undo-tree-id1189 . -24) (undo-tree-id1190 . -24) (undo-tree-id1191 . -25) 656 (t 25583 65209 733122 978000)) nil (25583 65245 160345 251000) 0 nil])
([nil nil ((632 . 639)) nil (25583 65245 160320 405000) 0 nil])
([nil nil ((606 . 619) (#("text-decoration" 0 15 (fontified t face font-lock-string-face)) . 606) (undo-tree-id1251 . -14) (undo-tree-id1252 . -14) (undo-tree-id1253 . -14) (undo-tree-id1254 . -14) (undo-tree-id1255 . -15) (undo-tree-id1256 . -14) (undo-tree-id1257 . -3) (undo-tree-id1258 . -3) (undo-tree-id1259 . -4) (undo-tree-id1260 . -4) (undo-tree-id1261 . -14) (undo-tree-id1262 . -14) (undo-tree-id1263 . -14) (undo-tree-id1264 . -15) (undo-tree-id1265 . -15) 620 (t 25583 65245 166456 847000)) nil (25583 65407 540592 943000) 0 nil])
([nil nil ((#("underline solid cyan" 0 20 (fontified t face font-lock-string-face)) . 621) (undo-tree-id1192 . -19) (undo-tree-id1193 . -19) (undo-tree-id1194 . -19) (undo-tree-id1195 . -9) (undo-tree-id1196 . -9) (undo-tree-id1197 . -9) (undo-tree-id1198 . -9) (undo-tree-id1199 . -9) (undo-tree-id1200 . -9) (undo-tree-id1201 . -9) (undo-tree-id1202 . -9) (undo-tree-id1203 . -9) (undo-tree-id1204 . -9) (undo-tree-id1205 . -9) (undo-tree-id1206 . -9) (undo-tree-id1207 . -9) (undo-tree-id1208 . -9) (undo-tree-id1209 . -9) (undo-tree-id1210 . -9) (undo-tree-id1211 . -9) (undo-tree-id1212 . -9) (undo-tree-id1213 . -9) (undo-tree-id1214 . -9) (undo-tree-id1215 . -9) (undo-tree-id1216 . -9) (undo-tree-id1217 . -15) (undo-tree-id1218 . -19) (undo-tree-id1219 . -15) (undo-tree-id1220 . -15) (undo-tree-id1221 . -15) (undo-tree-id1222 . -15) (undo-tree-id1223 . -15) (undo-tree-id1224 . -15) (undo-tree-id1225 . -15) (undo-tree-id1226 . -15) (undo-tree-id1227 . -16) (undo-tree-id1228 . -16) (undo-tree-id1229 . -17) (undo-tree-id1230 . -17) (undo-tree-id1231 . -18) (undo-tree-id1232 . -18) (undo-tree-id1233 . -18) (undo-tree-id1234 . -18) (undo-tree-id1235 . -18) (undo-tree-id1236 . -18) (undo-tree-id1237 . -18) (undo-tree-id1238 . -18) (undo-tree-id1239 . -18) (undo-tree-id1240 . -18) (undo-tree-id1241 . -20) (undo-tree-id1242 . -19) (undo-tree-id1243 . -8) (undo-tree-id1244 . -8) (undo-tree-id1245 . -14) (undo-tree-id1246 . -14) (undo-tree-id1247 . -19) (undo-tree-id1248 . -19) (undo-tree-id1249 . -19) (undo-tree-id1250 . -20) 640) nil (25583 65407 540581 660000) 0 nil])
([nil nil ((621 . 635)) nil (25583 65407 540543 6000) 0 nil])
([nil nil ((#("        yuck_str += f'(button :onclick `herbstclient use {i}` {i})'
" 0 8 (fontified t) 8 16 (fontified t) 16 21 (fontified t) 21 22 (fontified t face font-lock-string-face) 22 39 (fontified t face font-lock-string-face) 39 57 (fontified t face font-lock-string-face) 57 59 (fontified t face nil) 59 60 (fontified t face nil) 60 62 (fontified t face font-lock-string-face) 62 64 (fontified t face nil) 64 65 (fontified t face nil) 65 66 (fontified t face font-lock-string-face) 66 67 (fontified t face font-lock-string-face) 67 68 (fontified t)) . 1061) (undo-tree-id1287 . -67) (undo-tree-id1288 . -8) (undo-tree-id1289 . -8) (undo-tree-id1290 . -20) (undo-tree-id1291 . -67) (undo-tree-id1292 . -67) (undo-tree-id1293 . -67) (undo-tree-id1294 . -67) (undo-tree-id1295 . -67) (undo-tree-id1296 . -67) (undo-tree-id1297 . -36) (undo-tree-id1298 . -36) (undo-tree-id1299 . -36) (undo-tree-id1300 . -36) (undo-tree-id1301 . -36) (undo-tree-id1302 . -68) 1097 (t 25583 65407 546459 306000)) nil (25583 65459 778913 951000) 0 nil])
([nil nil ((#("    yuck_str = ''
" 0 4 (fontified t) 4 12 (fontified t face font-lock-variable-name-face) 12 15 (fontified t) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t)) . 746) (undo-tree-id1266 . -17) (undo-tree-id1267 . -4) (undo-tree-id1268 . -4) (undo-tree-id1269 . -15) (undo-tree-id1270 . -17) (undo-tree-id1271 . -17) (undo-tree-id1272 . -17) (undo-tree-id1273 . -17) (undo-tree-id1274 . -17) (undo-tree-id1275 . -17) (undo-tree-id1276 . -16) (undo-tree-id1277 . -16) (undo-tree-id1278 . -16) (undo-tree-id1279 . -16) (undo-tree-id1280 . -16) (undo-tree-id1281 . -16) (undo-tree-id1282 . -16) (undo-tree-id1283 . -16) (undo-tree-id1284 . -16) (undo-tree-id1285 . -16) (undo-tree-id1286 . -18) 762) nil (25583 65459 778902 544000) 0 nil])
([nil nil ((#("        output()
" 0 8 (fontified t) 8 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 17 (fontified t)) . 1244) (undo-tree-id1303 . -16) (undo-tree-id1304 . -15) (undo-tree-id1305 . -17) (t 25583 65459 783126 754000)) nil (25584 818 294585 82000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1223 . 1224) (1216 . 1233)) nil (25584 818 294425 606000) 0 nil])
([nil nil ((#("        sys.stdout.flush()
" 0 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t)) . 1261) (undo-tree-id1306 . -26) (undo-tree-id1307 . -27) (undo-tree-id1308 . -27) (undo-tree-id1309 . -27) (undo-tree-id1310 . -27) (undo-tree-id1311 . -27) (undo-tree-id1312 . -27) (undo-tree-id1313 . -27) (undo-tree-id1314 . -27) (undo-tree-id1315 . -27) (undo-tree-id1316 . -27) (undo-tree-id1317 . -27) (undo-tree-id1318 . -27) (undo-tree-id1319 . -27) (undo-tree-id1320 . -27) (undo-tree-id1321 . -27) (undo-tree-id1322 . -27) (undo-tree-id1323 . -27) (undo-tree-id1324 . -27) (undo-tree-id1325 . -27) (undo-tree-id1326 . -24) (undo-tree-id1327 . -24) (undo-tree-id1328 . -24) (undo-tree-id1329 . -24) (undo-tree-id1330 . -24) (undo-tree-id1331 . -24) (undo-tree-id1332 . -8) (undo-tree-id1333 . -8) (undo-tree-id1334 . -8) (undo-tree-id1335 . -8) (undo-tree-id1336 . -8) (undo-tree-id1337 . -27) 1269 (t 25584 818 299807 199000)) nil (25584 822 538070 224000) 0 nil])
([nil current ((nil rear-nonsticky nil 1240 . 1241) (1233 . 1260) 1237) nil (25584 822 538041 774000) 0 nil])
nil
