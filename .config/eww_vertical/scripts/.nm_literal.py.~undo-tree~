(undo-tree-save-format-version . 1)
"0271416524edd5ded8afc26d28bd94f16063a3a0"
[nil nil nil nil (25593 63522 439628 284000) 0 nil]
([nil nil ((#("{}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1256) (undo-tree-id109 . -1) (undo-tree-id110 . 1) (undo-tree-id111 . -2) (undo-tree-id112 . 2) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 1257 (t 25593 62846 495562 290000)) nil (25593 63522 439626 930000) 0 nil])
([nil nil ((1298 . 1302) (1277 . 1298) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1277) (undo-tree-id101 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1278) (undo-tree-id102 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -1279) (undo-tree-id103 . -1) (#("-" 0 1 (face font-lock-string-face fontified t)) . -1280) (undo-tree-id104 . -1) 1281 (1273 . 1281) (1268 . 1273) (1267 . 1269) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1267) (1258 . 1268) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1258) (undo-tree-id105 . -1) (#("v" 0 1 (face font-lock-string-face fontified t)) . -1259) (undo-tree-id106 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1260) (undo-tree-id107 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1261) (undo-tree-id108 . -1) 1262 (1258 . 1262) (1257 . 1259) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1257) (1257 . 1258) (1256 . 1258) (#("'" 0 1 (fontified nil)) . -1256) (1256 . 1257)) nil (25593 63522 439621 7000) 0 nil])
([nil nil ((1303 . 1305) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1303) (1302 . 1304)) nil (25593 63522 439616 116000) 0 nil])
([nil nil ((1353 . 1355) (#("N" 0 1 (face font-lock-string-face fontified t)) . -1353) (undo-tree-id97 . -1) (#("M" 0 1 (face font-lock-string-face fontified t)) . -1354) (undo-tree-id98 . -1) (#("D" 0 1 (face font-lock-string-face fontified t)) . -1355) (undo-tree-id99 . -1) 1356 (1351 . 1356) (1348 . 1351) (1347 . 1349) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1347) (1346 . 1348) (1345 . 1347) (#("`" 0 1 (face font-lock-string-face fontified nil)) . -1345) (1336 . 1346) (#("`" 0 1 (face font-lock-string-face fontified nil)) . -1336) (undo-tree-id100 . -1) (#("`" 0 1 (face font-lock-string-face fontified t)) . 1337) (1336 . 1338) (#("`" 0 1 (face font-lock-string-face fontified nil)) . -1336) (1336 . 1337) (1327 . 1336) (1326 . 1328) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1326) (1326 . 1327) (1325 . 1327) (#("'" 0 1 (fontified nil)) . -1325) (1318 . 1326) (1309 . 1318) (1308 . 1309) 1303) nil (25593 63522 439614 487000) 0 nil])
([nil nil ((1367 . 1369) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1367) (1364 . 1368) (1356 . 1364)) nil (25593 63522 439500 767000) 0 nil])
([nil nil ((1347 . 1349) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1347) (1347 . 1348)) nil (25593 63522 439500 213000) 0 nil])
([nil nil ((#("}" 0 1 (face font-lock-string-face fontified t)) . 1348) (undo-tree-id94 . 1) (undo-tree-id95 . 1) (undo-tree-id96 . -1)) nil (25593 63522 439499 646000) 0 nil])
([nil nil ((#("}" 0 1 (face font-lock-string-face fontified nil)) . 1357) (1356 . 1357) (#(" " 0 1 (fontified nil)) . -1356) (1356 . 1357) (#("}" 0 1 (face font-lock-string-face fontified nil)) . -1356) (1356 . 1357) (#(";" 0 1 (face font-lock-string-face fontified t)) . -1356) (undo-tree-id93 . -1) 1357 (1356 . 1357)) nil (25593 63522 439497 622000) 0 nil])
([nil nil ((1357 . 1358)) nil (25593 63522 439496 475000) 0 nil])
([nil nil ((1370 . 1377)) nil (25593 63522 439496 107000) 0 nil])
([nil nil ((1378 . 1387) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1378) (undo-tree-id92 . -1) 1379 (1378 . 1379)) nil (25593 63522 439495 590000) 0 nil])
([nil nil ((1387 . 1392)) nil (25593 63522 439494 670000) 0 nil])
([nil nil ((1393 . 1407)) nil (25593 63522 439494 277000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1454 . 1455) (nil fontified nil 1407 . 1455) (1407 . 1455) 1406) nil (25593 63522 439493 862000) 0 nil])
([nil nil ((1450 . 1455) (#("true" 0 4 (face font-lock-string-face fontified t)) . 1450) (undo-tree-id91 . -3)) nil (25593 63522 439492 913000) 0 nil])
([nil nil ((1508 . 1513) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1508) (undo-tree-id86 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1509) (undo-tree-id87 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1510) (undo-tree-id88 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1511) (undo-tree-id89 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1512) (undo-tree-id90 . -1) 1513 (1508 . 1513) (1507 . 1509) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1507) (1501 . 1508) (1494 . 1501) (1493 . 1495) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1493) (1490 . 1494) (1478 . 1490) (1458 . 1478) (1457 . 1459) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1457) (1457 . 1458) (1456 . 1457)) nil (25593 63522 439490 961000) 0 nil])
([nil nil ((1514 . 1519)) nil (25593 63522 439487 62000) 0 nil])
([nil nil ((1520 . 1521) (1507 . 1508)) nil (25593 63522 439486 660000) 0 nil])
([nil nil ((1529 . 1533) (1528 . 1530) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1528) (1521 . 1529)) nil (25593 63522 439486 120000) 0 nil])
([nil nil ((1535 . 1536) (1528 . 1529)) nil (25593 63522 439485 624000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -1536) (undo-tree-id85 . -1) 1537 (1536 . 1537)) nil (25593 63522 439485 25000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -1567) (undo-tree-id84 . -1) 1568 (1560 . 1568) (1559 . 1561) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1559) (1556 . 1560) (1539 . 1556) (1538 . 1540) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1538) (1537 . 1539)) nil (25593 63522 439483 698000) 0 nil])
([nil nil ((1568 . 1577)) nil (25593 63522 439482 466000) 0 nil])
([nil nil ((1600 . 1601) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1600) (undo-tree-id83 . -1) 1601 (1598 . 1601) (1577 . 1598)) nil (25593 63522 439482 9000) 0 nil])
([nil nil ((1632 . 1640) (1631 . 1633) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1631) (1623 . 1632) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1623) (undo-tree-id76 . -1) 1624 (1617 . 1624) (1609 . 1617) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1609) (undo-tree-id77 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1610) (undo-tree-id78 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1611) (undo-tree-id79 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1612) (undo-tree-id80 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1613) (undo-tree-id81 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1614) (undo-tree-id82 . -1) 1615 (1603 . 1615) (1602 . 1604) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1602) (1602 . 1603) (1601 . 1602)) nil (25593 63522 439480 133000) 0 nil])
([nil nil ((1658 . 1660) (#("[" 0 1 (fontified nil)) . -1658) (1650 . 1659) (1647 . 1650) (#("d" 0 1 (fontified t)) . -1647) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("e" 0 1 (fontified t)) . -1648) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("v" 0 1 (fontified t)) . -1649) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("i" 0 1 (fontified t)) . -1650) (undo-tree-id72 . -1) (#("c" 0 1 (fontified t)) . -1651) (undo-tree-id73 . -1) (#("e" 0 1 (fontified t)) . -1652) (undo-tree-id74 . -1) (#("s" 0 1 (fontified t)) . -1653) (undo-tree-id75 . -1) 1654 (1647 . 1654) (1646 . 1647) 1644) nil (25593 63522 439474 406000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2152) (undo-tree-id65 . -8) 2160 (2152 . 2160) (2152 . 2153) 2163) nil (25593 63522 439468 514000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2152) (undo-tree-id64 . 1)) nil (25593 63522 439465 908000) 0 nil])
([nil nil ((2283 . 2285) (#("(" 0 1 (fontified nil)) . -2283) (2276 . 2284) (#(" " 0 1 (fontified t)) . -2276) (undo-tree-id61 . -1) (#("=" 0 1 (fontified t)) . -2277) (undo-tree-id62 . -1) (#(" " 0 1 (fontified t)) . -2278) (undo-tree-id63 . -1) 2279 (2268 . 2279) (2259 . 2268) 2152) nil (25593 63522 439464 655000) 0 nil])
([nil nil ((2304 . 2306) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -2304) (2284 . 2305)) nil (25593 63522 439462 526000) 0 nil])
([nil nil ((2322 . 2324) (#("e" 0 1 (fontified t)) . -2322) (undo-tree-id60 . -1) 2323 (2316 . 2323) (2315 . 2317) (#("(" 0 1 (fontified nil)) . -2315) (2305 . 2316)) nil (25593 63522 439461 835000) 0 nil])
([nil nil ((2305 . 2312)) nil (25593 63522 439460 771000) 0 nil])
([nil nil ((2312 . 2313) (#("." 0 1 (fontified t)) . -2312) (undo-tree-id59 . -1) 2313 (2312 . 2313)) nil (25593 63522 439460 312000) 0 nil])
([nil nil ((2342 . 2347) (2341 . 2343) (#("'" 0 1 (fontified nil)) . -2341) (2335 . 2342) (2333 . 2335) (#("m" 0 1 (fontified t)) . -2333) (undo-tree-id54 . -1) 2334 (2333 . 2334) (#("m" 0 1 (fontified t)) . -2333) (undo-tree-id55 . -1) (#("," 0 1 (fontified t)) . -2334) (undo-tree-id56 . -1) (#(" " 0 1 (fontified t)) . -2335) (undo-tree-id57 . -1) 2336 (2333 . 2336) (#(" " 0 1 (fontified t)) . -2333) (undo-tree-id58 . -1) 2334 (2333 . 2334)) nil (25593 63522 439458 792000) 0 nil])
([nil nil ((2356 . 2362) (2355 . 2357) (#("'" 0 1 (fontified nil)) . -2355) (2350 . 2356) (2348 . 2350)) nil (25593 63522 439455 315000) 0 nil])
([nil nil ((2363 . 2377)) nil (25593 63522 439454 829000) 0 nil])
([nil nil ((2377 . 2388) (#("wifi" 0 4 (face nil fontified t)) . -2377) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) 2381 (2379 . 2381) (2377 . 2379) (2376 . 2378) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -2376) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (2376 . 2377)) nil (25593 63522 439454 20000) 0 nil])
([nil nil ((#("n" 0 1 (face nil fontified t)) . -2399) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 2400 (2392 . 2400) (2391 . 2393) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -2391) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (2389 . 2392)) nil (25593 63522 439445 4000) 0 nil])
([nil nil ((2383 . 2385) (#("n" 0 1 (face nil fontified t)) . -2383) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("m" 0 1 (face nil fontified t)) . -2384) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("e" 0 1 (face nil fontified t)) . -2385) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 2386 (2377 . 2386) (2376 . 2378) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -2376) (2376 . 2377)) nil (25593 63522 439440 138000) 0 nil])
([nil nil ((2386 . 2388)) nil (25593 63522 439395 536000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2598 . 2599) (#("
" 0 1 (fontified nil)) . -2746) (2590 . 2747) 2589 (t 25593 63522 465571 530000)) nil (25593 63531 672087 190000) 0 nil])
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf1eb', 'connection': f'{wifi_signal}% {dev_con}', 'color': 'green'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 62 (fontified t) 62 63 (face font-lock-string-face fontified t) 63 76 (face nil fontified t) 76 78 (face font-lock-string-face fontified t) 78 87 (face nil fontified t) 87 88 (face font-lock-string-face fontified t) 88 90 (fontified t) 90 97 (face font-lock-string-face fontified t) 97 99 (fontified t) 99 106 (face font-lock-string-face fontified t) 106 107 (face (rainbow-delimiters-depth-1-face) fontified t) 107 108 (fontified t)) . 2152) (undo-tree-id171 . -107) (undo-tree-id172 . -8) (undo-tree-id173 . -8) (undo-tree-id174 . -8) (undo-tree-id175 . -8) (undo-tree-id176 . -8) (undo-tree-id177 . -8) (undo-tree-id178 . -8) (undo-tree-id179 . -8) (undo-tree-id180 . -108) 2160) nil (25593 63555 638279 342000) 0 nil] [nil nil ((#("        output[dev_name] = {'icon': r'\\uf1eb', 'connection': dev_con, 'color': 'orange'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 87 (face font-lock-string-face fontified t) 87 88 (face (rainbow-delimiters-depth-1-face) fontified t) 88 89 (fontified t)) . 2502) (undo-tree-id118 . -88) (undo-tree-id119 . -8) (undo-tree-id120 . -87) (undo-tree-id121 . -87) (undo-tree-id122 . -88) (undo-tree-id123 . -89) (undo-tree-id124 . -8) (undo-tree-id125 . -8) (undo-tree-id126 . -27) (undo-tree-id127 . -8) (undo-tree-id128 . -8) (undo-tree-id129 . -27) (undo-tree-id130 . -8) (undo-tree-id131 . -8) (undo-tree-id132 . -27) (undo-tree-id133 . -8) (undo-tree-id134 . -8) (undo-tree-id135 . -27) (undo-tree-id136 . -8) (undo-tree-id137 . -8) (undo-tree-id138 . -27) (undo-tree-id139 . -8) (undo-tree-id140 . -8) (undo-tree-id141 . -8) (undo-tree-id142 . -8) (undo-tree-id143 . -89) 2510) ((2502 . 2591)) (25593 63531 671901 182000) 0 nil])
([nil nil ((2565 . 2571) (#("green" 0 5 (face font-lock-string-face fontified t)) . 2565) (undo-tree-id168 . -4) (undo-tree-id169 . -5) (undo-tree-id170 . -5)) nil (25593 63555 638272 840000) 0 nil])
nil
([nil nil ((#("{wifi_signal}% " 0 1 (face nil fontified t) 1 12 (face nil fontified t) 12 13 (face nil fontified t) 13 15 (face font-lock-string-face fontified t)) . 2612) (undo-tree-id144 . -14) (undo-tree-id145 . -14) (undo-tree-id146 . -14) (undo-tree-id147 . -14) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -15) (undo-tree-id153 . -14) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -5) (undo-tree-id157 . -5) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id160 . -11) (undo-tree-id161 . -11) (undo-tree-id162 . -13) (undo-tree-id163 . -13) (undo-tree-id164 . -14) (undo-tree-id165 . -14) (undo-tree-id166 . -14) (undo-tree-id167 . -15) 2626) nil (25593 63555 638267 369000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2926) (2784 . 2927) 2783 (t 25593 63555 642238 650000)) nil (25593 63565 351807 694000) 0 nil])
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf1eb', 'connection': dev_con, 'color': 'orange'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 87 (face font-lock-string-face fontified t) 87 88 (face (rainbow-delimiters-depth-1-face) fontified t) 88 89 (fontified t)) . 2394) (undo-tree-id278 . -88) (undo-tree-id279 . -8) (undo-tree-id280 . -8) (undo-tree-id281 . -8) (undo-tree-id282 . -8) (undo-tree-id283 . -8) (undo-tree-id284 . -8) (undo-tree-id285 . -8) (undo-tree-id286 . -8) (undo-tree-id287 . -8) (undo-tree-id288 . -8) (undo-tree-id289 . -8) (undo-tree-id290 . -8) (undo-tree-id291 . -27) (undo-tree-id292 . -8) (undo-tree-id293 . -8) (undo-tree-id294 . -27) (undo-tree-id295 . -8) (undo-tree-id296 . -8) (undo-tree-id297 . -27) (undo-tree-id298 . -8) (undo-tree-id299 . -8) (undo-tree-id300 . -27) (undo-tree-id301 . -8) (undo-tree-id302 . -8) (undo-tree-id303 . -27) (undo-tree-id304 . -8) (undo-tree-id305 . -8) (undo-tree-id306 . -8) (undo-tree-id307 . -8) (undo-tree-id308 . -8) (undo-tree-id309 . -88) (undo-tree-id310 . -8) (undo-tree-id311 . -8) (undo-tree-id312 . -88) (undo-tree-id313 . -8) (undo-tree-id314 . -8) (undo-tree-id315 . -8) (undo-tree-id316 . -8) (undo-tree-id317 . -8) (undo-tree-id318 . -8) (undo-tree-id319 . -89) 2402) nil (25593 63581 668316 627000) 0 nil] [nil nil ((#("        output[dev_name] = {'icon': r'\\uf1eb', 'connection': dev_con, 'color': 'orange'}
" 0 8 (fontified t) 8 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 87 (face font-lock-string-face fontified t) 87 88 (face (rainbow-delimiters-depth-1-face) fontified t) 88 89 (fontified t)) . 2394) (undo-tree-id181 . -88) (undo-tree-id182 . -8) (undo-tree-id183 . -8) (undo-tree-id184 . -8) (undo-tree-id185 . -8) (undo-tree-id186 . -8) (undo-tree-id187 . -8) (undo-tree-id188 . -8) (undo-tree-id189 . -8) (undo-tree-id190 . -8) (undo-tree-id191 . -8) (undo-tree-id192 . -8) (undo-tree-id193 . -89) 2402) ((2394 . 2483)) (25593 63565 351447 900000) 0 nil])
([nil nil ((2778 . 2781) (#("orange" 0 6 (face font-lock-string-face fontified t)) . 2778) (undo-tree-id275 . -5) (undo-tree-id276 . -6) (undo-tree-id277 . -6)) nil (25593 63581 668298 782000) 0 nil])
nil
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf1eb', 'connection': dev_con, 'color': 'red'}
" 0 8 (fontified t) 8 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 84 (face font-lock-string-face fontified t) 84 85 (face (rainbow-delimiters-depth-1-face) fontified t) 85 86 (fontified t)) . 2610) (undo-tree-id194 . -85) (undo-tree-id195 . -84) (undo-tree-id196 . -8) (undo-tree-id197 . -8) (undo-tree-id198 . -8) (undo-tree-id199 . -27) (undo-tree-id200 . -8) (undo-tree-id201 . -8) (undo-tree-id202 . -27) (undo-tree-id203 . -8) (undo-tree-id204 . -8) (undo-tree-id205 . -27) (undo-tree-id206 . -8) (undo-tree-id207 . -8) (undo-tree-id208 . -27) (undo-tree-id209 . -8) (undo-tree-id210 . -8) (undo-tree-id211 . -27) (undo-tree-id212 . -10) (undo-tree-id213 . -10) (undo-tree-id214 . -10) (undo-tree-id215 . -10) (undo-tree-id216 . -10) (undo-tree-id217 . -14) (undo-tree-id218 . -14) (undo-tree-id219 . -15) (undo-tree-id220 . -15) (undo-tree-id221 . -16) (undo-tree-id222 . -16) (undo-tree-id223 . -18) (undo-tree-id224 . -18) (undo-tree-id225 . -25) (undo-tree-id226 . -25) (undo-tree-id227 . -27) (undo-tree-id228 . -27) (undo-tree-id229 . -36) (undo-tree-id230 . -36) (undo-tree-id231 . -37) (undo-tree-id232 . -37) (undo-tree-id233 . -47) (undo-tree-id234 . -47) (undo-tree-id235 . -61) (undo-tree-id236 . -61) (undo-tree-id237 . -70) (undo-tree-id238 . -70) (undo-tree-id239 . -71) (undo-tree-id240 . -71) (undo-tree-id241 . -76) (undo-tree-id242 . -76) (undo-tree-id243 . -79) (undo-tree-id244 . -8) (undo-tree-id245 . -8) (undo-tree-id246 . -27) (undo-tree-id247 . -8) (undo-tree-id248 . -8) (undo-tree-id249 . -27) (undo-tree-id250 . -8) (undo-tree-id251 . -8) (undo-tree-id252 . -27) (undo-tree-id253 . -8) (undo-tree-id254 . -8) (undo-tree-id255 . -27) (undo-tree-id256 . -8) (undo-tree-id257 . -8) (undo-tree-id258 . -27) (undo-tree-id259 . -85) (undo-tree-id260 . -8) (undo-tree-id261 . -8) (undo-tree-id262 . -85) (undo-tree-id263 . -8) (undo-tree-id264 . -8) (undo-tree-id265 . -79) (undo-tree-id266 . 2) (undo-tree-id267 . -85) (undo-tree-id268 . 59) (undo-tree-id269 . -28) (undo-tree-id270 . -84) (undo-tree-id271 . -84) (undo-tree-id272 . -84) (undo-tree-id273 . -84) (undo-tree-id274 . -86) 2694) nil (25593 63581 668293 706000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -3032) (2893 . 3033) 2892 (t 25593 63581 672239 10000)) nil (25593 63638 354131 716000) 0 nil])
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf1eb', 'connection': dev_con, 'color': 'grey'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 85 (face font-lock-string-face fontified t) 85 86 (face (rainbow-delimiters-depth-1-face) fontified t) 86 87 (fontified t)) . 2807) (undo-tree-id354 . -86) (undo-tree-id355 . -8) 2815) nil (25593 63638 354131 23000) 0 nil])
([nil nil ((2890 . 2893) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2890) (undo-tree-id352 . -1) 2891 (2889 . 2891) (#("red" 0 3 (face font-lock-string-face fontified t)) . 2889) (undo-tree-id353 . -2)) nil (25593 63638 354129 354000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -3236) (3096 . 3237) 3095) nil (25593 63638 354127 419000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3197 . 3198) (nil fontified nil 3194 . 3198) (3194 . 3198) 3193) nil (25593 63638 354126 857000) 0 nil])
([nil nil ((#("f1eb" 0 4 (face font-lock-string-face fontified t)) . 3198) (undo-tree-id347 . -3) (undo-tree-id348 . 4) (undo-tree-id349 . 4) (undo-tree-id350 . 4) (undo-tree-id351 . -4)) nil (25593 63638 354126 169000) 0 nil])
([nil nil ((3181 . 3184) (#("ey" 0 2 (face font-lock-string-face fontified t)) . 3181) (undo-tree-id340 . -1) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -2) (undo-tree-id346 . -2)) nil (25593 63638 354122 860000) 0 nil])
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf796', 'connection': dev_con, 'color': 'green'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 86 (face font-lock-string-face fontified t) 86 87 (face (rainbow-delimiters-depth-1-face) fontified t) 87 88 (fontified t)) . 3009) (undo-tree-id320 . -87) (undo-tree-id321 . -86) (undo-tree-id322 . -39) (undo-tree-id323 . -40) (undo-tree-id324 . -40) (undo-tree-id325 . -40) (undo-tree-id326 . -40) (undo-tree-id327 . -40) (undo-tree-id328 . -40) (undo-tree-id329 . -40) (undo-tree-id330 . -40) (undo-tree-id331 . 2) (undo-tree-id332 . -87) (undo-tree-id333 . 61) (undo-tree-id334 . -28) (undo-tree-id335 . -86) (undo-tree-id336 . -86) (undo-tree-id337 . -86) (undo-tree-id338 . -86) (undo-tree-id339 . -88) 3095) nil (25593 63638 354116 490000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -3353) (3212 . 3354) 3211 (t 25593 63638 362239 788000)) nil (25593 63679 891107 226000) 0 nil])
([nil nil ((3295 . 3301) (#("green" 0 5 (face font-lock-string-face fontified t)) . 3295) (undo-tree-id391 . -4)) nil (25593 63679 891106 595000) 0 nil])
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf796', 'connection': dev_con, 'color': 'yellow'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 87 (face font-lock-string-face fontified t) 87 88 (face (rainbow-delimiters-depth-1-face) fontified t) 88 89 (fontified t)) . 3355) (undo-tree-id385 . -88) (undo-tree-id386 . -87) (undo-tree-id387 . 2) (undo-tree-id388 . -88) (undo-tree-id389 . 62) (undo-tree-id390 . -28) 3442) nil (25593 63679 891105 634000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -3578) (3436 . 3579) 3435) nil (25593 63679 891102 393000) 0 nil])
([nil nil ((3519 . 3525) (#("yellow" 0 6 (face font-lock-string-face fontified t)) . 3519) (undo-tree-id384 . -5)) nil (25593 63679 891101 952000) 0 nil])
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf796', 'connection': dev_con, 'color': 'orange'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 87 (face font-lock-string-face fontified t) 87 88 (face (rainbow-delimiters-depth-1-face) fontified t) 88 89 (fontified t)) . 3579) (undo-tree-id378 . -88) (undo-tree-id379 . -87) (undo-tree-id380 . 2) (undo-tree-id381 . -88) (undo-tree-id382 . 62) (undo-tree-id383 . -28) 3666) nil (25593 63679 891100 682000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -3782) (3640 . 3783) 3639) nil (25593 63679 891350 720000) 0 nil])
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf796', 'connection': dev_con, 'color': 'red'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 84 (face font-lock-string-face fontified t) 84 85 (face (rainbow-delimiters-depth-1-face) fontified t) 85 86 (fontified t)) . 3783) (undo-tree-id577 . -85) (undo-tree-id578 . -8) (undo-tree-id579 . -8) (undo-tree-id580 . -8) (undo-tree-id581 . -27) (undo-tree-id582 . -8) (undo-tree-id583 . -8) (undo-tree-id584 . -27) (undo-tree-id585 . -8) (undo-tree-id586 . -8) (undo-tree-id587 . -27) (undo-tree-id588 . -8) (undo-tree-id589 . -8) (undo-tree-id590 . -27) (undo-tree-id591 . -8) (undo-tree-id592 . -8) (undo-tree-id593 . -27) (undo-tree-id594 . -8) (undo-tree-id595 . -8) (undo-tree-id596 . -8) (undo-tree-id597 . -8) (undo-tree-id598 . -8) (undo-tree-id599 . -27) (undo-tree-id600 . -8) (undo-tree-id601 . -8) (undo-tree-id602 . -27) (undo-tree-id603 . -8) (undo-tree-id604 . -8) (undo-tree-id605 . -27) (undo-tree-id606 . -8) (undo-tree-id607 . -8) (undo-tree-id608 . -27) (undo-tree-id609 . -8) (undo-tree-id610 . -8) (undo-tree-id611 . -27) (undo-tree-id612 . -8) (undo-tree-id613 . -8) (undo-tree-id614 . -8) (undo-tree-id615 . -8) (undo-tree-id616 . -85) (undo-tree-id617 . -8) (undo-tree-id618 . -8) (undo-tree-id619 . -85) (undo-tree-id620 . -8) (undo-tree-id621 . -8) (undo-tree-id622 . -8) (undo-tree-id623 . -8) (undo-tree-id624 . -8) (undo-tree-id625 . -8) (undo-tree-id626 . -86) 3791) nil (25593 63712 578588 42000) 0 nil] [nil nil ((#("        output[dev_name] = {'icon': r'\\uf796', 'connection': dev_con, 'color': 'red'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 84 (face font-lock-string-face fontified t) 84 85 (face (rainbow-delimiters-depth-1-face) fontified t) 85 86 (fontified t)) . 3783) (undo-tree-id356 . -85) (undo-tree-id357 . -8) (undo-tree-id358 . -8) (undo-tree-id359 . -8) (undo-tree-id360 . -27) (undo-tree-id361 . -8) (undo-tree-id362 . -8) (undo-tree-id363 . -27) (undo-tree-id364 . -8) (undo-tree-id365 . -8) (undo-tree-id366 . -27) (undo-tree-id367 . -8) (undo-tree-id368 . -8) (undo-tree-id369 . -27) (undo-tree-id370 . -8) (undo-tree-id371 . -8) (undo-tree-id372 . -27) (undo-tree-id373 . -8) (undo-tree-id374 . -8) (undo-tree-id375 . -8) (undo-tree-id376 . -8) (undo-tree-id377 . -86) 3791) ((3783 . 3869)) (25593 63679 891094 304000) 0 nil])
([nil nil ((3723 . 3726) (#("orange" 0 6 (face font-lock-string-face fontified t)) . 3723) (undo-tree-id574 . -5) (undo-tree-id575 . -6) (undo-tree-id576 . -6)) nil (25593 63712 578558 18000) 0 nil])
nil
([nil nil ((3850 . 3989) 3934) nil (25593 63712 578556 286000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3949 . 3950) (nil fontified nil 3946 . 3950) (3946 . 3950) 3945) nil (25593 63712 578555 617000) 0 nil])
([nil nil ((#("f796" 0 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t rear-nonsticky t)) . 3950) (undo-tree-id569 . -3) (undo-tree-id570 . 4) (undo-tree-id571 . 4) (undo-tree-id572 . 4) (undo-tree-id573 . -4)) nil (25593 63712 578554 752000) 0 nil])
([nil nil ((3932 . 3937) (#("red" 0 3 (face font-lock-string-face fontified t)) . 3932) (undo-tree-id566 . -2) (undo-tree-id567 . -3) (undo-tree-id568 . -3)) nil (25593 63712 578551 544000) 0 nil])
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf6ff', 'connection': dev_con, 'color': 'green'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 86 (face font-lock-string-face fontified t) 86 87 (face (rainbow-delimiters-depth-1-face) fontified t) 87 88 (fontified t)) . 3991) (undo-tree-id392 . -87) (undo-tree-id393 . -86) (undo-tree-id394 . -8) (undo-tree-id395 . -8) (undo-tree-id396 . -27) (undo-tree-id397 . -8) (undo-tree-id398 . -8) (undo-tree-id399 . -27) (undo-tree-id400 . -8) (undo-tree-id401 . -8) (undo-tree-id402 . -27) (undo-tree-id403 . -8) (undo-tree-id404 . -8) (undo-tree-id405 . -27) (undo-tree-id406 . -8) (undo-tree-id407 . -8) (undo-tree-id408 . -27) (undo-tree-id409 . -8) (undo-tree-id410 . -8) (undo-tree-id411 . -27) (undo-tree-id412 . -8) (undo-tree-id413 . -8) (undo-tree-id414 . -27) (undo-tree-id415 . -8) (undo-tree-id416 . -8) (undo-tree-id417 . -27) (undo-tree-id418 . -8) (undo-tree-id419 . -8) (undo-tree-id420 . -27) (undo-tree-id421 . -8) (undo-tree-id422 . -8) (undo-tree-id423 . -27) (undo-tree-id424 . -8) (undo-tree-id425 . -8) (undo-tree-id426 . -27) (undo-tree-id427 . -8) (undo-tree-id428 . -8) (undo-tree-id429 . -27) (undo-tree-id430 . -8) (undo-tree-id431 . -8) (undo-tree-id432 . -27) (undo-tree-id433 . -8) (undo-tree-id434 . -8) (undo-tree-id435 . -27) (undo-tree-id436 . -8) (undo-tree-id437 . -8) (undo-tree-id438 . -27) (undo-tree-id439 . -8) (undo-tree-id440 . -8) (undo-tree-id441 . -27) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (undo-tree-id444 . -27) (undo-tree-id445 . -8) (undo-tree-id446 . -8) (undo-tree-id447 . -27) (undo-tree-id448 . -8) (undo-tree-id449 . -8) (undo-tree-id450 . -27) (undo-tree-id451 . -8) (undo-tree-id452 . -8) (undo-tree-id453 . -27) (undo-tree-id454 . -84) (undo-tree-id455 . -84) (undo-tree-id456 . 88) (undo-tree-id457 . -8) (undo-tree-id458 . -8) (undo-tree-id459 . -27) (undo-tree-id460 . -8) (undo-tree-id461 . -8) (undo-tree-id462 . -27) (undo-tree-id463 . -8) (undo-tree-id464 . -8) (undo-tree-id465 . -27) (undo-tree-id466 . -8) (undo-tree-id467 . -8) (undo-tree-id468 . -27) (undo-tree-id469 . -8) (undo-tree-id470 . -8) (undo-tree-id471 . -27) (undo-tree-id472 . -8) (undo-tree-id473 . -14) (undo-tree-id474 . -14) (undo-tree-id475 . -15) (undo-tree-id476 . -15) (undo-tree-id477 . -25) (undo-tree-id478 . -25) (undo-tree-id479 . -27) (undo-tree-id480 . -27) (undo-tree-id481 . -29) (undo-tree-id482 . -29) (undo-tree-id483 . -33) (undo-tree-id484 . -33) (undo-tree-id485 . -36) (undo-tree-id486 . -36) (undo-tree-id487 . -37) (undo-tree-id488 . -37) (undo-tree-id489 . -38) (undo-tree-id490 . -38) (undo-tree-id491 . -39) (undo-tree-id492 . -39) (undo-tree-id493 . -40) (undo-tree-id494 . -40) (undo-tree-id495 . -40) (undo-tree-id496 . -40) (undo-tree-id497 . -40) (undo-tree-id498 . -40) (undo-tree-id499 . -40) (undo-tree-id500 . -8) (undo-tree-id501 . -8) (undo-tree-id502 . -27) (undo-tree-id503 . -8) (undo-tree-id504 . -8) (undo-tree-id505 . -27) (undo-tree-id506 . -8) (undo-tree-id507 . -8) (undo-tree-id508 . -27) (undo-tree-id509 . -8) (undo-tree-id510 . -8) (undo-tree-id511 . -27) (undo-tree-id512 . -8) (undo-tree-id513 . -8) (undo-tree-id514 . -27) (undo-tree-id515 . -8) (undo-tree-id516 . -8) (undo-tree-id517 . -27) (undo-tree-id518 . -8) (undo-tree-id519 . -8) (undo-tree-id520 . -27) (undo-tree-id521 . -8) (undo-tree-id522 . -8) (undo-tree-id523 . -27) (undo-tree-id524 . -8) (undo-tree-id525 . -8) (undo-tree-id526 . -27) (undo-tree-id527 . -8) (undo-tree-id528 . -8) (undo-tree-id529 . -27) (undo-tree-id530 . -86) (undo-tree-id531 . -86) (undo-tree-id532 . -8) (undo-tree-id533 . -8) (undo-tree-id534 . -27) (undo-tree-id535 . -8) (undo-tree-id536 . -8) (undo-tree-id537 . -27) (undo-tree-id538 . -8) (undo-tree-id539 . -8) (undo-tree-id540 . -27) (undo-tree-id541 . -8) (undo-tree-id542 . -8) (undo-tree-id543 . -27) (undo-tree-id544 . -8) (undo-tree-id545 . -8) (undo-tree-id546 . -27) (undo-tree-id547 . -86) (undo-tree-id548 . -86) (undo-tree-id549 . -86) (undo-tree-id550 . -86) (undo-tree-id551 . 2) (undo-tree-id552 . -87) (undo-tree-id553 . 61) (undo-tree-id554 . -28) (undo-tree-id555 . -87) (undo-tree-id556 . -8) (undo-tree-id557 . -8) (undo-tree-id558 . -87) (undo-tree-id559 . -8) (undo-tree-id560 . -8) (undo-tree-id561 . -86) (undo-tree-id562 . -86) (undo-tree-id563 . -86) (undo-tree-id564 . -86) (undo-tree-id565 . -88) 4077) nil (25593 63712 578544 970000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -4191) (4050 . 4192) 4049 (t 25593 63712 582240 826000)) nil (25593 63724 930190 371000) 0 nil])
([nil nil ((#("        output[dev_name] = {'icon': r'\\uf6ff', 'connection': dev_con, 'color': 'orange'}
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 23 (face font-lock-variable-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (fontified t) 25 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 34 (face font-lock-string-face fontified t) 34 37 (fontified t) 37 45 (face font-lock-string-face fontified t) 45 47 (fontified t) 47 59 (face font-lock-string-face fontified t) 59 70 (fontified t) 70 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 87 (face font-lock-string-face fontified t) 87 88 (face (rainbow-delimiters-depth-1-face) fontified t) 88 89 (fontified t)) . 4192) (undo-tree-id630 . -88) (undo-tree-id631 . -8) (undo-tree-id632 . -56) (undo-tree-id633 . -89) (undo-tree-id634 . -89) (undo-tree-id635 . -89) (undo-tree-id636 . -56) (undo-tree-id637 . -56) (undo-tree-id638 . -56) (undo-tree-id639 . -8) (undo-tree-id640 . -8) (undo-tree-id641 . -27) (undo-tree-id642 . -8) (undo-tree-id643 . -8) (undo-tree-id644 . -27) (undo-tree-id645 . -8) (undo-tree-id646 . -8) (undo-tree-id647 . -27) (undo-tree-id648 . -8) (undo-tree-id649 . -8) (undo-tree-id650 . -27) (undo-tree-id651 . -8) (undo-tree-id652 . -8) (undo-tree-id653 . -27) (undo-tree-id654 . -8) (undo-tree-id655 . -8) (undo-tree-id656 . -8) (undo-tree-id657 . -8) (undo-tree-id658 . -8) (undo-tree-id659 . -8) (undo-tree-id660 . -8) (undo-tree-id661 . -8) (undo-tree-id662 . -8) (undo-tree-id663 . -8) (undo-tree-id664 . -8) (undo-tree-id665 . -8) (undo-tree-id666 . -8) (undo-tree-id667 . -88) (undo-tree-id668 . -8) (undo-tree-id669 . -8) (undo-tree-id670 . -88) (undo-tree-id671 . -8) (undo-tree-id672 . -8) (undo-tree-id673 . -8) (undo-tree-id674 . -8) (undo-tree-id675 . -8) (undo-tree-id676 . -8) (undo-tree-id677 . -8) (undo-tree-id678 . -8) (undo-tree-id679 . -89) 4200) nil (25593 63724 930187 818000) 0 nil])
([nil nil ((4133 . 4139) (#("green" 0 5 (face font-lock-string-face fontified t)) . 4133) (undo-tree-id627 . -4) (undo-tree-id628 . -5) (undo-tree-id629 . -5)) nil (25593 63724 930029 11000) 0 nil])
([nil nil ((#("
if len(sys.argv) > 1 and sys.argv[1] == 'devices':
    print(json.dumps(list(output.keys())))
    sys.exit()
" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-builtin-face fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t) 8 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 20 (fontified t) 20 21 (face highlight-numbers-number fontified t) 21 22 (fontified t) 22 25 (face font-lock-keyword-face prettify-symbols-end 4875 prettify-symbols-start 4872 composition (1 3 [8743]) fontified t) 25 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 36 (face highlight-numbers-number fontified t) 36 37 (face (rainbow-delimiters-depth-1-face) fontified t) 37 41 (fontified t) 41 50 (face font-lock-string-face fontified t) 50 56 (fontified t) 56 61 (face font-lock-builtin-face fontified t) 61 62 (face (rainbow-delimiters-depth-1-face) fontified t) 62 65 (fontified t) 65 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-2-face) fontified t) 73 77 (face font-lock-builtin-face fontified t) 77 78 (face (rainbow-delimiters-depth-3-face) fontified t) 78 89 (fontified t) 89 90 (face (rainbow-delimiters-depth-4-face) fontified t) 90 91 (face (rainbow-delimiters-depth-4-face) fontified t) 91 92 (face (rainbow-delimiters-depth-3-face) fontified t) 92 93 (face (rainbow-delimiters-depth-2-face) fontified t) 93 94 (face (rainbow-delimiters-depth-1-face) fontified t) 94 95 (fontified t) 95 103 (fontified t) 103 107 (face font-lock-constant-face fontified t) 107 108 (face (rainbow-delimiters-depth-1-face) fontified t) 108 109 (face (rainbow-delimiters-depth-1-face) fontified t) 109 110 (fontified t)) . 4850) (undo-tree-id725 . -108) (undo-tree-id726 . -108) (undo-tree-id727 . -109) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -50) (undo-tree-id731 . -50) (undo-tree-id732 . -50) (undo-tree-id733 . -93) (undo-tree-id734 . -93) (undo-tree-id735 . -93) (undo-tree-id736 . -108) (undo-tree-id737 . -108) (undo-tree-id738 . -108) (undo-tree-id739 . -110) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -110) (undo-tree-id744 . -110) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -110) (undo-tree-id749 . -108) (undo-tree-id750 . -109) (undo-tree-id751 . -99) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -99) (undo-tree-id756 . -109) (undo-tree-id757 . -99) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -99) (undo-tree-id762 . -108) (undo-tree-id763 . -110) (undo-tree-id764 . -108) (undo-tree-id765 . -108) (undo-tree-id766 . -108) (undo-tree-id767 . -109) (undo-tree-id768 . -99) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -99) (undo-tree-id773 . -109) (undo-tree-id774 . -99) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -99) (undo-tree-id779 . -108) (undo-tree-id780 . -108) (undo-tree-id781 . -110) (t 25593 63724 928907 669000)) nil (25593 63762 627482 72000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -4850) (undo-tree-id715 . -8) (undo-tree-id716 . -8) (undo-tree-id717 . -8) (undo-tree-id718 . -8) (undo-tree-id719 . -8) (undo-tree-id720 . -8) (undo-tree-id721 . -8) (undo-tree-id722 . -8) (undo-tree-id723 . -8) (undo-tree-id724 . -8) 4858 (4850 . 4858) (4850 . 4851)) nil (25593 63762 627455 111000) 0 nil])
([nil nil ((#("json.dumps(output)" 0 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (fontified t) 12 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t)) . 4857) (undo-tree-id708 . -17) (undo-tree-id709 . -18) (undo-tree-id710 . -18) (undo-tree-id711 . -18) (undo-tree-id712 . -18) (undo-tree-id713 . -18) (undo-tree-id714 . -18)) nil (25593 63762 627449 701000) 0 nil])
([nil nil ((4872 . 4873) (4871 . 4873) (#("'" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -4871) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (4871 . 4872) (4870 . 4872) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -4870) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (4863 . 4871) (4857 . 4863)) nil (25593 63762 627445 396000) 0 nil])
([nil nil ((4879 . 4881) (#("(" 0 1 (fontified nil)) . -4879) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (4874 . 4880) (#("," 0 1 (fontified t)) . -4874) (undo-tree-id702 . -1) (#("." 0 1 (fontified t)) . -4875) (undo-tree-id703 . -1) 4876 (4874 . 4876)) nil (25593 63762 627442 343000) 0 nil])
([nil nil ((4880 . 4888) (#("eww_" 0 4 (fontified t)) . -4880) (undo-tree-id680 . -4) (undo-tree-id681 . -4) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -2) (undo-tree-id686 . -2) (undo-tree-id687 . -2) (undo-tree-id688 . -3) (undo-tree-id689 . -3) (undo-tree-id690 . -3) (undo-tree-id691 . -3) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -4) (undo-tree-id695 . -4) (undo-tree-id696 . -4) (undo-tree-id697 . -4) (undo-tree-id698 . -4) (undo-tree-id699 . -4) 4884 (4880 . 4884)) nil (25593 63762 627437 10000) 0 nil])
([nil nil ((1276 . 1279) (#("\\" 0 1 (face font-lock-string-face fontified t)) . -1276) (undo-tree-id797 . -1) (#("'" 0 1 (face font-lock-string-face fontified t)) . -1277) (undo-tree-id798 . -1) 1278 (1276 . 1277) (1267 . 1277) (t 25593 63762 632241 532000)) nil (25593 63861 89486 100000) 0 nil])
([nil nil ((1312 . 1318) (1309 . 1312) (#("S" 0 1 (face font-lock-string-face fontified t)) . -1309) (undo-tree-id785 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1310) (undo-tree-id786 . -1) 1311 (1307 . 1311) (#("L" 0 1 (face font-lock-string-face fontified t)) . -1307) (undo-tree-id787 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1308) (undo-tree-id788 . -1) 1309 (1307 . 1309) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1307) (undo-tree-id789 . -1) 1308 (1296 . 1308) (1293 . 1296) (#("y" 0 1 (face font-lock-string-face fontified t)) . -1293) (undo-tree-id790 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1294) (undo-tree-id791 . -1) 1295 (1282 . 1295) (#("0" 0 1 (face font-lock-string-face fontified t)) . -1282) (undo-tree-id792 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1283) (undo-tree-id793 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -1284) (undo-tree-id794 . -1) 1285 (1282 . 1285) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1282) (undo-tree-id795 . -1) 1283 (1282 . 1283) (1277 . 1282) (#("f" 0 1 (face font-lock-string-face fontified t)) . -1277) (undo-tree-id796 . -1) 1278 (1277 . 1278)) nil (25593 63861 89483 272000) 0 nil])
([nil nil ((1317 . 1318) (#("/" 0 1 (face font-lock-string-face fontified t)) . 1317) (undo-tree-id784 . -1)) nil (25593 63861 89474 112000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . 1317) (undo-tree-id782 . -1) (undo-tree-id783 . -1)) nil (25593 63861 89472 614000) 0 nil])
([nil nil ((1332 . 1341) (1317 . 1332)) nil (25593 63861 89465 86000) 0 nil])
([nil nil ((1341 . 1343)) nil (25593 63861 89461 915000) 0 nil])
([nil nil ((#("def command(self, event):
    if event == 'NM_MENU':
        subprocess.Popen(
            'rofi -show nmcli -modi nmcli:~/Scripts/RofiMenus/nmcli-menu.py',
            shell=True, text=True)
    elif event.startswith('WIFIQR'):
        ifname = event.split(\"_\")[-1]
        subprocess.Popen(f'konsole --hold -e nmcli dev wifi show ifname {ifname}', shell=True, text=True)
    elif event.startswith('NMIFINFO'):
        ifname = event.split(\"_\")[-1]
        dev_info = cmd_output(f'nmcli dev show {ifname}')
        subprocess.Popen(f'dunstify -a \"NetworkManager\" \"{ifname.upper()} INFO\" \"{dev_info}\"',
                            shell=True, text=True)

" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-function-name-face fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 30 (fontified t) 30 32 (face font-lock-keyword-face fontified t) 32 42 (fontified t) 42 51 (face font-lock-string-face fontified t) 51 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-1-face) fontified t) 78 90 (fontified t) 90 91 (fontified t) 91 123 (face font-lock-string-face fontified t) 123 155 (face font-lock-string-face fontified t) 155 157 (fontified t) 157 175 (fontified t) 175 179 (face font-lock-constant-face fontified t) 179 186 (fontified t) 186 190 (face font-lock-constant-face fontified t) 190 191 (face (rainbow-delimiters-depth-1-face) fontified t) 191 196 (fontified t) 196 200 (face font-lock-keyword-face fontified t) 200 217 (fontified t) 217 218 (face (rainbow-delimiters-depth-1-face) fontified t) 218 226 (face font-lock-string-face fontified t) 226 227 (face (rainbow-delimiters-depth-1-face) fontified t) 227 252 (fontified t) 252 257 (fontified t) 257 258 (fontified t face (rainbow-delimiters-depth-1-face)) 258 261 (fontified t face font-lock-string-face) 261 262 (fontified t face (rainbow-delimiters-depth-1-face)) 262 263 (fontified t face (rainbow-delimiters-depth-1-face)) 263 264 (fontified t) 264 265 (fontified t face highlight-numbers-number) 265 266 (fontified t face (rainbow-delimiters-depth-1-face)) 266 267 (fontified t) 291 292 (face (rainbow-delimiters-depth-1-face)) 293 339 (face font-lock-string-face) 339 347 (face nil) 347 348 (face font-lock-string-face) 356 360 (face font-lock-constant-face) 367 371 (face font-lock-constant-face) 371 372 (face (rainbow-delimiters-depth-1-face)) 377 381 (face font-lock-keyword-face) 398 399 (face (rainbow-delimiters-depth-1-face)) 399 409 (face font-lock-string-face) 409 410 (face (rainbow-delimiters-depth-1-face)) 440 441 (face (rainbow-delimiters-depth-1-face)) 441 444 (face font-lock-string-face) 444 445 (face (rainbow-delimiters-depth-1-face)) 445 446 (face (rainbow-delimiters-depth-1-face)) 447 448 (face highlight-numbers-number) 448 449 (face (rainbow-delimiters-depth-1-face)) 479 480 (face (rainbow-delimiters-depth-1-face)) 481 497 (face font-lock-string-face) 497 505 (face nil) 505 506 (face font-lock-string-face) 506 507 (face (rainbow-delimiters-depth-1-face)) 532 533 (face (rainbow-delimiters-depth-1-face)) 534 565 (face font-lock-string-face) 565 570 (face nil) 570 581 (face nil) 581 589 (face font-lock-string-face) 589 599 (face nil) 599 601 (face font-lock-string-face) 637 641 (face font-lock-constant-face) 648 652 (face font-lock-constant-face) 652 653 (face (rainbow-delimiters-depth-1-face)) 654 655 (fontified t)) . 4273) (undo-tree-id848 . -25) (undo-tree-id849 . -654) (undo-tree-id850 . -655) (undo-tree-id851 . -655) (undo-tree-id852 . -655) (undo-tree-id853 . -654) (undo-tree-id854 . -655) (undo-tree-id855 . -655) (undo-tree-id856 . -654) 4927 (t 25593 63861 95576 250000)) nil (25593 64065 387985 22000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4273)) nil (25593 64065 387980 698000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4272) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1)) nil (25593 64065 387980 158000) 0 nil])
([nil nil ((4322 . 4324) (#("(" 0 1 (fontified nil)) . -4322) (4313 . 4323) (4312 . 4313) 4272) nil (25593 64065 387976 763000) 0 nil])
([nil nil ((1262 . 1265) (1252 . 1262) (#("fun" 0 3 (face font-lock-function-name-face fontified nil)) . 1252) (1251 . 1252) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1251 1265 nil nil nil t #s(yas--field 2 1266 1266 nil nil nil t #s(yas--exit 1273 nil))) #s(yas--field 2 1266 1266 nil nil nil t #s(yas--exit 1273 nil))) #s(yas--exit 1273 nil) 0 nil #s(yas--field 2 1266 1266 nil nil nil t #s(yas--exit 1273 nil)) nil nil)) (1247 . 1267) (#("f" 0 1 (fontified t)) . 1247) (undo-tree-id831 . -1) 1248 (1247 . 1248) (#("    " 0 4 (fontified t)) . -1247) (undo-tree-id832 . -4) 1251 (1246 . 1251) (#("
" 0 1 (fontified t)) . -1246) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) 1247 (#("    " 0 4 (fontified t)) . -1247) (undo-tree-id836 . -4) 1251 (#("d" 0 1 (fontified t)) . -1251) (undo-tree-id837 . -1) (#("e" 0 1 (fontified t)) . -1252) (undo-tree-id838 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1253) (undo-tree-id839 . -1) 1254 (1247 . 1251) 1250 (1247 . 1250) (#("    " 0 4 (fontified t)) . -1247) (undo-tree-id840 . -4) 1251 (1247 . 1251) (1247 . 1248)) nil (25593 64065 387975 80000) 0 nil])
([nil nil ((apply yas--snippet-revive 1247 1274 #s(yas--snippet nil (#s(yas--field 1 1251 1265 nil nil nil t #s(yas--field 2 1266 1266 nil nil nil t #s(yas--exit 1273 nil))) #s(yas--field 2 1266 1266 nil nil nil t #s(yas--exit 1273 nil))) #s(yas--exit 1273 nil) 0 nil #s(yas--field 2 1266 1266 nil nil nil t #s(yas--exit 1273 nil)) nil nil)) (#("args" 0 4 (fontified t)) . 1266)) nil (25593 64065 387968 309000) 0 nil])
([nil nil ((#("    

" 0 5 (fontified t) 5 6 (fontified t)) . 1269) (undo-tree-id826 . -5) (undo-tree-id827 . -5) (undo-tree-id828 . -5) (undo-tree-id829 . 2) (undo-tree-id830 . -5)) nil (25593 64065 387967 714000) 0 nil])
([nil nil ((4463 . 4467) (4418 . 4422) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -4283) (4271 . 4283) (#("    " 0 4 (fontified nil)) . -4215) (4207 . 4215) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -4074) (4062 . 4074) (#("    " 0 4 (fontified nil)) . -3996) (3988 . 3996) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -3857) (undo-tree-id824 . -8) (undo-tree-id825 . -8) (3845 . 3857) (#("    " 0 4 (fontified nil)) . -3787) (3779 . 3787) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -3645) (3633 . 3645) (#("    " 0 4 (fontified nil)) . -3555) (3547 . 3555) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -3413) (3401 . 3413) (#("    " 0 4 (fontified nil)) . -3342) (3334 . 3342) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -3201) (3189 . 3201) (#("    " 0 4 (fontified nil)) . -3131) (3123 . 3131) (#("        " 0 2 (fontified nil) 2 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -2991) (2979 . 2991) (#("    " 0 4 (fontified nil)) . -2925) (2917 . 2925) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -2786) (2774 . 2786) (#("    " 0 4 (fontified nil)) . -2704) (2696 . 2704) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -2562) (2550 . 2562) (#("    " 0 4 (fontified nil)) . -2493) (2485 . 2493) (#("        " 0 8 (fontified nil)) . -2468) (2456 . 2468) (#("        " 0 8 (fontified nil)) . -2308) (2296 . 2308) (#("        " 0 8 (fontified nil)) . -2189) (2177 . 2189) (#("        " 0 8 (fontified nil)) . -2103) (2091 . 2103) (#("        " 0 8 (fontified nil)) . -2051) (2039 . 2051) (#("    " 0 4 (fontified nil)) . -1987) (1979 . 1987) (#("        " 0 8 (fontified nil)) . -1970) (1958 . 1970) (#("    " 0 4 (fontified nil)) . -1914) (1906 . 1914) (#("        " 0 8 (fontified nil)) . -1840) (1828 . 1840) (1773 . 1777) (1755 . 1759) (1413 . 1417) (1269 . 1273) 4335) nil (25593 64065 387962 576000) 0 nil])
([nil nil ((#("try:
    devs = get_devices_status()
except IndexError:
    print('{}')
    sys.exit()

" 0 3 (face font-lock-keyword-face fontified t) 3 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 37 (fontified t) 37 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 54 (face font-lock-type-face fontified t) 54 60 (fontified t) 60 65 (face font-lock-builtin-face fontified t) 65 66 (face (rainbow-delimiters-depth-1-face) fontified t) 66 70 (face font-lock-string-face fontified t) 70 71 (face (rainbow-delimiters-depth-1-face) fontified t) 71 80 (fontified t) 80 84 (face font-lock-constant-face fontified t) 84 85 (face (rainbow-delimiters-depth-1-face) fontified t) 85 86 (face (rainbow-delimiters-depth-1-face) fontified t) 86 87 (fontified t) 87 88 (fontified t)) . 1159) (undo-tree-id816 . -87) (undo-tree-id817 . -1) (undo-tree-id818 . -87) (undo-tree-id819 . -87) (undo-tree-id820 . -87) (undo-tree-id821 . -87) (undo-tree-id822 . -1) (undo-tree-id823 . -87) 1246) nil (25593 64065 387957 277000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1181) (undo-tree-id815 . -4) 1185 (1180 . 1185) 1163) nil (25593 64065 387952 575000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1181 . 1182) (#("
" 0 1 (fontified nil)) . -1269) (1181 . 1270)) nil (25593 64065 387951 494000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1278) (1270 . 1278) (#("    " 0 4 (fontified nil)) . -1258) (1250 . 1258) (1227 . 1231) (#("    " 0 4 (fontified nil)) . -1199) (1191 . 1199) (1182 . 1186) 1269) nil (25593 64065 387950 731000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1289) (undo-tree-id813 . 1) (undo-tree-id814 . -1)) nil (25593 64065 387949 977000) 0 nil])
([nil nil ((#("        sys.exit()
" 0 8 (fontified t) 8 12 (fontified t) 12 16 (face font-lock-constant-face fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 19 (fontified t)) . 1270) (undo-tree-id809 . -19) (undo-tree-id810 . -19) (undo-tree-id811 . -18) (undo-tree-id812 . -19)) nil (25593 64065 387948 675000) 0 nil])
([nil nil ((1278 . 1284) (1269 . 1278) 1258) nil (25593 64065 387946 341000) 0 nil])
([nil nil ((#("{" 0 1 (face font-lock-string-face fontified t)) . 1265) (undo-tree-id807 . 1) (undo-tree-id808 . -1)) nil (25593 64065 387945 740000) 0 nil])
([nil nil ((#("}" 0 1 (face font-lock-string-face fontified t)) . 1265) (undo-tree-id805 . 1) (undo-tree-id806 . -1)) nil (25593 64065 387944 187000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -1285) (undo-tree-id803 . -1) 1286 (1284 . 1286) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1284) (undo-tree-id804 . -1) 1285 (1268 . 1285) (1266 . 1268) (1265 . 1267) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1265) (1265 . 1266)) nil (25593 64065 387942 339000) 0 nil])
([nil nil ((1286 . 1287) (1279 . 1280)) nil (25593 64065 387939 878000) 0 nil])
([nil nil ((1288 . 1306) (#("L" 0 1 (face font-lock-string-face fontified t)) . -1288) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) 1289 (1288 . 1289) (1287 . 1288)) nil (25593 64065 387937 13000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1181) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (t 25593 64065 392245 725000)) nil (25593 64071 789258 398000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4535) (undo-tree-id949 . -4) 4539 (4534 . 4539) (t 25593 64071 795579 146000) 4534) nil (25593 64161 490259 326000) 0 nil])
([nil nil ((4568 . 4571) (4558 . 4568) (4557 . 4559) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4557) (4557 . 4558) (4556 . 4558) (#("(" 0 1 (fontified nil)) . -4556) (4547 . 4557) (4535 . 4547) (#("P" 0 1 (fontified t)) . -4535) (undo-tree-id947 . -1) (#(" " 0 1 (fontified t)) . -4536) (undo-tree-id948 . -1) 4537 (4535 . 4537)) nil (25593 64161 490257 605000) 0 nil])
([nil nil ((4608 . 4611) (4588 . 4608) (4584 . 4588) (#("PI" 0 2 (fontified t)) . -4584) (undo-tree-id944 . -2) (undo-tree-id945 . -2) 4586 (4585 . 4586) (#("i" 0 1 (fontified t)) . -4585) (undo-tree-id946 . -1) 4586 (4572 . 4586)) nil (25593 64161 490255 589000) 0 nil])
([nil nil ((4616 . 4625) (#("o" 0 1 (fontified t)) . -4616) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (#("l" 0 1 (fontified t)) . -4617) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) 4618 (4614 . 4618) (4613 . 4614) (4612 . 4613) 4610) nil (25593 64161 490253 50000) 0 nil])
([nil nil ((4656 . 4658) (#("(" 0 1 (fontified nil)) . -4656) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (4647 . 4657) (4641 . 4647) (#("std" 0 3 (fontified t)) . -4641) (undo-tree-id875 . -3) (undo-tree-id876 . -3) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -2) (undo-tree-id883 . -2) (undo-tree-id884 . -2) (undo-tree-id885 . -2) (undo-tree-id886 . -2) (undo-tree-id887 . -2) (undo-tree-id888 . -2) (undo-tree-id889 . -2) (undo-tree-id890 . -2) (undo-tree-id891 . -2) (undo-tree-id892 . -2) (undo-tree-id893 . -2) (undo-tree-id894 . -3) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -3) (undo-tree-id898 . -3) (undo-tree-id899 . -3) (undo-tree-id900 . -3) (undo-tree-id901 . -3) (undo-tree-id902 . -3) (undo-tree-id903 . -3) (undo-tree-id904 . -3) 4644 (4643 . 4644) (#("r" 0 1 (face font-lock-builtin-face fontified t)) . -4643) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) 4644 (4640 . 4644) (4630 . 4640) (#("nm" 0 2 (fontified t)) . -4630) (undo-tree-id911 . -2) (undo-tree-id912 . -2) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -2) (undo-tree-id917 . -2) (undo-tree-id918 . -2) (undo-tree-id919 . -2) (undo-tree-id920 . -2) (undo-tree-id921 . -2) (undo-tree-id922 . -2) (undo-tree-id923 . -2) (undo-tree-id924 . -2) (undo-tree-id925 . -2) (undo-tree-id926 . -2) (undo-tree-id927 . -2) (undo-tree-id928 . -2) (undo-tree-id929 . -2) 4632 (4630 . 4632) (4625 . 4630) 4624) nil (25593 64161 490243 793000) 0 nil])
([nil nil ((apply yas--snippet-revive 4663 4679 #s(yas--snippet nil nil #s(yas--exit 4679 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4679 nil) 1 nil nil nil nil)) (4663 . 4679) (#("output_wrapper" 0 14 (fontified nil)) . -4663) (4663 . 4677) (#("out" 0 3 (fontified t)) . -4663) (undo-tree-id859 . -3) (undo-tree-id860 . -3) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -2) (undo-tree-id865 . -2) (undo-tree-id866 . -2) (undo-tree-id867 . -3) (undo-tree-id868 . -3) (undo-tree-id869 . -3) (undo-tree-id870 . -3) (undo-tree-id871 . -3) (undo-tree-id872 . -3) 4666 (4663 . 4666) (4658 . 4663) 4629) nil (25593 64392 885933 752000) 0 nil])
([nil nil ((4679 . 4680)) ((#("
" 0 1 (fontified t)) . 4679) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1)) (25593 64395 806468 708000) 0 nil])
([nil nil ((2414 . 2420) (2413 . 2415) (#("'" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2413) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (2413 . 2414) (2412 . 2414) (#("[" 0 1 (fontified nil)) . -2412) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (2412 . 2413)) nil (25593 64441 126242 763000) 0 nil] [nil nil ((4490 . 4492) (4274 . 4276) (4050 . 4052) (3831 . 3833) (3592 . 3594) (3373 . 3375) (3156 . 3158) (2944 . 2946) (2452 . 2454) (1977 . 1979) (1955 . 1957) (1934 . 1936) (1911 . 1913) (1207 . 1209) (2701 . 2703) (#("(" 0 1 (fontified nil)) . -2701) (2701 . 2702) (4461 . 4462) (4247 . 4248) (4025 . 4026) (3808 . 3809) (3571 . 3572) (3354 . 3355) (3139 . 3140) (2929 . 2930) (2441 . 2442) (1968 . 1969) (1948 . 1949) (1929 . 1930) (1908 . 1909) (1206 . 1207) (2694 . 2695) (4446 . 4447) (4233 . 4234) (4012 . 4013) (3796 . 3797) (3560 . 3561) (3344 . 3345) (3130 . 3131) (2921 . 2922) (2435 . 2436) (1963 . 1964) (1944 . 1945) (1926 . 1927) (1906 . 1907) (1205 . 1206) (2687 . 2688) (4431 . 4432) (4219 . 4220) (3999 . 4000) (3784 . 3785) (3549 . 3550) (3334 . 3335) (3121 . 3122) (2913 . 2914) (2429 . 2430) (1958 . 1959) (1940 . 1941) (1923 . 1924) (1904 . 1905) (1204 . 1205) (2680 . 2681) (4416 . 4417) (4205 . 4206) (3986 . 3987) (3772 . 3773) (3538 . 3539) (3324 . 3325) (3112 . 3113) (2905 . 2906) (2423 . 2424) (1953 . 1954) (1936 . 1937) (1920 . 1921) (1902 . 1903) (1203 . 1204) (2673 . 2674) (4401 . 4402) (4191 . 4192) (3973 . 3974) (3760 . 3761) (3527 . 3528) (3314 . 3315) (3103 . 3104) (2897 . 2898) (2417 . 2418) (1948 . 1949) (1932 . 1933) (1917 . 1918) (1900 . 1901) (1202 . 1203) (2666 . 2667) (t 25593 64161 495580 376000)) ((#("." 0 1 (fontified nil)) . 2666) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#("." 0 1 (fontified nil)) . 1202) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (#("." 0 1 (fontified nil)) . 1900) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (#("." 0 1 (fontified nil)) . 1917) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (#("." 0 1 (fontified nil)) . 1932) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#("." 0 1 (fontified nil)) . 1948) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (#("." 0 1 (fontified nil)) . 2417) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (#("." 0 1 (fontified nil)) . 2897) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (#("." 0 1 (fontified nil)) . 3103) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("." 0 1 (fontified nil)) . 3314) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (#("." 0 1 (fontified nil)) . 3527) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (#("." 0 1 (fontified nil)) . 3760) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (#("." 0 1 (fontified nil)) . 3973) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (#("." 0 1 (fontified nil)) . 4191) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (#("." 0 1 (fontified nil)) . 4401) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (#("k" 0 1 (fontified nil)) . 2673) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (#("k" 0 1 (fontified nil)) . 1203) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (#("k" 0 1 (fontified nil)) . 1902) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (#("k" 0 1 (fontified nil)) . 1920) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (#("k" 0 1 (fontified nil)) . 1936) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (#("k" 0 1 (fontified nil)) . 1953) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (#("k" 0 1 (fontified nil)) . 2423) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (#("k" 0 1 (fontified nil)) . 2905) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (#("k" 0 1 (fontified nil)) . 3112) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (#("k" 0 1 (fontified nil)) . 3324) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (#("k" 0 1 (fontified nil)) . 3538) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (#("k" 0 1 (fontified nil)) . 3772) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (#("k" 0 1 (fontified nil)) . 3986) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (#("k" 0 1 (fontified nil)) . 4205) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (#("k" 0 1 (fontified nil)) . 4416) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (#("e" 0 1 (fontified nil)) . 2680) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (#("e" 0 1 (fontified nil)) . 1204) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (#("e" 0 1 (fontified nil)) . 1904) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (#("e" 0 1 (fontified nil)) . 1923) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (#("e" 0 1 (fontified nil)) . 1940) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("e" 0 1 (fontified nil)) . 1958) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("e" 0 1 (fontified nil)) . 2429) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (#("e" 0 1 (fontified nil)) . 2913) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (#("e" 0 1 (fontified nil)) . 3121) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (#("e" 0 1 (fontified nil)) . 3334) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (#("e" 0 1 (fontified nil)) . 3549) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (#("e" 0 1 (fontified nil)) . 3784) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (#("e" 0 1 (fontified nil)) . 3999) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (#("e" 0 1 (fontified nil)) . 4219) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (#("e" 0 1 (fontified nil)) . 4431) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (#("y" 0 1 (fontified nil)) . 2687) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (#("y" 0 1 (fontified nil)) . 1205) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (#("y" 0 1 (fontified nil)) . 1906) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (#("y" 0 1 (fontified nil)) . 1926) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (#("y" 0 1 (fontified nil)) . 1944) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (#("y" 0 1 (fontified nil)) . 1963) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (#("y" 0 1 (fontified nil)) . 2435) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (#("y" 0 1 (fontified nil)) . 2921) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (#("y" 0 1 (fontified nil)) . 3130) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (#("y" 0 1 (fontified nil)) . 3344) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("y" 0 1 (fontified nil)) . 3560) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (#("y" 0 1 (fontified nil)) . 3796) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (#("y" 0 1 (fontified nil)) . 4012) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (#("y" 0 1 (fontified nil)) . 4233) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (#("y" 0 1 (fontified nil)) . 4446) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (#("s" 0 1 (fontified nil)) . 2694) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("s" 0 1 (fontified nil)) . 1206) (undo-tree-id1674 . -1) (#("s" 0 1 (fontified nil)) . 1908) (undo-tree-id1675 . -1) (#("s" 0 1 (fontified nil)) . 1929) (undo-tree-id1676 . -1) (#("s" 0 1 (fontified nil)) . 1948) (undo-tree-id1677 . -1) (#("s" 0 1 (fontified nil)) . 1968) (undo-tree-id1678 . -1) (#("s" 0 1 (fontified nil)) . 2441) (undo-tree-id1679 . -1) (#("s" 0 1 (fontified nil)) . 2929) (undo-tree-id1680 . -1) (#("s" 0 1 (fontified nil)) . 3139) (undo-tree-id1681 . -1) (#("s" 0 1 (fontified nil)) . 3354) (undo-tree-id1682 . -1) (#("s" 0 1 (fontified nil)) . 3571) (undo-tree-id1683 . -1) (#("s" 0 1 (fontified nil)) . 3808) (undo-tree-id1684 . -1) (#("s" 0 1 (fontified nil)) . 4025) (undo-tree-id1685 . -1) (#("s" 0 1 (fontified nil)) . 4247) (undo-tree-id1686 . -1) (#("s" 0 1 (fontified nil)) . 4461) (undo-tree-id1687 . -1) (#("(" 0 1 (fontified nil)) . 2701) (2701 . 2702) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2701) (undo-tree-id1688 . -2) (undo-tree-id1689 . -2) (undo-tree-id1690 . -2) (#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1207) (#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1911) (#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1934) (#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1955) (#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2452) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2944) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3156) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3373) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3592) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3831) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4050) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4274) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4490)) (25593 64392 97573 460000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2676) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) 2677 (2676 . 2677)) nil (25593 64441 126238 629000) 0 nil])
([nil nil ((4509 . 4522) (#("devs.keys()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4509) (undo-tree-id984 . -4) (4291 . 4304) (#("devs.keys()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4291) (4065 . 4078) (#("devs.keys()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4065) (3844 . 3857) (#("devs.keys()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3844) (3603 . 3616) (#("devs.keys()" 0 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 11 (fontified t face (rainbow-delimiters-depth-3-face))) . 3603) (3382 . 3395) (#("devs.keys()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3382) (3163 . 3176) (#("devs.keys()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3163) (2949 . 2962) (#("devs.keys()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2949) (2453 . 2466) (#("devs.keys()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2453) (1976 . 1989) (#("devs.keys()" 0 11 (fontified nil)) . 1976) (1952 . 1965) (#("devs.keys()" 0 11 (fontified nil)) . 1952) (1929 . 1942) (#("devs.keys()" 0 11 (fontified nil)) . 1929) (1904 . 1917) ("devs.keys()" . 1904) (1198 . 1211) (#("devs.keys()" 0 11 (face font-lock-variable-name-face)) . 1198) (2716 . 2717) (2704 . 2705)) ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2704) (undo-tree-id1371 . 1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . 1) (undo-tree-id1375 . 1) (undo-tree-id1376 . 1) (undo-tree-id1377 . 1) (undo-tree-id1378 . 1) (undo-tree-id1379 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2716) (undo-tree-id1380 . 1) (undo-tree-id1381 . -1) (1198 . 1209) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1198) (undo-tree-id1382 . 13) (undo-tree-id1383 . 13) (undo-tree-id1384 . 13) (undo-tree-id1385 . 13) (1904 . 1915) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 10 (fontified nil) 10 11 (face (rainbow-delimiters-depth-3-face) fontified nil) 11 12 (face (rainbow-delimiters-depth-3-face) fontified nil) 12 13 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1904) (undo-tree-id1386 . 13) (undo-tree-id1387 . 13) (undo-tree-id1388 . 13) (undo-tree-id1389 . 13) (1929 . 1940) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 10 (fontified nil) 10 11 (face (rainbow-delimiters-depth-3-face) fontified nil) 11 12 (face (rainbow-delimiters-depth-3-face) fontified nil) 12 13 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1929) (undo-tree-id1390 . 13) (undo-tree-id1391 . 13) (undo-tree-id1392 . 13) (undo-tree-id1393 . 13) (1952 . 1963) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 10 (fontified nil) 10 11 (face (rainbow-delimiters-depth-3-face) fontified nil) 11 12 (face (rainbow-delimiters-depth-3-face) fontified nil) 12 13 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1952) (undo-tree-id1394 . 13) (undo-tree-id1395 . 13) (undo-tree-id1396 . 13) (undo-tree-id1397 . 13) (1976 . 1987) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t) 11 12 (face (rainbow-delimiters-depth-3-face) fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1976) (undo-tree-id1398 . 13) (undo-tree-id1399 . 13) (undo-tree-id1400 . 13) (undo-tree-id1401 . 13) (2453 . 2464) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2453) (undo-tree-id1402 . 13) (undo-tree-id1403 . 13) (undo-tree-id1404 . 13) (undo-tree-id1405 . 13) (2949 . 2960) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2949) (undo-tree-id1406 . 13) (undo-tree-id1407 . 13) (undo-tree-id1408 . 13) (undo-tree-id1409 . 13) (3163 . 3174) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3163) (undo-tree-id1410 . 13) (undo-tree-id1411 . 13) (undo-tree-id1412 . 13) (undo-tree-id1413 . 13) (3382 . 3393) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3382) (undo-tree-id1414 . 13) (undo-tree-id1415 . 13) (undo-tree-id1416 . 13) (undo-tree-id1417 . 13) (3603 . 3614) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3603) (undo-tree-id1418 . 13) (undo-tree-id1419 . 13) (undo-tree-id1420 . 13) (undo-tree-id1421 . 13) (3844 . 3855) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3844) (undo-tree-id1422 . 13) (undo-tree-id1423 . 13) (undo-tree-id1424 . 13) (undo-tree-id1425 . 13) (4065 . 4076) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4065) (undo-tree-id1426 . 13) (undo-tree-id1427 . 13) (undo-tree-id1428 . 13) (undo-tree-id1429 . 13) (4291 . 4302) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4291) (undo-tree-id1430 . 13) (undo-tree-id1431 . 13) (undo-tree-id1432 . 13) (undo-tree-id1433 . 13) (4509 . 4520) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4509) (undo-tree-id1434 . 13) (undo-tree-id1435 . 13) (undo-tree-id1436 . 13) (undo-tree-id1437 . 13)) (25593 64391 379348 201000) 0 nil])
([nil nil ((#("." 0 1 (fontified nil)) . -2675) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) 2676 (2675 . 2676)) nil (25593 64441 126232 702000) 0 nil])
([nil nil ((4568 . 4569) (4346 . 4347) (4116 . 4117) (3891 . 3892) (3646 . 3647) (3421 . 3422) (3198 . 3199) (2980 . 2981) (2476 . 2477) (1995 . 1996) (1967 . 1968) (1940 . 1941) (1911 . 1912) (1201 . 1202) (2737 . 2738) (4553 . 4554) (4332 . 4333) (4103 . 4104) (3879 . 3880) (3635 . 3636) (3411 . 3412) (3189 . 3190) (2972 . 2973) (2470 . 2471) (1990 . 1991) (1963 . 1964) (1937 . 1938) (1909 . 1910) (1200 . 1201) (2730 . 2731) (4538 . 4539) (4318 . 4319) (4090 . 4091) (3867 . 3868) (3624 . 3625) (3401 . 3402) (3180 . 3181) (2964 . 2965) (2464 . 2465) (1985 . 1986) (1959 . 1960) (1934 . 1935) (1907 . 1908) (1199 . 1200) (2723 . 2724) (4523 . 4524) (4304 . 4305) (4077 . 4078) (3855 . 3856) (3613 . 3614) (3391 . 3392) (3171 . 3172) (2956 . 2957) (2458 . 2459) (1980 . 1981) (1955 . 1956) (1931 . 1932) (1905 . 1906) (1198 . 1199) (2716 . 2717)) ((#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 2716) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 1198) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 1905) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 1931) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 1955) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 1980) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 2458) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 2956) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 3171) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 3391) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 3613) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 3855) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 4077) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 4304) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . 4523) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 2723) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 1199) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 1907) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 1934) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 1959) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 1985) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 2464) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 2964) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 3180) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 3401) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 3624) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 3867) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 4090) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 4318) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified nil)) . 4538) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 2730) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 1200) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 1909) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 1937) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 1963) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 1990) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 2470) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 2972) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 3189) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 3411) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 3635) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 3879) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 4103) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 4332) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (#("s" 0 1 (face font-lock-builtin-face fontified nil)) . 4553) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 2737) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 1201) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified nil)) . 1911) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified nil)) . 1940) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified nil)) . 1967) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 1995) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 2476) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 2980) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 3198) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 3421) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 3646) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 3891) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 4116) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 4346) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . 4568) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1)) (25593 64391 29755 160000) 0 nil])
([nil nil ((2678 . 2684) (2677 . 2679) (#("'" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2677) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (2677 . 2678) (2676 . 2678) (#("[" 0 1 (fontified nil)) . -2676) (2676 . 2677)) nil (25593 64441 126786 164000) 0 nil])
([nil nil ((4569 . 4582) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4569) (4347 . 4360) (#("[devs.keys()]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-4-face)) 11 12 (fontified t face (rainbow-delimiters-depth-4-face)) 12 13 (fontified t face (rainbow-delimiters-depth-3-face))) . 4347) (4117 . 4130) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4117) (3892 . 3905) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3892) (3647 . 3660) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3647) (3422 . 3435) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3422) (3199 . 3212) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3199) (2981 . 2994) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2981) (2477 . 2490) (#("[devs.keys()]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2477) (1996 . 2009) (#("[devs.keys()]" 0 13 (fontified nil)) . 1996) (1968 . 1981) (#("[devs.keys()]" 0 13 (fontified nil)) . 1968) (1941 . 1954) (#("[devs.keys()]" 0 13 (fontified nil)) . 1941) (1912 . 1925) ("[devs.keys()]" . 1912) (1202 . 1215) ("[devs.keys()]" . 1202) (2756 . 2757) (2744 . 2745) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2755) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2744) (undo-tree-id982 . 1) (undo-tree-id983 . -1) 2745) ((2744 . 2745) (2755 . 2756) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2744) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2756) (1202 . 1215) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 5 (fontified t) 5 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1202) (undo-tree-id985 . 12) (undo-tree-id986 . -6) (undo-tree-id987 . -5) (undo-tree-id988 . -5) (undo-tree-id989 . -5) (undo-tree-id990 . -5) (undo-tree-id991 . -5) (undo-tree-id992 . -5) (undo-tree-id993 . -5) (undo-tree-id994 . -5) (undo-tree-id995 . -5) (undo-tree-id996 . -5) (undo-tree-id997 . -5) (undo-tree-id998 . -5) (undo-tree-id999 . -5) (undo-tree-id1000 . 12) (1912 . 1925) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 5 (fontified nil) 5 10 (fontified nil) 10 11 (face (rainbow-delimiters-depth-3-face) fontified nil) 11 12 (face (rainbow-delimiters-depth-3-face) fontified nil) 12 13 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1912) (undo-tree-id1001 . -5) (undo-tree-id1002 . -12) (undo-tree-id1003 . 13) (undo-tree-id1004 . -1) (undo-tree-id1005 . 1) (undo-tree-id1006 . -13) (undo-tree-id1007 . -12) (undo-tree-id1008 . 12) (1941 . 1954) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 5 (fontified nil) 5 10 (fontified nil) 10 11 (face (rainbow-delimiters-depth-3-face) fontified nil) 11 12 (face (rainbow-delimiters-depth-3-face) fontified nil) 12 13 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1941) (undo-tree-id1009 . -5) (undo-tree-id1010 . -5) (undo-tree-id1011 . -5) (undo-tree-id1012 . 12) (1968 . 1981) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 5 (fontified nil) 5 10 (fontified nil) 10 11 (face (rainbow-delimiters-depth-3-face) fontified nil) 11 12 (face (rainbow-delimiters-depth-3-face) fontified nil) 12 13 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1968) (undo-tree-id1013 . -5) (undo-tree-id1014 . -5) (undo-tree-id1015 . -5) (undo-tree-id1016 . 12) (1996 . 2009) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 5 (fontified t) 5 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t) 11 12 (face (rainbow-delimiters-depth-3-face) fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1996) (undo-tree-id1017 . -5) (undo-tree-id1018 . -5) (undo-tree-id1019 . -5) (undo-tree-id1020 . 12) (2477 . 2490) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2477) (2981 . 2994) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2981) (3199 . 3212) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3199) (3422 . 3435) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3422) (3647 . 3660) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3647) (3892 . 3905) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3892) (4117 . 4130) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4117) (4347 . 4360) (#("(devs.keys())" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-4-face)) 11 12 (fontified t face (rainbow-delimiters-depth-4-face)) 12 13 (fontified t face (rainbow-delimiters-depth-3-face))) . 4347) (4569 . 4582) (#("(devs.keys())" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4569)) (25593 64390 845950 541000) 0 nil])
([nil nil ((2912 . 2918) (2911 . 2913) (#("'" 0 1 (fontified nil)) . -2911) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (2911 . 2912) (2910 . 2912) (#("[" 0 1 (fontified nil)) . -2910) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (2910 . 2911)) nil (25593 64479 786704 394000) 0 nil] [nil nil ((2913 . 2919) (2912 . 2914) (#("'" 0 1 (fontified nil)) . -2912) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (2912 . 2913) (2911 . 2913) (#("[" 0 1 (fontified nil)) . -2911) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (2911 . 2912)) ((#("[" 0 1 (fontified nil)) . 2911) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (2911 . 2912) (#("[]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2911) (undo-tree-id1716 . 1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . 1) (undo-tree-id1725 . -1) (undo-tree-id1726 . 1) (undo-tree-id1727 . -1) (undo-tree-id1728 . 1) (undo-tree-id1729 . -1) (undo-tree-id1730 . 1) (#("'" 0 1 (fontified nil)) . 2912) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (2912 . 2913) (#("''" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil)) . 2912) (undo-tree-id1733 . 1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . 1) (#("DEVICE" 0 6 (face font-lock-string-face fontified t)) . 2913) (undo-tree-id1739 . -5) (undo-tree-id1740 . -5) (undo-tree-id1741 . -5)) (25593 64441 126224 219000) 0 nil])
([nil nil ((#("list(" 0 4 (face font-lock-builtin-face fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1908) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) (undo-tree-id978 . -4) (undo-tree-id979 . -4) (undo-tree-id980 . 1) (undo-tree-id981 . -5) 1912) ((1908 . 1913)) (25593 64390 677542 774000) 0 nil])
([nil nil ((3127 . 3133) (3126 . 3128) (#("'" 0 1 (fontified nil)) . -3126) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (3126 . 3127) (3125 . 3127) (#("[" 0 1 (fontified nil)) . -3125) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (3125 . 3126)) nil (25593 64479 786700 790000) 0 nil])
nil
([nil nil ((#(".keys())" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1912) (undo-tree-id968 . -7) (undo-tree-id969 . -7) (undo-tree-id970 . -7) (undo-tree-id971 . -7) (undo-tree-id972 . -7) (undo-tree-id973 . 1) (undo-tree-id974 . -8) 1919) ((1912 . 1920)) (25593 64390 498486 150000) 0 nil])
([nil nil ((3347 . 3353) (3346 . 3348) (#("'" 0 1 (fontified nil)) . -3346) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (3346 . 3347) (3345 . 3347) (#("[" 0 1 (fontified nil)) . -3345) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (3345 . 3346)) nil (25593 64479 786697 619000) 0 nil])
([nil nil ((#("list(" 0 4 (face font-lock-builtin-face fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1924) (undo-tree-id967 . -4)) ((1924 . 1929)) (25593 64390 346485 602000) 0 nil])
([nil nil ((3569 . 3575) (3568 . 3570) (#("'" 0 1 (fontified nil)) . -3568) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (3568 . 3569) (3567 . 3569) (#("[" 0 1 (fontified nil)) . -3567) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (3567 . 3568)) nil (25593 64479 786693 891000) 0 nil])
([nil nil ((#(".keys())" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1928) (undo-tree-id966 . -7)) ((1928 . 1936)) (25593 64390 173520 589000) 0 nil])
([nil nil ((3811 . 3817) (3810 . 3812) (#("'" 0 1 (fontified nil)) . -3810) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (3810 . 3811) (3809 . 3811) (#("[" 0 1 (fontified nil)) . -3809) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (3809 . 3810)) nil (25593 64479 786690 408000) 0 nil])
([nil nil ((#("list(" 0 4 (face font-lock-builtin-face fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1938) (undo-tree-id965 . -4)) ((1938 . 1943)) (25593 64389 920595 106000) 0 nil])
([nil nil ((4033 . 4039) (4032 . 4034) (#("'" 0 1 (fontified nil)) . -4032) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (4032 . 4033) (4031 . 4033) (#("[" 0 1 (fontified nil)) . -4031) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (4031 . 4032)) nil (25593 64479 786686 37000) 0 nil])
([nil nil ((#(".keys())" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1942) (undo-tree-id964 . -7)) ((1942 . 1950)) (25593 64389 612512 936000) 0 nil])
([nil nil ((4260 . 4266) (4259 . 4261) (#("'" 0 1 (fontified nil)) . -4259) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (4259 . 4260) (4258 . 4260) (#("[" 0 1 (fontified nil)) . -4258) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (4258 . 4259)) nil (25593 64479 786681 835000) 0 nil])
([nil nil ((#("list(" 0 4 (face font-lock-builtin-face fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1953) (undo-tree-id963 . -4)) ((1953 . 1958)) (25593 64389 444501 446000) 0 nil])
([nil nil ((4479 . 4485) (4478 . 4480) (#("'" 0 1 (fontified nil)) . -4478) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (4478 . 4479) (4477 . 4479) (#("[" 0 1 (fontified nil)) . -4477) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (4477 . 4478)) nil (25593 64479 786675 248000) 0 nil])
([nil nil ((#(".keys())" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1957) (undo-tree-id962 . -7)) ((1957 . 1965)) (25593 64389 199692 889000) 0 nil])
([nil nil ((4626 . 4632) (#("std" 0 3 (fontified t)) . -4626) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -2) (undo-tree-id1782 . -2) (undo-tree-id1783 . -2) (undo-tree-id1784 . -2) (undo-tree-id1785 . -2) (undo-tree-id1786 . -2) (undo-tree-id1787 . -2) (undo-tree-id1788 . -2) (undo-tree-id1789 . -2) (undo-tree-id1790 . -2) (undo-tree-id1791 . -2) (undo-tree-id1792 . -2) (undo-tree-id1793 . -2) (undo-tree-id1794 . -2) (undo-tree-id1795 . -2) (undo-tree-id1796 . -2) (undo-tree-id1797 . -2) (undo-tree-id1798 . -2) (undo-tree-id1799 . -2) (undo-tree-id1800 . -2) (undo-tree-id1801 . -2) (undo-tree-id1802 . -2) (undo-tree-id1803 . -2) (undo-tree-id1804 . -2) (undo-tree-id1805 . -2) (undo-tree-id1806 . -2) (undo-tree-id1807 . -2) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -2) (undo-tree-id1811 . -2) (undo-tree-id1812 . -2) (undo-tree-id1813 . -2) (undo-tree-id1814 . -2) (undo-tree-id1815 . -2) (undo-tree-id1816 . -2) (undo-tree-id1817 . -3) (undo-tree-id1818 . -3) (undo-tree-id1819 . -3) 4629 (4628 . 4629) (#("r" 0 1 (face font-lock-builtin-face fontified t)) . -4628) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (#("d" 0 1 (fontified t)) . -4629) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (#("o" 0 1 (fontified t)) . -4630) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (#("u" 0 1 (fontified t)) . -4631) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (#("t" 0 1 (fontified t)) . -4632) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) 4633 (4625 . 4633) (t 25593 64479 792251 400000)) nil (25593 64494 996603 444000) 0 nil])
([nil nil ((#("list(" 0 4 (face font-lock-builtin-face fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1198) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (undo-tree-id958 . -4) (undo-tree-id959 . -4) (undo-tree-id960 . 1) (undo-tree-id961 . -5) 1202) ((1198 . 1203)) (25593 64388 833780 744000) 0 nil])
([nil nil ((1334 . 1338) (1333 . 1335) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1333) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (1328 . 1334) (1324 . 1328) (#("    " 0 4 (fontified t)) . -1324) (undo-tree-id1904 . -4) (undo-tree-id1905 . -4) (undo-tree-id1906 . -4) (undo-tree-id1907 . -4) (undo-tree-id1908 . -4) (undo-tree-id1909 . -4) (undo-tree-id1910 . -4) (undo-tree-id1911 . -4) (undo-tree-id1912 . -4) (undo-tree-id1913 . -4) 1328 (1323 . 1328) (t 25593 64495 2251 604000) 1322) nil (25593 64555 696336 305000) 0 nil])
([nil nil ((#(".keys())" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t) 7 8 (face (rainbow-delimiters-unmatched-face) fontified t)) . 1202) (undo-tree-id950 . -7) (undo-tree-id951 . -1) (undo-tree-id952 . -7) (undo-tree-id953 . -8) (undo-tree-id954 . -8)) ((1202 . 1210) (t 25593 64355 712249 710000)) (25593 64355 706468 39000) 0 nil])
([nil nil ((#("    print(devs)
" 0 4 (fontified t) 4 9 (face font-lock-builtin-face fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 16 (fontified t)) . 1324) (undo-tree-id1974 . -15) (undo-tree-id1975 . 2) (undo-tree-id1976 . -16) (undo-tree-id1977 . -13) (undo-tree-id1978 . -13) 1337 (t 25593 64555 702252 450000)) nil (25593 64637 230977 253000) 0 nil])
nil
([nil nil ((1340 . 1342) (#("(" 0 1 (fontified nil)) . -1340) (1335 . 1341) (1328 . 1335) (1324 . 1328) (1324 . 1325) 1337) nil (25593 64637 230973 363000) 0 nil])
([nil nil ((1343 . 1344) (1331 . 1332)) nil (25593 64637 230972 607000) 0 nil])
([nil nil ((1331 . 1335)) nil (25593 64637 230972 126000) 0 nil])
([nil nil ((1349 . 1350) (1348 . 1350) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1348) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (1348 . 1349)) nil (25593 64637 230971 610000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -1362) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) 1363 (1356 . 1363) (1355 . 1357) (#("'" 0 1 (fontified nil)) . -1355) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (1351 . 1356)) nil (25593 64637 230969 359000) 0 nil])
([nil nil ((1363 . 1364)) nil (25593 64637 230964 950000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1373) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) 1374 (1373 . 1374) (1364 . 1373) 1363) nil (25593 64637 230964 341000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1372 . 1373) (#("
" 0 1 (fontified nil)) . -1424) (1364 . 1425) 1331) nil (25593 64637 230961 450000) 0 nil])
([nil nil ((1433 . 1439) (1424 . 1433) 1373) nil (25593 64637 230960 449000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 1440) (undo-tree-id1914 . 1) (undo-tree-id1915 . -8) (undo-tree-id1916 . -7) (undo-tree-id1917 . 1) (undo-tree-id1918 . 1) (undo-tree-id1919 . -8) (undo-tree-id1920 . -8) (undo-tree-id1921 . -8) (undo-tree-id1922 . -8) (undo-tree-id1923 . -8) (undo-tree-id1924 . -8) (undo-tree-id1925 . -8) (undo-tree-id1926 . -8) (undo-tree-id1927 . -8) (undo-tree-id1928 . -8) (undo-tree-id1929 . -8) (undo-tree-id1930 . -8) (undo-tree-id1931 . 1) (undo-tree-id1932 . -8) (undo-tree-id1933 . -8) (undo-tree-id1934 . -8) (undo-tree-id1935 . -8) (undo-tree-id1936 . 1) (undo-tree-id1937 . -8) (undo-tree-id1938 . -8) (undo-tree-id1939 . -7) (undo-tree-id1940 . -7) (undo-tree-id1941 . -7) (undo-tree-id1942 . -7) (undo-tree-id1943 . -7) (undo-tree-id1944 . -7) (undo-tree-id1945 . -7) (undo-tree-id1946 . -7) (undo-tree-id1947 . -7) (undo-tree-id1948 . -7) (undo-tree-id1949 . -7) (undo-tree-id1950 . -7) (undo-tree-id1951 . -7) (undo-tree-id1952 . -7) (undo-tree-id1953 . -7) (undo-tree-id1954 . -7) (undo-tree-id1955 . -7) (undo-tree-id1956 . -7) (undo-tree-id1957 . -7) (undo-tree-id1958 . -7) (undo-tree-id1959 . -9) 1447) nil (25593 64637 230956 280000) 0 nil])
([nil nil ((2634 . 2635) (2597 . 2598) 2632 (t 25593 64637 242253 557000)) nil (25593 64755 417420 328000) 0 nil])
([nil nil ((2886 . 2887) (2864 . 2865) 2884) nil (25593 64755 417419 400000) 0 nil])
([nil nil ((3119 . 3120) (3097 . 3098) 3117) nil (25593 64755 417418 751000) 0 nil])
([nil nil ((3337 . 3338) (3315 . 3316) 3335) nil (25593 64755 417418 207000) 0 nil])
([nil nil ((3560 . 3561) (3538 . 3539) 3558) nil (25593 64755 417417 598000) 0 nil])
([nil nil ((3785 . 3786) (3763 . 3764) 3783) nil (25593 64755 417416 920000) 0 nil])
([nil nil ((4029 . 4030) (4007 . 4008) 4027) nil (25593 64755 417416 296000) 0 nil])
([nil nil ((4250 . 4251) (4228 . 4229) 4248) nil (25593 64755 417415 525000) 0 nil])
([nil nil ((4481 . 4482) (4459 . 4460) 4479) nil (25593 64755 417414 622000) 0 nil])
([nil nil ((4703 . 4704) (4681 . 4682) 4701) nil (25593 64755 417410 886000) 0 nil])
([nil nil ((1863 . 1864) (t 25593 64755 428921 827000)) nil (25593 64971 370166 237000) 0 nil])
([nil nil ((1902 . 1903) (#("r" 0 1 (face font-lock-string-face fontified t)) . 1902) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (t 25593 64971 378924 747000)) nil (25593 65001 254558 753000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 4301) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (t 25593 65001 262258 489000)) nil (25593 65074 282995 42000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 4301) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . 1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1)) nil (25593 65074 282992 348000) 0 nil])
([nil nil ((4301 . 4303) (#("u" 0 1 (fontified t)) . -4301) (undo-tree-id2038 . -1) (#("i" 0 1 (fontified t)) . -4302) (undo-tree-id2039 . -1) 4303 (4301 . 4303) (#("n" 0 1 (fontified t)) . -4301) (undo-tree-id2040 . -1) 4302 (4301 . 4302)) nil (25593 65074 282989 289000) 0 nil])
([nil nil ((4329 . 4330) (4304 . 4305) 4327) nil (25593 65074 282986 432000) 0 nil])
([nil nil ((4337 . 4341) (#("d" 0 1 (face font-lock-string-face fontified t)) . -4337) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -4338) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -4339) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -4340) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) 4341 (4332 . 4341) (4331 . 4333) (#("'" 0 1 (fontified nil)) . -4331) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (4329 . 4332)) nil (25593 65074 282982 575000) 0 nil])
([nil nil ((1857 . 1870) (t 25593 65074 288926 144000)) nil (25594 12553 683692 598000) 0 nil])
([nil nil ((1868 . 1870)) nil (25594 12553 683688 527000) 0 nil])
([nil nil ((1890 . 1894) (#("right" 0 5 (face font-lock-string-face fontified t)) . 1890) (undo-tree-id2050 . -4) (undo-tree-id2051 . -5) (undo-tree-id2052 . -5) (undo-tree-id2053 . -5) (undo-tree-id2054 . -4) (undo-tree-id2055 . -4) (undo-tree-id2056 . -3) (undo-tree-id2057 . -3) (undo-tree-id2058 . -2) (undo-tree-id2059 . -2) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -5) (undo-tree-id2063 . -5) (t 25594 12553 692445 952000)) nil (25594 12572 804624 427000) 0 nil])
([nil nil ((1868 . 1869) (#("5" 0 1 (face font-lock-string-face fontified t)) . 1868) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (t 25594 12572 812446 238000)) nil (25594 14285 503455 177000) 0 nil])
([nil nil ((#("(eventbox :onhover `${{EWW_CMD}} update int{int_idx}_revealer=true` :onhoverlost `${{EWW_CMD}} update int{int_idx}_revealer=false` " 0 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t) 10 19 (face font-lock-string-face fontified t) 19 21 (face font-lock-string-face fontified t) 21 22 (face font-lock-string-face fontified t) 22 30 (face font-lock-string-face fontified t) 30 32 (face font-lock-string-face fontified t) 32 43 (face font-lock-string-face fontified t) 43 51 (face font-lock-string-face fontified t) 51 66 (face font-lock-string-face fontified t) 66 80 (face font-lock-string-face fontified t) 80 81 (face font-lock-string-face fontified t) 81 129 (face font-lock-string-face fontified t) 129 130 (face font-lock-string-face fontified t rear-nonsticky t) 130 131 (face font-lock-string-face fontified t)) . 1605) (undo-tree-id2285 . -130) (undo-tree-id2286 . -130) (undo-tree-id2287 . -130) (undo-tree-id2288 . -130) (undo-tree-id2289 . -130) 1735 (t 25594 12600 999113 323000)) nil (25594 14375 787087 243000) 0 nil] [nil nil ((#(":onhover `${{EWW_CMD}} update int{int_idx}_revealer=true` :onhoverlost `${{EWW_CMD}} update int{int_idx}_revealer=false` " 0 9 (face font-lock-string-face fontified t) 9 11 (face font-lock-string-face fontified t) 11 12 (face font-lock-string-face fontified t) 12 20 (face font-lock-string-face fontified t) 20 22 (face font-lock-string-face fontified t) 22 33 (face font-lock-string-face fontified t) 33 41 (face font-lock-string-face fontified t) 41 56 (face font-lock-string-face fontified t) 56 70 (face font-lock-string-face fontified t) 70 71 (face font-lock-string-face fontified t) 71 119 (face font-lock-string-face fontified t) 119 120 (face font-lock-string-face fontified t rear-nonsticky t) 120 121 (face font-lock-string-face fontified t)) . 1615) (undo-tree-id2168 . -120) (undo-tree-id2169 . -120) (undo-tree-id2170 . -120) (undo-tree-id2171 . -120) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -121) (undo-tree-id2183 . -120) (undo-tree-id2184 . -7) (undo-tree-id2185 . -7) (undo-tree-id2186 . -21) (undo-tree-id2187 . -21) (undo-tree-id2188 . -28) (undo-tree-id2189 . -28) (undo-tree-id2190 . -56) (undo-tree-id2191 . -56) (undo-tree-id2192 . -69) (undo-tree-id2193 . -69) (undo-tree-id2194 . -83) (undo-tree-id2195 . -83) (undo-tree-id2196 . -90) (undo-tree-id2197 . -90) (undo-tree-id2198 . -119) (undo-tree-id2199 . -119) (undo-tree-id2200 . -120) (undo-tree-id2201 . -120) (undo-tree-id2202 . -120) (undo-tree-id2203 . -121) 1735 (t 25594 12600 999113 323000)) ((1615 . 1736)) (25594 14284 797130 151000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t)) . 1807) (undo-tree-id2283 . 1) (undo-tree-id2284 . -1)) nil (25594 14375 787083 858000) 0 nil])
([nil nil ((#("(eventbox " 0 10 (face font-lock-string-face fontified t)) . 1605) (undo-tree-id2067 . -9) (undo-tree-id2068 . -9) (undo-tree-id2069 . -9) (undo-tree-id2070 . -9) (undo-tree-id2071 . -10) (undo-tree-id2072 . -10) (undo-tree-id2073 . -10) (undo-tree-id2074 . -10) (undo-tree-id2075 . -10) (undo-tree-id2076 . -10) (undo-tree-id2077 . -10) (undo-tree-id2078 . -10) (undo-tree-id2079 . -10) (undo-tree-id2080 . -10) (undo-tree-id2081 . -10) (undo-tree-id2082 . -10) (undo-tree-id2083 . -9) (undo-tree-id2084 . -9) (undo-tree-id2085 . -8) (undo-tree-id2086 . -8) (undo-tree-id2087 . -7) (undo-tree-id2088 . -7) (undo-tree-id2089 . -6) (undo-tree-id2090 . -6) (undo-tree-id2091 . -7) (undo-tree-id2092 . -7) (undo-tree-id2093 . -8) (undo-tree-id2094 . -8) (undo-tree-id2095 . -9) (undo-tree-id2096 . -9) (undo-tree-id2097 . -10) (undo-tree-id2098 . -10) (undo-tree-id2099 . -10) (undo-tree-id2100 . -10) (undo-tree-id2101 . -10) (undo-tree-id2102 . -10) (undo-tree-id2103 . -10) (undo-tree-id2104 . -10) (undo-tree-id2105 . -10) (undo-tree-id2106 . -10) (undo-tree-id2107 . -10) (undo-tree-id2108 . -10) (undo-tree-id2109 . -10) (undo-tree-id2110 . -10) (undo-tree-id2111 . -10) (undo-tree-id2112 . -10) (undo-tree-id2113 . -10) (undo-tree-id2114 . -10) (undo-tree-id2115 . -10) (undo-tree-id2116 . -10) (undo-tree-id2117 . -10) (undo-tree-id2118 . -10) (undo-tree-id2119 . -10) (undo-tree-id2120 . -10) (undo-tree-id2121 . -10) (undo-tree-id2122 . -10) (undo-tree-id2123 . -10) (undo-tree-id2124 . -9) (undo-tree-id2125 . -9) (undo-tree-id2126 . -9) (undo-tree-id2127 . -9) (undo-tree-id2128 . -9) (undo-tree-id2129 . -9) (undo-tree-id2130 . -10) (undo-tree-id2131 . -10) (undo-tree-id2132 . -10) (undo-tree-id2133 . -10) (undo-tree-id2134 . -9) (undo-tree-id2135 . -9) (undo-tree-id2136 . -10) (undo-tree-id2137 . -10) (undo-tree-id2138 . -10) (undo-tree-id2139 . -9) (undo-tree-id2140 . -9) (undo-tree-id2141 . -9) (undo-tree-id2142 . -9) (undo-tree-id2143 . -9) (undo-tree-id2144 . -8) (undo-tree-id2145 . -8) (undo-tree-id2146 . -7) (undo-tree-id2147 . -7) (undo-tree-id2148 . -6) (undo-tree-id2149 . -6) (undo-tree-id2150 . -5) (undo-tree-id2151 . -5) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) (undo-tree-id2154 . -3) (undo-tree-id2155 . -3) (undo-tree-id2156 . -2) (undo-tree-id2157 . -2) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -10) (undo-tree-id2161 . -9) (undo-tree-id2162 . -8) (undo-tree-id2163 . -8) (undo-tree-id2164 . -9) (undo-tree-id2165 . -9) (undo-tree-id2166 . -9) (undo-tree-id2167 . -10) 1614) ((1605 . 1615)) (25594 14284 796366 427000) 0 nil])
([nil nil ((1651 . 1659) (1650 . 1652) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1650) (1641 . 1651)) nil (25594 14375 787081 121000) 0 nil])
nil
([nil nil ((1660 . 1661)) nil (25594 14375 787080 67000) 0 nil])
([nil nil ((1661 . 1662) (1650 . 1651)) nil (25594 14375 787079 409000) 0 nil])
([nil nil ((#("(revealer :reveal int{int_idx}_revealer :duration \"2s\" :transition \"slideleft\" (label :class \"dimmed\" :text {dev_info}))" 0 21 (face font-lock-string-face fontified t) 21 29 (face font-lock-string-face fontified t) 29 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t) 52 79 (face font-lock-string-face fontified t) 79 99 (face font-lock-string-face fontified t) 99 100 (face font-lock-string-face fontified t) 100 108 (face font-lock-string-face fontified t) 108 117 (face font-lock-string-face fontified t) 117 118 (face font-lock-string-face fontified t) 118 119 (face font-lock-string-face fontified t) 119 120 (face font-lock-string-face fontified t)) . 1708) (undo-tree-id2265 . -119) (undo-tree-id2266 . -119) (undo-tree-id2267 . -119) (undo-tree-id2268 . -51) (undo-tree-id2269 . -119) (undo-tree-id2270 . -10) (undo-tree-id2271 . -120) (undo-tree-id2272 . -119) (undo-tree-id2273 . -120) (undo-tree-id2274 . 1) (undo-tree-id2275 . -120) (undo-tree-id2276 . 120) (undo-tree-id2277 . -1) (undo-tree-id2278 . -120) (undo-tree-id2279 . -119) (undo-tree-id2280 . -119) (undo-tree-id2281 . -119) (undo-tree-id2282 . -120) 1827) nil (25594 14375 787078 55000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 1707) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1)) nil (25594 14375 787066 107000) 0 nil])
([nil nil ((1680 . 1687) (1679 . 1681) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1679) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (1670 . 1680)) nil (25594 14375 787051 198000) 0 nil])
([nil nil ((1688 . 1689)) nil (25594 14375 786488 142000) 0 nil])
([nil nil ((1689 . 1690) (1679 . 1680)) nil (25594 14375 786487 615000) 0 nil])
([nil nil ((#("(box :space-evenly false :spacing 5 :tooltip \"{dev_info}\" " 0 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 55 (face font-lock-string-face fontified t) 55 56 (face font-lock-string-face fontified t) 56 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face fontified t)) . 1605) (undo-tree-id2214 . -57) (undo-tree-id2215 . -57) (undo-tree-id2216 . -57) (undo-tree-id2217 . -58) (undo-tree-id2218 . -58) (undo-tree-id2219 . -57) (undo-tree-id2220 . -57) (undo-tree-id2221 . -58) (undo-tree-id2222 . -57) (undo-tree-id2223 . -57) (undo-tree-id2224 . -57) (undo-tree-id2225 . -57) (undo-tree-id2226 . -55) (undo-tree-id2227 . -55) (undo-tree-id2228 . -45) (undo-tree-id2229 . -45) (undo-tree-id2230 . -36) (undo-tree-id2231 . -36) (undo-tree-id2232 . -34) (undo-tree-id2233 . -34) (undo-tree-id2234 . -25) (undo-tree-id2235 . -25) (undo-tree-id2236 . -19) (undo-tree-id2237 . -19) (undo-tree-id2238 . -5) (undo-tree-id2239 . -5) (undo-tree-id2240 . 58) (undo-tree-id2241 . -1) (undo-tree-id2242 . -58)) nil (25594 14375 786485 934000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t)) . 1670) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . 1) (undo-tree-id2207 . 1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . 1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1)) nil (25594 14375 786463 345000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t)) . -1627) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . 1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) 1628 (1626 . 1628) (t 25594 14375 795806 175000)) nil (25594 14404 497651 632000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 1621) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (t 25594 14404 505806 605000)) nil (25594 14436 306331 651000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 1631) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1)) nil (25594 14436 306325 847000) 0 nil])
([nil nil ((2019 . 2023) (2007 . 2019) (2007 . 2008) 2080 (t 25594 14436 315807 76000)) nil (25778 29588 777250 422000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -2040) (undo-tree-id9 . -12) (undo-tree-id10 . -12) (undo-tree-id11 . -12) (undo-tree-id12 . -12) (undo-tree-id13 . -12) (undo-tree-id14 . -12) (undo-tree-id15 . -12) (undo-tree-id16 . -12) (undo-tree-id17 . -12) (undo-tree-id18 . -12) (undo-tree-id19 . 12) (2024 . 2040) 2039) nil (25778 29588 777249 88000) 0 nil])
([nil nil ((2137 . 2143) (#(" " 0 1 (fontified t)) . -2137) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 2138 (2131 . 2138) (#(" " 0 1 (fontified t)) . -2131) (undo-tree-id5 . -1) 2132 (2128 . 2132) (#("p" 0 1 (fontified t)) . -2128) (undo-tree-id6 . -1) (#("e" 0 1 (fontified t)) . -2129) (undo-tree-id7 . -1) 2130 (2125 . 2130) (#("    " 0 4 (fontified t)) . -2125) (undo-tree-id8 . -4) 2129 (2112 . 2129) 2039) nil (25778 29588 777176 168000) 0 nil])
([nil nil ((2164 . 2177) (2160 . 2164) (2143 . 2160) 2142) nil (25778 29588 777146 180000) 0 nil])
([nil current ((1897 . 1901) (1896 . 1898) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1896) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (1896 . 1897) (1895 . 1897) (#("(" 0 1 (fontified nil)) . -1895) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (1891 . 1896) (#("_" 0 1 (fontified t)) . -1891) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 1892 (1872 . 1892) (t 25778 29588 801998 60000)) nil (25778 29630 681748 686000) 0 nil])
nil
