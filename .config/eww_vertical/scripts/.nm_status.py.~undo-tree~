(undo-tree-save-format-version . 1)
"064405dc8c9b47e7ac5f4b66cb42585c85146c1d"
[nil nil nil nil (25593 1740 418418 300000) 0 nil]
([nil nil ((1 . 23) (t . -1)) nil (25593 1740 418417 644000) 0 nil])
([nil nil ((23 . 24) (22 . 23) 21) nil (25593 1740 418417 177000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28 . 29) (#("
" 0 1 (fontified nil)) . -2854) (24 . 2855)) nil (25593 1740 418416 716000) 0 nil])
([nil nil ((#("                             " 0 29 (fontified nil)) . -2619) (2591 . 2619) (#("            " 0 12 (fontified nil)) . -2504) (2496 . 2504) (#("            " 0 12 (fontified nil)) . -2446) (2438 . 2446) (#("            " 0 12 (fontified nil)) . -2408) (2400 . 2408) (#("        " 0 8 (fontified nil)) . -2365) (2361 . 2365) (#("            " 0 12 (fontified nil)) . -2263) (2255 . 2263) (#("            " 0 12 (fontified nil)) . -2225) (2217 . 2225) (#("        " 0 8 (fontified nil)) . -2184) (2180 . 2184) (#("                " 0 16 (fontified nil)) . -2157) (2145 . 2157) (#("                " 0 16 (fontified nil)) . -2079) (2067 . 2079) (#("            " 0 12 (fontified nil)) . -2049) (2041 . 2049) (#("        " 0 8 (fontified nil)) . -2018) (2014 . 2018) (#("    " 0 4 (fontified t)) . -1988) (#("        " 0 8 (fontified nil)) . -1964) (1960 . 1964) (#("            " 0 12 (fontified nil)) . -1942) (1934 . 1942) (#("                " 0 16 (fontified nil)) . -1891) (1879 . 1891) (#("            " 0 12 (fontified nil)) . -1821) (1813 . 1821) (#("                " 0 16 (fontified nil)) . -1770) (1758 . 1770) (#("            " 0 12 (fontified nil)) . -1680) (1672 . 1680) (#("                " 0 16 (fontified nil)) . -1623) (1611 . 1623) (#("            " 0 12 (fontified nil)) . -1552) (1544 . 1552) (#("                " 0 16 (fontified nil)) . -1502) (1490 . 1502) (#("            " 0 12 (fontified nil)) . -1432) (1424 . 1432) (#("                " 0 16 (fontified nil)) . -1381) (1369 . 1381) (#("            " 0 12 (fontified nil)) . -1315) (1307 . 1315) (#("                " 0 16 (fontified nil)) . -1267) (1255 . 1267) (#("            " 0 12 (fontified nil)) . -1185) (1177 . 1185) (#("                " 0 16 (fontified nil)) . -1134) (1122 . 1134) (#("            " 0 12 (fontified nil)) . -1065) (1057 . 1065) (#("                " 0 16 (fontified nil)) . -1040) (1028 . 1040) (#("                " 0 16 (fontified nil)) . -1010) (998 . 1010) (#("                " 0 16 (fontified nil)) . -956) (944 . 956) (#("                " 0 16 (fontified nil)) . -905) (893 . 905) (#("                " 0 16 (fontified nil)) . -832) (820 . 832) (#("                " 0 16 (fontified nil)) . -773) (761 . 773) (#("            " 0 12 (fontified nil)) . -709) (701 . 709) (#("            " 0 12 (fontified nil)) . -660) (652 . 660) (#("                " 0 16 (fontified nil)) . -643) (631 . 643) (#("            " 0 12 (fontified nil)) . -582) (574 . 582) (#("                " 0 16 (fontified nil)) . -508) (496 . 508) (#("        " 0 8 (fontified nil)) . -445) (441 . 445) (#("        " 0 8 (fontified nil)) . -416) (412 . 416) (#("            " 0 12 (fontified nil)) . -399) (391 . 399) (#("        " 0 8 (fontified nil)) . -372) (368 . 372) (#("            " 0 12 (fontified nil)) . -335) (327 . 335) (#("        " 0 8 (fontified nil)) . -322) (318 . 322) (#("    " 0 4 (fontified t)) . -300) (#("        " 0 8 (fontified nil)) . -273) (269 . 273) (#("        " 0 8 (fontified nil)) . -242) (238 . 242) (#("        " 0 8 (fontified nil)) . -179) (175 . 179) (#("    " 0 4 (fontified t)) . -138) (#("        " 0 8 (fontified nil)) . -106) (102 . 106) (#("        " 0 8 (fontified nil)) . -59) (55 . 59) (#("    " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t)) . -25) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) 2855) nil (25593 1740 418411 559000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23 . 24) (#("
" 0 1 (fontified nil)) . -783) (23 . 784)) nil (25593 1740 418404 688000) 0 nil])
([nil nil ((24 . 25) (23 . 24) 23) nil (25593 1740 418404 226000) 0 nil])
([nil nil ((46 . 47) (41 . 46) (31 . 41) (#("subpro" 0 6 (fontified t)) . -31) (undo-tree-id745 . -6) (undo-tree-id746 . -6) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -2) (undo-tree-id751 . -2) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (undo-tree-id756 . -2) (undo-tree-id757 . -2) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -3) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3) (undo-tree-id766 . -3) (undo-tree-id767 . -3) (undo-tree-id768 . -3) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -5) (undo-tree-id776 . -5) (undo-tree-id777 . -5) (undo-tree-id778 . -5) (undo-tree-id779 . -5) (undo-tree-id780 . -5) (undo-tree-id781 . -6) (undo-tree-id782 . -6) (undo-tree-id783 . -6) (undo-tree-id784 . -6) (undo-tree-id785 . -6) (undo-tree-id786 . -6) 37 (24 . 37)) nil (25593 1740 418403 28000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 873 876 nil nil nil nil #s(yas--exit 877 nil))) #s(yas--exit 877 nil) 0 nil #s(yas--field 1 873 876 nil nil nil nil #s(yas--exit 877 nil)) nil nil)) (863 . 877) (#("getoutput" 0 9 (fontified nil)) . -863) (863 . 872) (#("get" 0 3 (fontified t)) . -863) (undo-tree-id720 . -3) (undo-tree-id721 . -3) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -2) (undo-tree-id729 . -2) (undo-tree-id730 . -2) (undo-tree-id731 . -2) (undo-tree-id732 . -2) (undo-tree-id733 . -2) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -3) 866 (860 . 866) (#("cmd_output" 0 10 (fontified t)) . 860) (undo-tree-id738 . -9) (undo-tree-id739 . -2) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -10) (undo-tree-id743 . -10) (undo-tree-id744 . -10)) nil (25593 1740 418383 661000) 0 nil])
([nil nil ((apply yas--snippet-revive 863 877 #s(yas--snippet nil (#s(yas--field 1 873 876 nil nil nil nil #s(yas--exit 877 nil))) #s(yas--exit 877 nil) 0 nil #s(yas--field 1 873 876 nil nil nil nil #s(yas--exit 877 nil)) nil nil))) nil (25593 1740 418355 947000) 0 nil])
([nil nil ((#("(cmd)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t)) . 872) (undo-tree-id701 . 4) (undo-tree-id702 . -4) (undo-tree-id703 . -4) (undo-tree-id704 . -4) (undo-tree-id705 . -4) (undo-tree-id706 . -5) (undo-tree-id707 . -5) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . 1) (undo-tree-id711 . -5) (undo-tree-id712 . 5) (undo-tree-id713 . -1) (undo-tree-id714 . -5) (undo-tree-id715 . -4) (undo-tree-id716 . -4) (undo-tree-id717 . -4) (undo-tree-id718 . -4) (undo-tree-id719 . -5) 876) nil (25593 1740 418355 228000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1052) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (apply yas--snippet-revive 1043 1053 #s(yas--snippet nil (#s(yas--field 1 1053 1053 nil nil nil t #s(yas--exit 1053 nil))) #s(yas--exit 1053 nil) 1 nil #s(yas--field 1 1053 1053 nil nil nil t #s(yas--exit 1053 nil)) nil nil)) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1053) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . 1) (undo-tree-id633 . -1) (undo-tree-id634 . 1) (undo-tree-id635 . 1) (#("cmd" 0 3 (fontified t)) . 1053) (undo-tree-id636 . -3) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1053 1053 nil nil nil t #s(yas--exit 1053 nil))) #s(yas--exit 1053 nil) 1 nil #s(yas--field 1 1053 1053 nil nil nil t #s(yas--exit 1053 nil)) nil nil)) (1043 . 1057) (#("getoutput" 0 9 (fontified nil)) . -1043) (1043 . 1052) (#("getout" 0 6 (fontified t)) . -1043) (undo-tree-id637 . -6) (undo-tree-id638 . -6) (undo-tree-id639 . -3) (undo-tree-id640 . -4) (undo-tree-id641 . -4) (undo-tree-id642 . -4) (undo-tree-id643 . -4) (undo-tree-id644 . -4) (undo-tree-id645 . -5) (undo-tree-id646 . -5) (undo-tree-id647 . -5) (undo-tree-id648 . -5) (undo-tree-id649 . -5) (undo-tree-id650 . -5) (undo-tree-id651 . -6) (undo-tree-id652 . -6) (undo-tree-id653 . -6) (undo-tree-id654 . -6) (undo-tree-id655 . -6) (undo-tree-id656 . -6) (undo-tree-id657 . -6) (undo-tree-id658 . -6) (undo-tree-id659 . -6) (undo-tree-id660 . -6) 1049 (1046 . 1049) (#("p" 0 1 (fontified t)) . -1046) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("u" 0 1 (fontified t)) . -1047) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (#("t" 0 1 (fontified t)) . -1048) (undo-tree-id665 . -1) (undo-tree-id666 . -1) 1049 (1040 . 1049) (#("g" 0 1 (fontified t)) . -1040) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("e" 0 1 (fontified t)) . -1041) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (#("t" 0 1 (fontified t)) . -1042) (undo-tree-id671 . -1) (undo-tree-id672 . -1) 1043 (1040 . 1043) (#("cmd_output" 0 10 (fontified t)) . 1040) (undo-tree-id673 . -9) (undo-tree-id674 . -10) (undo-tree-id675 . -10) (undo-tree-id676 . -9) (undo-tree-id677 . -9) (undo-tree-id678 . -8) (undo-tree-id679 . -8) (undo-tree-id680 . -8) (undo-tree-id681 . -8) (undo-tree-id682 . -8) (undo-tree-id683 . -8) (undo-tree-id684 . -7) (undo-tree-id685 . -7) (undo-tree-id686 . -6) (undo-tree-id687 . -6) (undo-tree-id688 . -5) (undo-tree-id689 . -5) (undo-tree-id690 . -4) (undo-tree-id691 . -4) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -2) (undo-tree-id695 . -2) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -10) (undo-tree-id699 . -10) (undo-tree-id700 . -10)) nil (25593 1740 418344 569000) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 1131) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -5) (undo-tree-id610 . -4) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (undo-tree-id615 . -4) (undo-tree-id616 . -5) 1135) nil (25593 1740 418305 922000) 0 nil])
([nil nil ((#("def output(self):
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-function-name-face fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 18 (fontified t)) . 1089) (undo-tree-id588 . -17) (undo-tree-id589 . -15) (undo-tree-id590 . -16) (undo-tree-id591 . -16) (undo-tree-id592 . -17) (undo-tree-id593 . -17) (undo-tree-id594 . -17) (undo-tree-id595 . -15) (undo-tree-id596 . 3) (undo-tree-id597 . -16) (undo-tree-id598 . 8) (undo-tree-id599 . -11) (undo-tree-id600 . -15) (undo-tree-id601 . -15) (undo-tree-id602 . -15) (undo-tree-id603 . -15) (undo-tree-id604 . -18) 1104) nil (25593 1740 418300 737000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2598) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (#("        " 0 8 (fontified nil)) . -2580) (undo-tree-id48 . -8) (undo-tree-id49 . -8) (undo-tree-id50 . 8) (2576 . 2580) (#("            " 0 12 (fontified nil)) . -2533) (undo-tree-id51 . -12) (undo-tree-id52 . -12) (undo-tree-id53 . -12) (undo-tree-id54 . -12) (undo-tree-id55 . 12) (2525 . 2533) (#("        " 0 8 (fontified nil)) . -2467) (undo-tree-id56 . -8) (undo-tree-id57 . -8) (undo-tree-id58 . -8) (undo-tree-id59 . -8) (undo-tree-id60 . -8) (undo-tree-id61 . -8) (undo-tree-id62 . -8) (undo-tree-id63 . -8) (undo-tree-id64 . -8) (undo-tree-id65 . -8) (undo-tree-id66 . -8) (undo-tree-id67 . -8) (undo-tree-id68 . -8) (undo-tree-id69 . -8) (undo-tree-id70 . -8) (undo-tree-id71 . 8) (2463 . 2467) (#("            " 0 11 (fontified nil) 11 12 (fontified nil)) . -2420) (undo-tree-id72 . -12) (undo-tree-id73 . -12) (undo-tree-id74 . -12) (undo-tree-id75 . -12) (undo-tree-id76 . -12) (undo-tree-id77 . -12) (undo-tree-id78 . -12) (undo-tree-id79 . -12) (undo-tree-id80 . -12) (undo-tree-id81 . -12) (undo-tree-id82 . -12) (undo-tree-id83 . -12) (undo-tree-id84 . -12) (undo-tree-id85 . -12) (undo-tree-id86 . -12) (undo-tree-id87 . -12) (undo-tree-id88 . -12) (undo-tree-id89 . -12) (undo-tree-id90 . -12) (undo-tree-id91 . -12) (undo-tree-id92 . 12) (2412 . 2420) (#("        " 0 8 (fontified nil)) . -2334) (undo-tree-id93 . -8) (undo-tree-id94 . -8) (undo-tree-id95 . -8) (undo-tree-id96 . -8) (undo-tree-id97 . -8) (undo-tree-id98 . -8) (undo-tree-id99 . -8) (undo-tree-id100 . -8) (undo-tree-id101 . -8) (undo-tree-id102 . -8) (undo-tree-id103 . -8) (undo-tree-id104 . -8) (undo-tree-id105 . -8) (undo-tree-id106 . -8) (undo-tree-id107 . -8) (undo-tree-id108 . -8) (undo-tree-id109 . -8) (undo-tree-id110 . -8) (undo-tree-id111 . -8) (undo-tree-id112 . -8) (undo-tree-id113 . -8) (undo-tree-id114 . -8) (undo-tree-id115 . -8) (undo-tree-id116 . -8) (undo-tree-id117 . -8) (undo-tree-id118 . -8) (undo-tree-id119 . -8) (undo-tree-id120 . -8) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -8) (undo-tree-id124 . -8) (undo-tree-id125 . -8) (undo-tree-id126 . 8) (2330 . 2334) (#("            " 0 12 (fontified nil)) . -2281) (undo-tree-id127 . -12) (undo-tree-id128 . -12) (undo-tree-id129 . -12) (undo-tree-id130 . -12) (undo-tree-id131 . -12) (undo-tree-id132 . -12) (undo-tree-id133 . -12) (undo-tree-id134 . -12) (undo-tree-id135 . -12) (undo-tree-id136 . -12) (undo-tree-id137 . -12) (undo-tree-id138 . -12) (undo-tree-id139 . -12) (undo-tree-id140 . -12) (undo-tree-id141 . -12) (undo-tree-id142 . -12) (undo-tree-id143 . -12) (undo-tree-id144 . -12) (undo-tree-id145 . -12) (undo-tree-id146 . -12) (undo-tree-id147 . 12) (2273 . 2281) (#("        " 0 8 (fontified nil)) . -2214) (undo-tree-id148 . -8) (undo-tree-id149 . -8) (undo-tree-id150 . -8) (undo-tree-id151 . -8) (undo-tree-id152 . -8) (undo-tree-id153 . -8) (undo-tree-id154 . -8) (undo-tree-id155 . -8) (undo-tree-id156 . -8) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -8) (undo-tree-id161 . -8) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -8) (undo-tree-id169 . -8) (undo-tree-id170 . -8) (undo-tree-id171 . 8) (2210 . 2214) (#("            " 0 12 (fontified nil)) . -2168) (undo-tree-id172 . -12) (undo-tree-id173 . -12) (undo-tree-id174 . -12) (undo-tree-id175 . -12) (undo-tree-id176 . -12) (undo-tree-id177 . -12) (undo-tree-id178 . -12) (undo-tree-id179 . -12) (undo-tree-id180 . -12) (undo-tree-id181 . -12) (undo-tree-id182 . -12) (undo-tree-id183 . -12) (undo-tree-id184 . -12) (undo-tree-id185 . -12) (undo-tree-id186 . -12) (undo-tree-id187 . -12) (undo-tree-id188 . -12) (undo-tree-id189 . -12) (undo-tree-id190 . -12) (undo-tree-id191 . -12) (undo-tree-id192 . 12) (2160 . 2168) (#("        " 0 8 (fontified nil)) . -2102) (undo-tree-id193 . -8) (undo-tree-id194 . -8) (undo-tree-id195 . -8) (undo-tree-id196 . -8) (undo-tree-id197 . -8) (undo-tree-id198 . -8) (undo-tree-id199 . -8) (undo-tree-id200 . -8) (undo-tree-id201 . -8) (undo-tree-id202 . -8) (undo-tree-id203 . -8) (undo-tree-id204 . -8) (undo-tree-id205 . -8) (undo-tree-id206 . -8) (undo-tree-id207 . -8) (undo-tree-id208 . -8) (undo-tree-id209 . -8) (undo-tree-id210 . -8) (undo-tree-id211 . -8) (undo-tree-id212 . -8) (undo-tree-id213 . -8) (undo-tree-id214 . -8) (undo-tree-id215 . -8) (undo-tree-id216 . 8) (2098 . 2102) (#("            " 0 12 (fontified nil)) . -2055) (undo-tree-id217 . -12) (undo-tree-id218 . -12) (undo-tree-id219 . -12) (undo-tree-id220 . -12) (undo-tree-id221 . -12) (undo-tree-id222 . -12) (undo-tree-id223 . -12) (undo-tree-id224 . -12) (undo-tree-id225 . -12) (undo-tree-id226 . -12) (undo-tree-id227 . -12) (undo-tree-id228 . -12) (undo-tree-id229 . -12) (undo-tree-id230 . -12) (undo-tree-id231 . -12) (undo-tree-id232 . -12) (undo-tree-id233 . -12) (undo-tree-id234 . -12) (undo-tree-id235 . -12) (undo-tree-id236 . -12) (undo-tree-id237 . 12) (2047 . 2055) (#("        " 0 8 (fontified nil)) . -1993) (undo-tree-id238 . -8) (undo-tree-id239 . -8) (undo-tree-id240 . -8) (undo-tree-id241 . -8) (undo-tree-id242 . -8) (undo-tree-id243 . -8) (undo-tree-id244 . -8) (undo-tree-id245 . -8) (undo-tree-id246 . -8) (undo-tree-id247 . -8) (undo-tree-id248 . -8) (undo-tree-id249 . -8) (undo-tree-id250 . -8) (undo-tree-id251 . -8) (undo-tree-id252 . -8) (undo-tree-id253 . -8) (undo-tree-id254 . -8) (undo-tree-id255 . -8) (undo-tree-id256 . -8) (undo-tree-id257 . -8) (undo-tree-id258 . -8) (undo-tree-id259 . -8) (undo-tree-id260 . -8) (undo-tree-id261 . 8) (1989 . 1993) (#("            " 0 12 (fontified nil)) . -1949) (undo-tree-id262 . -12) (undo-tree-id263 . -12) (undo-tree-id264 . -12) (undo-tree-id265 . -12) (undo-tree-id266 . -12) (undo-tree-id267 . -12) (undo-tree-id268 . -12) (undo-tree-id269 . -12) (undo-tree-id270 . -12) (undo-tree-id271 . -12) (undo-tree-id272 . -12) (undo-tree-id273 . -12) (undo-tree-id274 . -12) (undo-tree-id275 . -12) (undo-tree-id276 . -12) (undo-tree-id277 . -12) (undo-tree-id278 . -12) (undo-tree-id279 . -12) (undo-tree-id280 . -12) (undo-tree-id281 . -12) (undo-tree-id282 . 12) (1941 . 1949) (#("        " 0 8 (fontified nil)) . -1871) (undo-tree-id283 . -8) (undo-tree-id284 . -8) (undo-tree-id285 . -8) (undo-tree-id286 . -8) (undo-tree-id287 . -8) (undo-tree-id288 . -8) (undo-tree-id289 . -8) (undo-tree-id290 . -8) (undo-tree-id291 . -8) (undo-tree-id292 . -8) (undo-tree-id293 . -8) (undo-tree-id294 . -8) (undo-tree-id295 . -8) (undo-tree-id296 . -8) (undo-tree-id297 . -8) (undo-tree-id298 . -8) (undo-tree-id299 . -8) (undo-tree-id300 . -8) (undo-tree-id301 . -8) (undo-tree-id302 . -8) (undo-tree-id303 . -8) (undo-tree-id304 . -8) (undo-tree-id305 . -8) (undo-tree-id306 . -8) (undo-tree-id307 . -8) (undo-tree-id308 . -8) (undo-tree-id309 . -8) (undo-tree-id310 . -8) (undo-tree-id311 . -8) (undo-tree-id312 . -8) (undo-tree-id313 . -8) (undo-tree-id314 . -8) (undo-tree-id315 . -8) (undo-tree-id316 . 8) (1867 . 1871) (#("            " 0 12 (fontified nil)) . -1824) (undo-tree-id317 . -12) (undo-tree-id318 . -12) (undo-tree-id319 . -12) (undo-tree-id320 . -12) (undo-tree-id321 . -12) (undo-tree-id322 . -12) (undo-tree-id323 . -12) (undo-tree-id324 . -12) (undo-tree-id325 . -12) (undo-tree-id326 . -12) (undo-tree-id327 . -12) (undo-tree-id328 . -12) (undo-tree-id329 . -12) (undo-tree-id330 . -12) (undo-tree-id331 . -12) (undo-tree-id332 . -12) (undo-tree-id333 . -12) (undo-tree-id334 . -12) (undo-tree-id335 . -12) (undo-tree-id336 . -12) (undo-tree-id337 . 12) (1816 . 1824) (#("        " 0 8 (fontified nil)) . -1759) (undo-tree-id338 . -8) (undo-tree-id339 . -8) (undo-tree-id340 . -8) (undo-tree-id341 . -8) (undo-tree-id342 . -8) (undo-tree-id343 . -8) (undo-tree-id344 . -8) (undo-tree-id345 . -8) (undo-tree-id346 . -8) (undo-tree-id347 . -8) (undo-tree-id348 . -8) (undo-tree-id349 . -8) (undo-tree-id350 . -8) (undo-tree-id351 . -8) (undo-tree-id352 . -8) (undo-tree-id353 . -8) (undo-tree-id354 . -8) (undo-tree-id355 . -8) (undo-tree-id356 . -8) (undo-tree-id357 . -8) (undo-tree-id358 . -8) (undo-tree-id359 . -8) (undo-tree-id360 . -8) (undo-tree-id361 . 8) (1755 . 1759) (#("            " 0 12 (fontified nil)) . -1738) (undo-tree-id362 . 12) (1730 . 1738) (#("            " 0 12 (fontified nil)) . -1712) (undo-tree-id363 . -12) (undo-tree-id364 . -12) (undo-tree-id365 . -12) (undo-tree-id366 . -12) (undo-tree-id367 . -12) (undo-tree-id368 . -12) (undo-tree-id369 . -12) (undo-tree-id370 . -12) (undo-tree-id371 . -12) (undo-tree-id372 . -12) (undo-tree-id373 . 12) (1704 . 1712) (#("            " 0 12 (fontified nil)) . -1662) (undo-tree-id374 . -12) (undo-tree-id375 . -12) (undo-tree-id376 . -12) (undo-tree-id377 . -12) (undo-tree-id378 . -12) (undo-tree-id379 . -12) (undo-tree-id380 . -12) (undo-tree-id381 . -12) (undo-tree-id382 . -12) (undo-tree-id383 . -12) (undo-tree-id384 . -12) (undo-tree-id385 . -12) (undo-tree-id386 . -12) (undo-tree-id387 . -12) (undo-tree-id388 . -12) (undo-tree-id389 . -12) (undo-tree-id390 . -12) (undo-tree-id391 . -12) (undo-tree-id392 . -12) (undo-tree-id393 . -12) (undo-tree-id394 . 12) (1654 . 1662) (#("            " 0 12 (fontified nil)) . -1615) (undo-tree-id395 . -12) (undo-tree-id396 . -12) (undo-tree-id397 . -12) (undo-tree-id398 . -12) (undo-tree-id399 . -12) (undo-tree-id400 . -12) (undo-tree-id401 . -12) (undo-tree-id402 . -12) (undo-tree-id403 . -12) (undo-tree-id404 . -12) (undo-tree-id405 . -12) (undo-tree-id406 . -12) (undo-tree-id407 . -12) (undo-tree-id408 . -12) (undo-tree-id409 . -12) (undo-tree-id410 . -12) (undo-tree-id411 . -12) (undo-tree-id412 . -12) (undo-tree-id413 . -12) (undo-tree-id414 . -12) (undo-tree-id415 . 12) (1607 . 1615) (#("            " 0 12 (fontified nil)) . -1546) (undo-tree-id416 . 12) (1538 . 1546) (#("            " 0 2 (fontified nil) 2 3 (fontified nil) 3 12 (fontified nil)) . -1491) (undo-tree-id417 . 12) (1483 . 1491) (#("        " 0 8 (fontified nil)) . -1431) (undo-tree-id418 . -8) (undo-tree-id419 . -8) (undo-tree-id420 . -8) (undo-tree-id421 . -8) (undo-tree-id422 . -8) (undo-tree-id423 . -8) (undo-tree-id424 . -8) (undo-tree-id425 . -8) (undo-tree-id426 . -8) (undo-tree-id427 . -8) (undo-tree-id428 . -8) (undo-tree-id429 . -8) (undo-tree-id430 . -8) (undo-tree-id431 . -8) (undo-tree-id432 . -8) (undo-tree-id433 . -8) (undo-tree-id434 . -8) (undo-tree-id435 . -8) (undo-tree-id436 . -8) (undo-tree-id437 . -8) (undo-tree-id438 . -8) (undo-tree-id439 . -8) (undo-tree-id440 . -8) (undo-tree-id441 . 8) (1427 . 1431) (#("        " 0 8 (fontified nil)) . -1386) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (undo-tree-id444 . -8) (undo-tree-id445 . -8) (undo-tree-id446 . -8) (undo-tree-id447 . -8) (undo-tree-id448 . -8) (undo-tree-id449 . -8) (undo-tree-id450 . -8) (undo-tree-id451 . -8) (undo-tree-id452 . -8) (undo-tree-id453 . -8) (undo-tree-id454 . -8) (undo-tree-id455 . -8) (undo-tree-id456 . -8) (undo-tree-id457 . -8) (undo-tree-id458 . -8) (undo-tree-id459 . -8) (undo-tree-id460 . -8) (undo-tree-id461 . -8) (undo-tree-id462 . 8) (1382 . 1386) (#("            " 0 12 (fontified nil)) . -1373) (undo-tree-id463 . 12) (1365 . 1373) (#("        " 0 8 (fontified nil)) . -1316) (undo-tree-id464 . -8) (undo-tree-id465 . -8) (undo-tree-id466 . -8) (undo-tree-id467 . -8) (undo-tree-id468 . -8) (undo-tree-id469 . -8) (undo-tree-id470 . -8) (undo-tree-id471 . -8) (undo-tree-id472 . -8) (undo-tree-id473 . -8) (undo-tree-id474 . -8) (undo-tree-id475 . -8) (undo-tree-id476 . -8) (undo-tree-id477 . 8) (1312 . 1316) (#("            " 0 12 (fontified nil)) . -1246) (undo-tree-id478 . 12) (1238 . 1246) (#("    " 0 4 (fontified t)) . -1187) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (#("    " 0 4 (fontified t)) . -1162) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (#("        " 0 8 (fontified nil)) . -1149) (undo-tree-id552 . -8) (undo-tree-id553 . -8) (undo-tree-id554 . -8) (undo-tree-id555 . -8) (undo-tree-id556 . -8) (undo-tree-id557 . -8) (undo-tree-id558 . -8) (undo-tree-id559 . -8) (undo-tree-id560 . -8) (undo-tree-id561 . -8) (undo-tree-id562 . 8) (1145 . 1149) (#("    " 0 4 (fontified t)) . -1126) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (#("        " 0 8 (fontified nil)) . -1098) (undo-tree-id566 . -8) (undo-tree-id567 . -8) (undo-tree-id568 . -8) (undo-tree-id569 . -8) (undo-tree-id570 . -8) (undo-tree-id571 . -8) (undo-tree-id572 . 8) (1094 . 1098) (#("    " 0 4 (fontified t)) . -1089) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . 4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) 2726) nil (25593 1740 418282 57000) 0 nil])
([nil nil ((1157 . 1158) (#(" " 0 1 (fontified nil)) . -1157) (undo-tree-id0 . -1) (1157 . 1158) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1157) (undo-tree-id1 . -1) (1156 . 1158) (#(" " 0 1 (fontified nil)) . -1156) (undo-tree-id2 . -1) (1156 . 1157) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1156) (undo-tree-id3 . -1) (1156 . 1157) (1155 . 1157) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1155) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (1155 . 1156) (1154 . 1156) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1154) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (1154 . 1155) (#(" " 0 1 (fontified t)) . -1154) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 1155 (1149 . 1155) (#("return '...'" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 12 (face font-lock-string-face fontified t)) . 1149) (undo-tree-id19 . -11) (undo-tree-id20 . -11) (undo-tree-id21 . -11) (undo-tree-id22 . -11) (undo-tree-id23 . -7) (undo-tree-id24 . -8) (undo-tree-id25 . -12) (undo-tree-id26 . -12) (undo-tree-id27 . -12) (undo-tree-id28 . -12) (undo-tree-id29 . -12) (undo-tree-id30 . 12) (undo-tree-id31 . 12) (undo-tree-id32 . -12) (undo-tree-id33 . -12) (undo-tree-id34 . -12) (undo-tree-id35 . -12) (undo-tree-id36 . -11) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -11) (undo-tree-id40 . -11) (undo-tree-id41 . -11) (undo-tree-id42 . -12) (undo-tree-id43 . -12) 1160) nil (25593 1740 417779 825000) 0 nil])
([nil nil ((1157 . 1160)) nil (25593 1740 417731 820000) 0 nil])
([nil nil ((#("%{A:NM_MENU:}" 0 13 (face font-lock-string-face fontified t)) . 1174) (undo-tree-id790 . -12) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -3) (undo-tree-id802 . -3) (undo-tree-id803 . -2) (undo-tree-id804 . -2) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -13) (undo-tree-id808 . -13) (t 25593 1740 422236 764000)) nil (25593 1750 404952 748000) 0 nil])
([nil nil ((59 . 61) (#("[" 0 1 (fontified nil)) . -59) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (49 . 60) (48 . 49) (47 . 48) (t 25593 1750 412236 923000) 34) nil (25593 1767 994299 470000) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 1354) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) 1358 (t 25593 1767 998903 873000)) nil (25593 3420 6888 599000) 0 nil])
([nil nil ((apply 2 1481 1534 undo--wrap-and-run-primitive-undo 1481 1534 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1489) 1510))) nil (25593 3420 6885 751000) 0 nil])
([nil nil ((1542 . 1554) (1533 . 1542) 1508) nil (25593 3420 6885 354000) 0 nil])
([nil nil ((75 . 77) (#("[" 0 1 (fontified nil)) . -75) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (62 . 76) (61 . 62) 60) nil (25593 3420 6884 813000) 0 nil])
([nil nil ((77 . 83) (76 . 78) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -76) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (76 . 77)) nil (25593 3420 6883 169000) 0 nil])
([nil nil ((87 . 89) (86 . 88) (#("'" 0 1 (fontified nil)) . -86) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (86 . 87) (84 . 86)) nil (25593 3420 6881 611000) 0 nil])
([nil nil ((nil rear-nonsticky nil 92 . 93) (nil fontified nil 89 . 93) (89 . 93) 88) nil (25593 3420 6880 72000) 0 nil])
([nil nil ((97 . 99) (96 . 98) (#("'" 0 1 (fontified nil)) . -96) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (94 . 97)) nil (25593 3420 6879 467000) 0 nil])
([nil nil ((nil rear-nonsticky nil 102 . 103) (nil fontified nil 99 . 103) (99 . 103) 98) nil (25593 3420 6877 958000) 0 nil])
([nil nil ((1609 . 1615) (1608 . 1610) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1608) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (1608 . 1609) (1607 . 1609) (#("[" 0 1 (fontified nil)) . -1607) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (1607 . 1608) (#(" " 0 1 (fontified t)) . -1607) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) 1608 (1598 . 1608)) nil (25593 3420 6876 943000) 0 nil])
([nil nil ((1629 . 1633) (1628 . 1630) (#("'" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1628) (1628 . 1629) (1627 . 1629) (#("[" 0 1 (fontified nil)) . -1627) (1618 . 1628) (1617 . 1619) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1617) (1617 . 1618)) nil (25593 3420 6871 451000) 0 nil])
([nil nil ((1642 . 1649) (1641 . 1643) (#("(" 0 1 (fontified nil)) . -1641) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (1637 . 1642) (1635 . 1637)) nil (25593 3423 307278 561000) 0 nil])
([nil nil ((#("    output += '%{A3:NMIFINFO_'+dev_name+':}'
" 0 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t) 10 14 (fontified t) 14 23 (face font-lock-string-face fontified t) 23 30 (face font-lock-string-face fontified t) 30 40 (fontified t) 40 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (fontified t)) . 1424) (undo-tree-id920 . -44) (undo-tree-id921 . -43) (undo-tree-id922 . -43) (undo-tree-id923 . -44) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -44) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -43) (undo-tree-id930 . -43) (undo-tree-id931 . -44) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -44) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -43) (undo-tree-id938 . -43) (undo-tree-id939 . -43) (undo-tree-id940 . -4) (undo-tree-id941 . -4) (undo-tree-id942 . -14) (undo-tree-id943 . -4) (undo-tree-id944 . -4) (undo-tree-id945 . -14) (undo-tree-id946 . -43) (undo-tree-id947 . -43) (undo-tree-id948 . -43) (undo-tree-id949 . -43) (undo-tree-id950 . -43) (undo-tree-id951 . -44) (undo-tree-id952 . -4) (undo-tree-id953 . -4) (undo-tree-id954 . -44) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -43) (undo-tree-id958 . -43) (undo-tree-id959 . -43) (undo-tree-id960 . -43) (undo-tree-id961 . -45) 1467) nil (25593 3470 627101 32000) 0 nil] [nil nil ((#("    output += '%{A3:NMIFINFO_'+dev_name+':}'
" 0 4 (fontified t) 4 10 (fontified t) 10 14 (fontified t) 14 23 (face font-lock-string-face fontified t) 23 30 (face font-lock-string-face fontified t) 30 40 (fontified t) 40 44 (face font-lock-string-face fontified t) 44 45 (fontified t)) . 1424) (undo-tree-id826 . -44) (undo-tree-id827 . -43) (undo-tree-id828 . -43) (undo-tree-id829 . -44) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -44) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -43) (undo-tree-id836 . -43) (undo-tree-id837 . -44) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -44) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -43) (undo-tree-id844 . -43) (undo-tree-id845 . -43) (undo-tree-id846 . -43) (undo-tree-id847 . -45) 1467) ((1424 . 1469)) (25593 3420 7151 911000) 0 nil])
([nil nil ((1562 . 1566)) nil (25593 3494 167667 836000) 0 nil] [nil nil ((#("        # bars = wifi_nets['BARS'][wifi_nets['SSID'].index(dev_con)]
" 0 7 (fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 21 (face font-lock-comment-face fontified t) 21 69 (face font-lock-comment-face fontified t)) . 1607) (undo-tree-id899 . -68) (undo-tree-id900 . 69) (undo-tree-id901 . -43) (undo-tree-id902 . -43) (undo-tree-id903 . -43) (undo-tree-id904 . -43) (undo-tree-id905 . -43) (undo-tree-id906 . -43) (undo-tree-id907 . -43) (undo-tree-id908 . -43) (undo-tree-id909 . -68) (undo-tree-id910 . -8) (undo-tree-id911 . -8) (undo-tree-id912 . -68) (undo-tree-id913 . -8) (undo-tree-id914 . -8) (undo-tree-id915 . -43) (undo-tree-id916 . -43) (undo-tree-id917 . -43) (undo-tree-id918 . -43) (undo-tree-id919 . -69) 1650) ((1607 . 1676)) (25593 3469 602234 621000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1424) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) 1428 (1424 . 1428) (1424 . 1425) 1469) ((#("
" 0 1 (fontified nil)) . 1424) (undo-tree-id871 . 1) (undo-tree-id872 . 1) (undo-tree-id873 . 1) (#("    " 0 4 (fontified nil)) . 1424) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (1424 . 1428)) (25593 3420 6853 479000) 0 nil])
([nil nil ((#("wifi_nets['SSID'].index(dev_con)" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 15 (face font-lock-string-face fontified t) 15 16 (face font-lock-string-face fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 18 (fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1577) (undo-tree-id1003 . -32) (undo-tree-id1004 . -31) (undo-tree-id1005 . -32)) nil (25593 3506 3679 247000) 0 nil] [nil nil ((#("wifi_nets['SSID'" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 15 (face font-lock-string-face fontified t) 15 16 (face font-lock-string-face fontified t)) . 1577) (undo-tree-id968 . -15) (undo-tree-id969 . -3) (undo-tree-id970 . -3) (undo-tree-id971 . -3) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -2) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -16) (undo-tree-id981 . -16)) ((1577 . 1593)) (25593 3494 167472 490000) 0 nil])
([nil nil ((1607 . 1608) (1553 . 1554) 1605) ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1553) (undo-tree-id962 . 1) (undo-tree-id963 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1607) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . 1) (undo-tree-id967 . -1)) (25593 3468 906369 504000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1598 . 1599) (nil fontified nil 1567 . 1599) (1567 . 1599)) nil (25593 3506 3677 212000) 0 nil])
nil
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1553) (undo-tree-id895 . 1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1)) ((1553 . 1554)) (25593 3467 966915 720000) 0 nil])
([nil nil ((1599 . 1601)) nil (25593 3506 3676 592000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 1606) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . 1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1)) ((1606 . 1607)) (25593 3467 966674 482000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1611) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . 1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1)) nil (25593 3506 3675 900000) 0 nil])
nil
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1610) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . 1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1)) nil (25593 3506 3670 707000) 0 nil])
([nil nil ((#("        # bars = wifi_nets['BARS'][wifi_nets['SSID'].index(dev_con)]
" 0 7 (fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 21 (face font-lock-comment-face fontified t) 21 69 (face font-lock-comment-face fontified t)) . 1611) (undo-tree-id1041 . -68) (undo-tree-id1042 . -67) (undo-tree-id1043 . 2) (undo-tree-id1044 . -68) (undo-tree-id1045 . 35) (undo-tree-id1046 . -35) (undo-tree-id1047 . -67) (undo-tree-id1048 . -67) (undo-tree-id1049 . -68) (undo-tree-id1050 . -8) (undo-tree-id1051 . -8) (undo-tree-id1052 . -68) (undo-tree-id1053 . -8) (undo-tree-id1054 . -8) (undo-tree-id1055 . -67) (undo-tree-id1056 . -67) (undo-tree-id1057 . -67) (undo-tree-id1058 . -67) (undo-tree-id1059 . -67) (undo-tree-id1060 . -67) (undo-tree-id1061 . -67) (undo-tree-id1062 . -67) (undo-tree-id1063 . -67) (undo-tree-id1064 . -67) (undo-tree-id1065 . -67) (undo-tree-id1066 . -67) (undo-tree-id1067 . -68) (undo-tree-id1068 . -8) (undo-tree-id1069 . -8) (undo-tree-id1070 . -68) (undo-tree-id1071 . -8) (undo-tree-id1072 . -8) (undo-tree-id1073 . -67) (undo-tree-id1074 . -67) (undo-tree-id1075 . -67) (undo-tree-id1076 . -67) (undo-tree-id1077 . -69) 1678 (t 25593 3506 8931 573000)) nil (25593 3638 792314 238000) 0 nil])
([nil nil ((1546 . 1552) (#("icon" 0 4 (face font-lock-variable-name-face fontified t)) . 1546) (undo-tree-id1038 . -3) (undo-tree-id1039 . -4) (undo-tree-id1040 . -4)) nil (25593 3638 792273 388000) 0 nil])
([nil nil ((1643 . 1645) (#("[" 0 1 (fontified nil)) . -1643) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (1643 . 1644) (1630 . 1643) (#("s" 0 1 (fontified t)) . -1630) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (#(" " 0 1 (fontified t)) . -1631) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) 1632 (1621 . 1632) (1612 . 1621) 1551) nil (25593 3638 792270 560000) 0 nil])
([nil nil ((1684 . 1699) (1666 . 1684) (#("l" 0 1 (fontified t)) . -1666) (undo-tree-id1006 . -1) 1667 (1664 . 1667) (1663 . 1664) (#("3" 0 1 (face highlight-numbers-number fontified t)) . -1663) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#("4" 0 1 (face highlight-numbers-number fontified t)) . -1664) (undo-tree-id1009 . -1) 1665 (1664 . 1665) (#("=" 0 1 (fontified t)) . -1664) (undo-tree-id1010 . -1) 1665 (1664 . 1665) (#("0" 0 1 (face highlight-numbers-number fontified t)) . -1664) (undo-tree-id1011 . -1) 1665 (1654 . 1665) (1644 . 1654)) nil (25593 3638 792253 262000) 0 nil])
([nil nil ((#("        output += '%{A2:WIFIQR_'+dev_name+':}'
        output += ficon('\\uf1eb', cdict['green'])
        output += '%{A2}'
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 18 (fontified t) 18 32 (face font-lock-string-face fontified t) 32 42 (fontified t) 42 46 (face font-lock-string-face fontified t) 46 47 (fontified t) 47 55 (fontified t) 55 61 (face font-lock-variable-name-face fontified t) 61 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-1-face) fontified t) 71 79 (face font-lock-string-face fontified t) 79 86 (fontified t) 86 87 (face (rainbow-delimiters-depth-2-face) fontified t) 87 94 (face font-lock-string-face fontified t) 94 95 (face (rainbow-delimiters-depth-2-face) fontified t) 95 96 (face (rainbow-delimiters-depth-1-face) fontified t) 96 105 (fontified t) 105 111 (face font-lock-variable-name-face fontified t) 111 115 (fontified t) 115 122 (face font-lock-string-face fontified t) 122 123 (fontified t)) . 1701) (undo-tree-id1555 . -122) (undo-tree-id1556 . -122) (undo-tree-id1557 . -45) (undo-tree-id1558 . -122) (undo-tree-id1559 . -45) (undo-tree-id1560 . -122) (undo-tree-id1561 . -45) (undo-tree-id1562 . -122) 1823 (t 25593 3638 795600 305000)) nil (25593 3850 201893 631000) 0 nil])
([nil nil ((1714 . 1716) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1714) (1709 . 1715) (1700 . 1709) 1636) nil (25593 3850 201889 284000) 0 nil])
([nil nil ((1730 . 1744) (1727 . 1730) (1726 . 1728) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1726) (1725 . 1727) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1725) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1726) (undo-tree-id1554 . -1) 1727 (1723 . 1727) (1717 . 1723) (1716 . 1718) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1716) (1716 . 1717) (1715 . 1717) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1715) (1715 . 1716)) nil (25593 3850 201888 131000) 0 nil])
([nil nil ((#("        print('(eventbox (box :space-evenly))')
" 0 8 (fontified t) 8 13 (face font-lock-builtin-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 15 (face font-lock-string-face fontified t) 15 25 (face font-lock-string-face fontified t) 25 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face (rainbow-delimiters-depth-1-face) fontified t) 47 48 (fontified t)) . 1701) (undo-tree-id1544 . 5) (undo-tree-id1545 . -48) (undo-tree-id1546 . -47) (undo-tree-id1547 . -48) (undo-tree-id1548 . -48) (undo-tree-id1549 . -48) (undo-tree-id1550 . -42) (undo-tree-id1551 . -42) 1743) nil (25593 3850 201885 263000) 0 nil])
([nil nil ((1146 . 1147) 1146) nil (25593 3850 201881 305000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1154 . 1155) (#("
" 0 1 (fontified nil)) . -1194) (1146 . 1195)) nil (25593 3850 201880 785000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -1151) (undo-tree-id1543 . -8) (1147 . 1151) 1155) nil (25593 3850 201880 8000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1147) 1155) nil (25593 3850 201879 44000) 0 nil])
([nil nil ((1159 . 1161) (#(" " 0 1 (fontified t)) . -1159) (undo-tree-id1541 . -1) 1160 (1147 . 1160) (#("print(" 0 5 (face font-lock-builtin-face fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1147) (undo-tree-id1542 . -5)) nil (25593 3850 201878 349000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 1193) (undo-tree-id1538 . -1) (undo-tree-id1539 . 1) (undo-tree-id1540 . -1)) nil (25593 3850 201876 717000) 0 nil])
([nil nil ((1196 . 1202) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1196) (undo-tree-id1536 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1197) (undo-tree-id1537 . -1) 1198 (1192 . 1198) (1191 . 1193) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1191) (1191 . 1192) (1190 . 1191)) nil (25593 3850 201874 42000) 0 nil])
([nil nil ((1170 . 1172) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1170) (1163 . 1171) (1162 . 1164) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1162) (1162 . 1163) (#("\\" 0 1 (face font-lock-string-face fontified t)) . -1162) (undo-tree-id1533 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -1163) (undo-tree-id1534 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1164) (undo-tree-id1535 . -1) 1165 (1162 . 1165)) nil (25593 3850 201871 806000) 0 nil])
([nil nil ((1172 . 1187) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1172) (undo-tree-id1532 . -1) 1173 (1172 . 1173)) nil (25593 3850 201869 598000) 0 nil])
([nil nil ((#("`" 0 1 (face font-lock-string-face fontified nil)) . 1238) (1237 . 1238) (1236 . 1238) (#("`" 0 1 (face font-lock-string-face fontified nil)) . -1236) (1228 . 1237)) nil (25593 3850 201868 539000) 0 nil])
([nil nil ((1238 . 1240) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1238) (1237 . 1239)) nil (25593 3850 201867 904000) 0 nil])
([nil nil ((1240 . 1241) (1236 . 1237) (#("`" 0 1 (face font-lock-string-face fontified nil)) . 1239) (undo-tree-id1520 . 1) (#("`" 0 1 (face font-lock-string-face fontified t)) . -1236) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) 1237) nil (25593 3850 201867 57000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -1242) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) 1243 (1239 . 1243)) nil (25593 3850 201861 5000) 0 nil])
([nil nil ((1251 . 1253) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1251) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (1251 . 1252) (1243 . 1251)) nil (25593 3850 201857 877000) 0 nil])
([nil nil ((1256 . 1260) (#("b" 0 1 (face font-lock-string-face fontified t)) . -1256) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) 1257 (1252 . 1257) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1252) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) 1253 (1252 . 1253)) nil (25593 3850 201856 85000) 0 nil])
([nil nil ((1174 . 1179) (1171 . 1174)) nil (25593 3850 201851 399000) 0 nil])
([nil nil ((1278 . 1283) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1278) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (#("-" 0 1 (face font-lock-string-face fontified t)) . -1279) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1280) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) 1281 (1269 . 1281)) nil (25593 3850 201850 151000) 0 nil])
([nil nil ((1284 . 1285) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1284) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1285) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1286) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1287) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -1288) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1289) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#("v" 0 1 (face font-lock-string-face fontified t)) . -1290) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1291) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1292) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -1293) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1294) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1295) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1296) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1297) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) 1298 (1285 . 1298) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1285) (undo-tree-id1472 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1286) (undo-tree-id1473 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -1287) (undo-tree-id1474 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1288) (undo-tree-id1475 . -1) 1289 (1284 . 1289)) nil (25593 3850 201826 872000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1333 . 1334) (nil fontified nil 1285 . 1334) (1285 . 1334) 1284) nil (25593 3850 201335 961000) 0 nil])
([nil nil ((1293 . 1297)) nil (25593 3850 201334 750000) 0 nil])
([nil nil ((1333 . 1338) (#("true" 0 4 (face font-lock-string-face fontified t)) . 1333) (undo-tree-id1078 . -3) (undo-tree-id1079 . -4) (undo-tree-id1080 . -4) (undo-tree-id1081 . -4) (undo-tree-id1082 . -4) (undo-tree-id1083 . -4) (undo-tree-id1084 . -4) (undo-tree-id1085 . -4) (undo-tree-id1086 . -4) (undo-tree-id1087 . -4)) nil (25593 3850 201331 792000) 0 nil])
([nil nil ((1339 . 1340) (t 25593 3850 208936 960000)) nil (25593 4940 188448 214000) 0 nil])
([nil nil ((1225 . 1227) (#("(" 0 1 (face font-lock-string-face fontified nil)) . -1225) (1225 . 1226)) nil (25593 4940 188447 763000) 0 nil])
([nil nil ((1227 . 1228)) nil (25593 4940 188447 60000) 0 nil])
([nil nil ((1239 . 1241) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1239) (undo-tree-id1655 . -1) 1240 (1226 . 1240)) nil (25593 4940 188446 472000) 0 nil])
([nil nil ((1240 . 1250)) nil (25593 4940 188445 437000) 0 nil])
([nil nil ((1246 . 1251) (1245 . 1247) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1245) (1245 . 1246) (#("green" 0 5 (face font-lock-string-face fontified t)) . 1245) (undo-tree-id1654 . -4)) nil (25593 4940 188444 545000) 0 nil])
([nil nil ((1246 . 1252) (#("_" 0 1 (face font-lock-string-face fontified t)) . -1246) (undo-tree-id1648 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1247) (undo-tree-id1649 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1248) (undo-tree-id1650 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1249) (undo-tree-id1651 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1250) (undo-tree-id1652 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1251) (undo-tree-id1653 . -1) 1252 (1246 . 1252)) nil (25593 4940 188442 714000) 0 nil])
([nil nil ((1266 . 1268) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1266) (1259 . 1267)) nil (25593 4940 188438 992000) 0 nil])
([nil nil ((1269 . 1270) (1266 . 1267) 1267) nil (25593 4940 188438 181000) 0 nil])
([nil nil ((1268 . 1276)) nil (25593 4940 188437 722000) 0 nil])
([nil nil ((1396 . 1404) (1395 . 1397) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1395) (1395 . 1396)) nil (25593 4940 188437 371000) 0 nil])
([nil nil ((1407 . 1412) (1406 . 1408) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -1406) (1405 . 1407)) nil (25593 4940 188436 778000) 0 nil])
([nil nil ((1414 . 1415) (1395 . 1396) 1412) nil (25593 4940 188436 24000) 0 nil])
([nil nil ((1396 . 1412)) nil (25593 4940 188435 376000) 0 nil])
([nil nil ((1400 . 1401)) nil (25593 4940 188434 741000) 0 nil])
([nil nil ((1416 . 1420) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1416) (undo-tree-id1646 . -1) 1417 (1413 . 1417) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1413) (undo-tree-id1647 . -1) 1414 (1413 . 1414)) nil (25593 4940 188433 920000) 0 nil])
([nil nil ((1431 . 1432) (1420 . 1421) 1429) nil (25593 4940 188432 159000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 1431) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1)) nil (25593 4940 188431 168000) 0 nil])
([nil nil ((1439 . 1440)) nil (25593 4940 188427 720000) 0 nil])
([nil nil ((1439 . 1440) (#(":" 0 1 (face font-lock-string-face fontified t)) . 1439) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1)) nil (25593 4940 188427 158000) 0 nil])
([nil nil ((1430 . 1431) (#("}" 0 1 (face font-lock-string-face fontified t)) . -1430) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . 1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) 1431) nil (25593 4940 188424 808000) 0 nil])
([nil nil ((1431 . 1432) (#(" " 0 1 (face font-lock-string-face fontified t)) . 1431) (undo-tree-id1604 . 1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . 1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . 1) (undo-tree-id1616 . 1) (undo-tree-id1617 . -1)) nil (25593 4940 188390 615000) 0 nil])
([nil nil ((1429 . 1431) (#("\"" 0 1 (syntax-table (15) face font-lock-string-face fontified nil)) . 1429) (undo-tree-id1563 . 1) (undo-tree-id1564 . 1) (undo-tree-id1565 . 1) (undo-tree-id1566 . 1) (undo-tree-id1567 . 1) (undo-tree-id1568 . 1) (undo-tree-id1569 . 1) (undo-tree-id1570 . 1) (undo-tree-id1571 . 1) (undo-tree-id1572 . 1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . 1) (undo-tree-id1579 . 1) (undo-tree-id1580 . 1) (undo-tree-id1581 . 1) (undo-tree-id1582 . 1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . 1) (undo-tree-id1590 . 1) (1428 . 1429) (#(" " 0 1 (fontified nil)) . -1428) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (1428 . 1429) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1428) (undo-tree-id1597 . -1) (1427 . 1429) (#(" " 0 1 (fontified nil)) . -1427) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (1427 . 1428) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1427) (undo-tree-id1603 . -1) (1420 . 1428)) nil (25593 4940 188382 151000) 0 nil])
([nil nil ((1428 . 1434)) nil (25593 4940 188351 874000) 0 nil])
([nil nil ((1196 . 1198) (t 25593 4940 195620 873000)) nil (25593 5086 678313 495000) 0 nil])
([nil nil ((1462 . 1464) (t 25593 5086 685623 156000)) nil (25593 5093 818922 959000) 0 nil])
([nil nil ((2029 . 2038) (2020 . 2029) (t 25593 5093 825623 268000) 1942) nil (25593 10297 520832 528000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1933) (undo-tree-id1766 . -8) (undo-tree-id1767 . -8) (undo-tree-id1768 . -8) (undo-tree-id1769 . -8) (undo-tree-id1770 . -8) (undo-tree-id1771 . -8) (undo-tree-id1772 . -8) (undo-tree-id1773 . -8) (undo-tree-id1774 . -8) 1941 (1933 . 1941) (1933 . 1934) 1967) nil (25593 11835 871739 155000) 0 nil] [nil nil ((#("        output = 
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 17 (fontified t) 17 18 (fontified t)) . 2021) (undo-tree-id1656 . 1) (undo-tree-id1657 . -17) (undo-tree-id1658 . -17) (undo-tree-id1659 . -16) 2037) ((2021 . 2039) (t 25593 5486 278962 858000)) (25593 5486 271906 817000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1949 . 1950) (#("
" 0 1 (fontified nil)) . -2052) (1933 . 2053)) nil (25593 11835 871732 268000) 0 nil])
nil
([nil nil ((#("                " 0 15 (fontified nil) 15 16 (rear-nonsticky t fontified nil)) . -1946) (undo-tree-id1736 . -16) (undo-tree-id1737 . -15) (undo-tree-id1738 . -16) (undo-tree-id1739 . -16) (undo-tree-id1740 . -16) (undo-tree-id1741 . -16) (undo-tree-id1742 . -16) (undo-tree-id1743 . -16) (undo-tree-id1744 . -16) (undo-tree-id1745 . -16) (undo-tree-id1746 . -16) (undo-tree-id1747 . -16) (undo-tree-id1748 . -16) (undo-tree-id1749 . -16) (undo-tree-id1750 . -16) (undo-tree-id1751 . -16) (undo-tree-id1752 . -16) (undo-tree-id1753 . -16) (undo-tree-id1754 . -16) (undo-tree-id1755 . -16) (undo-tree-id1756 . -16) (undo-tree-id1757 . -16) (undo-tree-id1758 . -16) (undo-tree-id1759 . -15) (undo-tree-id1760 . -16) (undo-tree-id1761 . -16) (undo-tree-id1762 . -16) (undo-tree-id1763 . -16) (undo-tree-id1764 . -16) (undo-tree-id1765 . 16) (1934 . 1946) 1950) nil (25593 11835 871731 114000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -1942) (undo-tree-id1699 . -12) (undo-tree-id1700 . -12) (undo-tree-id1701 . -12) (undo-tree-id1702 . -12) (undo-tree-id1703 . -12) (undo-tree-id1704 . -12) (undo-tree-id1705 . -12) (undo-tree-id1706 . -12) (undo-tree-id1707 . -12) (undo-tree-id1708 . -12) (undo-tree-id1709 . -12) (undo-tree-id1710 . -12) (undo-tree-id1711 . -12) (undo-tree-id1712 . -12) (undo-tree-id1713 . -12) (undo-tree-id1714 . -12) (undo-tree-id1715 . -12) (undo-tree-id1716 . -12) (undo-tree-id1717 . -12) (undo-tree-id1718 . -12) (undo-tree-id1719 . -12) (undo-tree-id1720 . -12) (undo-tree-id1721 . -12) (undo-tree-id1722 . -12) (undo-tree-id1723 . -12) (undo-tree-id1724 . -12) (undo-tree-id1725 . -12) (undo-tree-id1726 . -12) (undo-tree-id1727 . -12) (undo-tree-id1728 . -12) (undo-tree-id1729 . -12) (undo-tree-id1730 . -12) (undo-tree-id1731 . -12) (undo-tree-id1732 . -12) (undo-tree-id1733 . -12) (undo-tree-id1734 . -12) (undo-tree-id1735 . 12) (1934 . 1942) 1950) nil (25593 11835 871715 923000) 0 nil])
([nil nil ((#("        wifi_icon = wifi_icons[0 if wifi_signal < 40 else 1 if wifi_signal < 70 else 2]
" 0 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 17 (face font-lock-variable-name-face fontified t) 17 23 (fontified t) 23 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (face highlight-numbers-number fontified t) 32 33 (fontified t) 33 35 (face font-lock-keyword-face fontified t) 35 50 (fontified t) 50 52 (face highlight-numbers-number fontified t) 52 53 (fontified t) 53 57 (face font-lock-keyword-face fontified t) 57 58 (fontified t) 58 59 (face highlight-numbers-number fontified t) 59 60 (fontified t) 60 62 (face font-lock-keyword-face fontified t) 62 77 (fontified t) 77 79 (face highlight-numbers-number fontified t) 79 80 (fontified t) 80 84 (face font-lock-keyword-face fontified t) 84 85 (fontified t) 85 86 (face highlight-numbers-number fontified t) 86 87 (face (rainbow-delimiters-depth-1-face) fontified t) 87 88 (fontified t)) . 2045) (undo-tree-id1677 . -87) (undo-tree-id1678 . -16) (undo-tree-id1679 . -34) (undo-tree-id1680 . -34) (undo-tree-id1681 . -34) (undo-tree-id1682 . -34) (undo-tree-id1683 . -87) (undo-tree-id1684 . -8) (undo-tree-id1685 . -8) (undo-tree-id1686 . -87) (undo-tree-id1687 . -8) (undo-tree-id1688 . -8) (undo-tree-id1689 . -34) (undo-tree-id1690 . 88) (undo-tree-id1691 . -16) (undo-tree-id1692 . -88) (undo-tree-id1693 . -16) (undo-tree-id1694 . -16) (undo-tree-id1695 . -16) (undo-tree-id1696 . -16) (undo-tree-id1697 . -16) (undo-tree-id1698 . -88) 2061) nil (25593 11835 871694 763000) 0 nil])
([nil nil ((#("        output = 
" 0 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 17 (fontified t) 17 18 (fontified t)) . 2045) (undo-tree-id1660 . -17) (undo-tree-id1661 . -16) (undo-tree-id1662 . 18) (undo-tree-id1663 . -8) (undo-tree-id1664 . -17) (undo-tree-id1665 . 18) (undo-tree-id1666 . -17) (undo-tree-id1667 . -16) (undo-tree-id1668 . -16) (undo-tree-id1669 . -16) (undo-tree-id1670 . -16) (undo-tree-id1671 . -16) (undo-tree-id1672 . -16) (undo-tree-id1673 . -16) (undo-tree-id1674 . -16) (undo-tree-id1675 . -16) (undo-tree-id1676 . -18) 2061) nil (25593 45853 96511 854000) 0 nil])
([nil nil ((#("(defvar {dev_name}_revealer false)\\n" 0 36 (fontified t face font-lock-string-face)) . 1162) (undo-tree-id69 . -35) (undo-tree-id70 . -35) (undo-tree-id71 . -35) (undo-tree-id72 . -35) (undo-tree-id73 . 36) (undo-tree-id74 . -1) (undo-tree-id75 . 3) (undo-tree-id76 . -34) (t 25593 11835 879064 827000)) nil (25593 49905 23115 588000) 0 nil] [nil nil ((#("(defvar {dev_name}_revealer false)\\n" 0 36 (fontified t face font-lock-string-face)) . 1162) (undo-tree-id0 . -35) (undo-tree-id1 . -35) (undo-tree-id2 . -35) (undo-tree-id3 . -36) (undo-tree-id4 . -35) (undo-tree-id5 . -32) (undo-tree-id6 . -33) (undo-tree-id7 . -34) (undo-tree-id8 . -34) (undo-tree-id9 . -35) (undo-tree-id10 . -35) (undo-tree-id11 . -35) (undo-tree-id12 . -36) (undo-tree-id13 . -35) 1197 (t 25593 11835 879064 827000)) ((1162 . 1198)) (25593 45853 96281 656000) 0 nil])
([nil nil ((2047 . 2049) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -2047) (2044 . 2048) (#("o" 0 1 (fontified t)) . -2044) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 2045 (2042 . 2045) (2033 . 2042) 2024) nil (25593 49905 23108 514000) 0 nil])
nil
([nil nil ((24 . 35) (#("j" 0 1 (fontified t)) . -24) (undo-tree-id66 . -1) 25 (24 . 25) (24 . 25) 37) nil (25593 49905 23106 756000) 0 nil])
([nil nil ((2072 . 2074) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2072) (2072 . 2073) (2071 . 2073) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2071) (2071 . 2072) (2070 . 2072) (#("(" 0 1 (fontified nil)) . -2070) (2060 . 2071)) nil (25593 49905 23105 202000) 0 nil])
([nil nil ((2073 . 2081)) nil (25593 49905 23104 371000) 0 nil])
([nil nil ((2082 . 2092)) nil (25593 49905 23104 38000) 0 nil])
([nil nil ((2095 . 2096) (2094 . 2096) (#("'" 0 1 (fontified nil)) . -2094) (2092 . 2095)) nil (25593 49905 23103 451000) 0 nil])
([nil nil ((#("        print(json.dumps({'dev_name': dev_name, 'd'}))
" 0 8 (fontified t) 8 13 (fontified t face font-lock-builtin-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t face (rainbow-delimiters-depth-3-face)) 26 35 (fontified t face font-lock-string-face) 35 36 (fontified t face font-lock-string-face) 36 48 (fontified t) 48 50 (fontified t face font-lock-string-face) 50 51 (fontified t face font-lock-string-face) 51 52 (fontified t face (rainbow-delimiters-depth-3-face)) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 54 (fontified t face (rainbow-delimiters-depth-1-face)) 54 55 (fontified t)) . 2046) (undo-tree-id59 . -50) (undo-tree-id60 . -49) (undo-tree-id61 . -13) (undo-tree-id62 . -54) (undo-tree-id63 . 5) (undo-tree-id64 . -13) (undo-tree-id65 . -13) 2095) nil (25593 49905 23102 712000) 0 nil])
([nil nil ((#("common_form = '(eventbox (box :space-evenly (label :class \"icon-{state_color}\" :text \"{dev_icon}\") (revealer :onhover \"${eww} update {dev_name}_revealer=true\" :onhoverlost \"${eww} update {dev_name}_revealer=false\" (box :space-evenly false :class \"dimmed\" \"{dev_name}:{notes}\"))))\\n'
" 0 11 (fontified t) 11 14 (fontified t) 14 15 (fontified t face font-lock-string-face) 15 282 (fontified t face font-lock-string-face) 282 283 (fontified t)) . 1159) (undo-tree-id52 . -176) (undo-tree-id53 . -15) (undo-tree-id54 . 268) (undo-tree-id55 . -15) (undo-tree-id56 . -15) (undo-tree-id57 . -282) (undo-tree-id58 . -15) 1335) nil (25593 49905 23099 14000) 0 nil])
([nil nil ((1751 . 1753) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -1751) (1751 . 1752) (1746 . 1751) (1737 . 1746) 1645) nil (25593 49905 23094 669000) 0 nil])
([nil nil ((1761 . 1762) (#("o" 0 1 (fontified t)) . -1761) (undo-tree-id50 . -1) (#("s" 0 1 (fontified t)) . -1762) (undo-tree-id51 . -1) 1763 (1752 . 1763)) nil (25593 49905 23093 677000) 0 nil])
([nil nil ((#("        print(json.dumps)
" 0 8 (fontified t) 8 13 (fontified t face font-lock-builtin-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 26 (fontified t)) . 1738) (undo-tree-id46 . -22) (undo-tree-id47 . -23) (undo-tree-id48 . -25) (undo-tree-id49 . 2) 1761) nil (25593 49905 23091 940000) 0 nil])
([nil nil ((1246 . 1247) 1245) nil (25593 49905 23089 695000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1247) (undo-tree-id45 . 1)) nil (25593 49905 23089 17000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . 1244)) nil (25593 49905 23088 25000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . 1244)) nil (25593 49905 23087 646000) 0 nil])
([nil nil ((1244 . 1246) (#("{" 0 1 (fontified nil)) . -1244) (1244 . 1245)) nil (25593 49905 23087 232000) 0 nil])
([nil nil ((1760 . 1761) (#("," 0 1 (fontified t)) . -1760) (undo-tree-id39 . -1) (#("e" 0 1 (fontified t)) . -1761) (undo-tree-id40 . -1) 1762 (1759 . 1762) (#("n" 0 1 (fontified t)) . -1759) (undo-tree-id41 . -1) 1760 (1753 . 1760) (1752 . 1754) (#("[" 0 1 (fontified nil)) . -1752) (1746 . 1753) (#("p" 0 1 (fontified t)) . -1746) (undo-tree-id42 . -1) (#("u" 0 1 (fontified t)) . -1747) (undo-tree-id43 . -1) (#("t" 0 1 (fontified t)) . -1748) (undo-tree-id44 . -1) 1749 (1746 . 1749) (1737 . 1746) 1636) nil (25593 49905 23085 776000) 0 nil])
([nil nil ((1767 . 1771) (1766 . 1768) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1766) (1766 . 1767) (1765 . 1767) (#("{" 0 1 (fontified nil)) . -1765) (1762 . 1766)) nil (25593 49905 23080 931000) 0 nil])
([nil nil ((1786 . 1796) (1785 . 1787) (#("'" 0 1 (fontified nil)) . -1785) (1778 . 1786) (1772 . 1778)) nil (25593 49905 23080 175000) 0 nil])
([nil nil ((1797 . 1799)) nil (25593 49905 23079 563000) 0 nil])
([nil nil ((1799 . 1806)) nil (25593 49905 23079 218000) 0 nil])
([nil nil ((1809 . 1814) (1808 . 1810) (#("'" 0 1 (fontified nil)) . -1808) (1808 . 1809) (#("a" 0 1 (fontified t)) . -1808) (undo-tree-id33 . -1) (#("c" 0 1 (fontified t)) . -1809) (undo-tree-id34 . -1) (#("t" 0 1 (fontified t)) . -1810) (undo-tree-id35 . -1) (#("i" 0 1 (fontified t)) . -1811) (undo-tree-id36 . -1) (#("v" 0 1 (fontified t)) . -1812) (undo-tree-id37 . -1) (#("e" 0 1 (fontified t)) . -1813) (undo-tree-id38 . -1) 1814 (1808 . 1814) (1806 . 1808)) nil (25593 49905 23078 96000) 0 nil])
([nil nil ((1818 . 1823) (1817 . 1819) (#("'" 0 1 (fontified nil)) . -1817) (1815 . 1818)) nil (25593 49905 23074 204000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1970 . 1971) (#("
" 0 1 (fontified nil)) . -2050) (1962 . 2051) 1961) nil (25593 49905 23073 454000) 0 nil])
([nil nil ((#("wifi_icon" 0 9 (fontified t)) . 1999) (undo-tree-id14 . -8) (undo-tree-id15 . -8) (undo-tree-id16 . -8) (undo-tree-id17 . -8) (undo-tree-id18 . -9) (undo-tree-id19 . -8) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -5) (undo-tree-id25 . -5) (undo-tree-id26 . -6) (undo-tree-id27 . -6) (undo-tree-id28 . -8) (undo-tree-id29 . -8) (undo-tree-id30 . -8) (undo-tree-id31 . -9) (undo-tree-id32 . -9) 2007) nil (25593 49905 23284 80000) 0 nil])
([nil nil ((2000 . 2006) (1999 . 2001) (#("'" 0 1 (fontified nil)) . -1999) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (1999 . 2000)) nil (25593 49929 428510 518000) 0 nil] [nil nil ((nil rear-nonsticky nil 2007 . 2008) (nil fontified nil 1999 . 2008) (1999 . 2008) 1998) ((#("wifi_icon" 0 8 (fontified nil) 8 9 (fontified nil rear-nonsticky nil)) . 1999) (undo-tree-id77 . -8) (undo-tree-id78 . -8) (undo-tree-id79 . -8) (undo-tree-id80 . -8) (undo-tree-id81 . -8) (nil rear-nonsticky t 2007 . 2008)) (25593 49905 23053 577000) 0 nil])
([nil nil ((2042 . 2048) (#("green" 0 5 (fontified t face font-lock-string-face)) . 2042) (undo-tree-id82 . -4) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -5) (undo-tree-id90 . -5)) nil (25593 49929 428506 143000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified nil)) . -2260) (2172 . 2261) 2171 (t 25593 49929 435239 27000)) nil (25593 50050 676568 953000) 0 nil])
([nil nil ((2252 . 2255) (#("orange" 0 6 (fontified t face font-lock-string-face)) . 2252) (undo-tree-id93 . -5) (undo-tree-id94 . -6) (undo-tree-id95 . -6)) nil (25593 50050 676565 924000) 0 nil])
([nil nil ((#("        output += ficon('\\uf1eb', cdict['red'])
" 0 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 32 (fontified t face font-lock-string-face) 32 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 45 (fontified t face font-lock-string-face) 45 46 (fontified t face (rainbow-delimiters-depth-2-face)) 46 47 (fontified t face (rainbow-delimiters-depth-1-face)) 47 48 (fontified t)) . 2125) (undo-tree-id130 . -47) (undo-tree-id131 . -46) (undo-tree-id132 . 2) (undo-tree-id133 . -47) (undo-tree-id134 . 25) (undo-tree-id135 . -24) 2171 (t 25593 50050 681902 965000)) nil (25593 50140 874424 712000) 0 nil])
([nil nil ((#("        output += ficon('\\uf1eb', cdict['orange'])
" 0 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 32 (fontified t face font-lock-string-face) 32 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 48 (fontified t face font-lock-string-face) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t face (rainbow-delimiters-depth-1-face)) 50 51 (fontified t)) . 1912) (undo-tree-id128 . -50) (undo-tree-id129 . -46) 1958) nil (25593 50140 874355 1000) 0 nil])
([nil nil ((2217 . 2302) 2263) nil (25593 50140 874353 777000) 0 nil])
([nil nil ((#("        output += ficon('\\uf1eb', cdict['dimmed'])
" 0 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 32 (fontified t face font-lock-string-face) 32 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 48 (fontified t face font-lock-string-face) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t face (rainbow-delimiters-depth-1-face)) 50 51 (fontified t)) . 2302) (undo-tree-id126 . -50) (undo-tree-id127 . -8) 2310) nil (25593 50140 874353 327000) 0 nil])
([nil nil ((2296 . 2300) (#("red" 0 3 (fontified t face font-lock-string-face)) . 2296) (undo-tree-id125 . -2)) nil (25593 50140 874352 75000) 0 nil])
([nil nil ((2365 . 2451) 2413) nil (25593 50140 874351 210000) 0 nil])
([nil nil ((2405 . 2408) (2404 . 2405) (#("f1eb" 0 4 (fontified t face font-lock-string-face)) . 2404) (undo-tree-id124 . -3)) nil (25593 50140 874350 724000) 0 nil])
([nil nil ((2444 . 2449) (#("grey" 0 4 (fontified t face font-lock-string-face)) . 2444) (undo-tree-id123 . -3)) nil (25593 50140 874349 812000) 0 nil])
([nil nil ((#("        output += ficon('\\uf796', cdict['green'])
" 0 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 32 (fontified t face font-lock-string-face) 32 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 47 (fontified t face font-lock-string-face) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 49 (fontified t face (rainbow-delimiters-depth-1-face)) 49 50 (fontified t)) . 2452) (undo-tree-id117 . -49) (undo-tree-id118 . -48) (undo-tree-id119 . 2) (undo-tree-id120 . -49) (undo-tree-id121 . 27) (undo-tree-id122 . -24) 2500) nil (25593 50140 874348 934000) 0 nil])
([nil nil ((2515 . 2602) 2563) nil (25593 50140 874346 364000) 0 nil])
([nil nil ((2594 . 2601) (#("green" 0 5 (fontified t face font-lock-string-face)) . 2594) (undo-tree-id116 . -4)) nil (25593 50140 874345 869000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . 2598)) nil (25593 50140 874345 48000) 0 nil])
([nil nil ((#("        output += ficon('\\uf796', cdict['light_yellow'])
" 0 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 32 (fontified t face font-lock-string-face) 32 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 54 (fontified t face font-lock-string-face) 54 55 (fontified t face (rainbow-delimiters-depth-2-face)) 55 56 (fontified t face (rainbow-delimiters-depth-1-face)) 56 57 (fontified t)) . 2603) (undo-tree-id110 . -56) (undo-tree-id111 . -55) (undo-tree-id112 . 2) (undo-tree-id113 . -56) (undo-tree-id114 . 34) (undo-tree-id115 . -24) 2658) nil (25593 50140 874344 569000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2772) (2684 . 2773) 2660) nil (25593 50140 874340 941000) 0 nil])
([nil nil ((2764 . 2770) (#("yellow" 0 6 (fontified t face font-lock-string-face)) . 2764) (undo-tree-id108 . -5) (undo-tree-id109 . -3) 2767) nil (25593 50140 874340 450000) 0 nil])
([nil nil ((#("        output += ficon('\\uf796', cdict['orange'])
" 0 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 32 (fontified t face font-lock-string-face) 32 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 48 (fontified t face font-lock-string-face) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t face (rainbow-delimiters-depth-1-face)) 50 51 (fontified t)) . 2773) (undo-tree-id102 . -50) (undo-tree-id103 . -49) (undo-tree-id104 . 2) (undo-tree-id105 . -50) (undo-tree-id106 . 28) (undo-tree-id107 . -24) 2822) nil (25593 50140 874338 984000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2922) (2834 . 2923) 2824) nil (25593 50140 874335 17000) 0 nil])
([nil nil ((#("        output += ficon('\\uf796', cdict['dimmed'])
" 0 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 32 (fontified t face font-lock-string-face) 32 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 48 (fontified t face font-lock-string-face) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t face (rainbow-delimiters-depth-1-face)) 50 51 (fontified t)) . 2923) (undo-tree-id99 . -50) (undo-tree-id100 . -8) (undo-tree-id101 . -8) 2931) nil (25593 50140 874334 80000) 0 nil])
([nil nil ((2914 . 2917) (#("orange" 0 6 (fontified t face font-lock-string-face)) . 2914) (undo-tree-id96 . -5) (undo-tree-id97 . -6) (undo-tree-id98 . -6)) nil (25593 50140 874330 120000) 0 nil])
([nil nil ((#("    output += '%{A3}'
" 0 4 (fontified t) 4 10 (fontified t face font-lock-variable-name-face) 10 14 (fontified t) 14 21 (fontified t face font-lock-string-face) 21 22 (fontified t)) . 2920) (undo-tree-id190 . -21) (undo-tree-id191 . -20) (undo-tree-id192 . -22) (undo-tree-id193 . -20) (undo-tree-id194 . -20) (undo-tree-id195 . -20) (undo-tree-id196 . -20) (undo-tree-id197 . -20) (undo-tree-id198 . -22) 2940 (t 25593 50140 881900 960000)) nil (25593 50169 77603 250000) 0 nil])
([nil nil ((#("return output + '%{A}'
" 0 6 (fontified t face font-lock-keyword-face) 6 16 (fontified t) 16 22 (fontified t face font-lock-string-face) 22 23 (fontified t)) . 2920) (undo-tree-id174 . -22) (undo-tree-id175 . -20) (undo-tree-id176 . -22) (undo-tree-id177 . 23) (undo-tree-id178 . -22) (undo-tree-id179 . -20) (undo-tree-id180 . -20) (undo-tree-id181 . 3) (undo-tree-id182 . -21) (undo-tree-id183 . 5) (undo-tree-id184 . -19) (undo-tree-id185 . -20) (undo-tree-id186 . -20) (undo-tree-id187 . -20) (undo-tree-id188 . -20) (undo-tree-id189 . -23) 2940) nil (25593 50169 77597 830000) 0 nil])
([nil nil ((3597 . 3600) (3594 . 3597) (3593 . 3595) (#("(" 0 1 (fontified nil)) . -3593) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (3583 . 3594) (3582 . 3584) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -3582) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (3577 . 3583) (#("    " 0 4 (fontified t)) . -3577) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) 3581 (#("    " 0 4 (fontified t)) . -3581) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) 3585 (3577 . 3585) (#("        " 0 8 (fontified nil)) . 3576) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -8) (undo-tree-id169 . -8) (undo-tree-id170 . -8) (undo-tree-id171 . -8) (undo-tree-id172 . -8) (undo-tree-id173 . -8) (3584 . 3585) (3575 . 3584) 3575) nil (25593 50169 77174 161000) 0 nil])
([nil nil ((3602 . 3603)) nil (25593 50169 77144 112000) 0 nil])
([nil nil ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 1513) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -5) (undo-tree-id208 . -4) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -5) 1517 (t 25593 50169 81900 330000)) nil (25593 50204 170681 224000) 0 nil])
([nil nil ((#("self" 0 4 (fontified t face font-lock-keyword-face)) . 1017) (undo-tree-id232 . -3) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -4) (t 25593 50204 175232 884000)) nil (25593 50218 663707 729000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 1017) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . 1) (undo-tree-id230 . -1) (undo-tree-id231 . -1)) nil (25593 50218 663702 125000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1017) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . 1) (undo-tree-id224 . 1) (undo-tree-id225 . -1) (undo-tree-id226 . -1)) nil (25593 50218 663698 378000) 0 nil])
([nil nil ((#("self" 0 4 (fontified t face font-lock-keyword-face)) . 903) (undo-tree-id215 . -3) (undo-tree-id216 . -4)) nil (25593 50218 663690 554000) 0 nil])
([nil nil ((#(".loc" 0 4 (fontified t)) . 1562) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -4) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -4) 1565 (t 25593 50218 668565 887000)) nil (25593 50245 14790 702000) 0 nil])
([nil nil ((#("wifi_nets['SSID'].index(dev_con), " 0 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-2-face)) 10 16 (fontified t face font-lock-string-face) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 34 (fontified t)) . 1563) (undo-tree-id257 . -33) (undo-tree-id258 . -33) (undo-tree-id259 . -33) (undo-tree-id260 . -33) (undo-tree-id261 . -34) (undo-tree-id262 . -33) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -8) (undo-tree-id272 . -8) (undo-tree-id273 . -32) (undo-tree-id274 . -32) (undo-tree-id275 . -32) (undo-tree-id276 . -32) (undo-tree-id277 . -32) (undo-tree-id278 . -32) (undo-tree-id279 . -33) (undo-tree-id280 . -33) (undo-tree-id281 . -33) (undo-tree-id282 . -33) (undo-tree-id283 . -33) (undo-tree-id284 . -33) (undo-tree-id285 . -33) (undo-tree-id286 . -33) (undo-tree-id287 . -33) (undo-tree-id288 . -34) 1596) nil (25593 50245 14781 76000) 0 nil])
([nil nil ((1572 . 1574) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1572) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (1572 . 1573)) nil (25593 50245 14764 111000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1606 . 1607) (nil fontified nil 1573 . 1607) (1573 . 1607) 1572) nil (25593 50245 14762 399000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 1605) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1)) nil (25593 50245 14761 387000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t rear-nonsticky t)) . 1605) (undo-tree-id243 . 1) (undo-tree-id244 . -1) (undo-tree-id245 . -1)) nil (25593 50245 14753 352000) 0 nil])
([nil nil ((1607 . 1608) (1553 . 1554) (t 25593 50245 21898 640000)) nil (25593 50266 32441 201000) 0 nil])
([nil nil ((1553 . 1556)) nil (25593 50266 32438 69000) 0 nil])
([nil nil ((1231 . 1235) (1230 . 1232) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -1230) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (1225 . 1231) (#("    " 0 4 (fontified t)) . -1225) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) 1229 (1225 . 1229) (1225 . 1226) 1235 (t 25593 50266 38564 836000)) nil (25593 50393 796479 999000) 0 nil])
([nil nil ((1237 . 1239) (#("(" 0 1 (fontified nil face font-lock-constant-face)) . -1237) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (1237 . 1238) (1229 . 1237) (1224 . 1229) 1215) nil (25593 50393 796470 244000) 0 nil])
([nil nil ((24 . 34) (24 . 25) 34 (t 25593 50393 801895 306000)) nil (25593 50399 491682 28000) 0 nil])
([nil nil ((2966 . 2969) (2965 . 2967) (#("'" 0 1 (fontified nil)) . -2965) (2962 . 2966) (2957 . 2962) (#("y" 0 1 (fontified t)) . -2957) (undo-tree-id368 . -1) (#("u" 0 1 (fontified t)) . -2958) (undo-tree-id369 . -1) (#("p" 0 1 (fontified t)) . -2959) (undo-tree-id370 . -1) 2960 (2948 . 2960) (#("    " 0 4 (fontified t)) . -2948) (undo-tree-id371 . -4) 2952 (2943 . 2952) (t 25593 50399 498561 851000) 2868) nil (25593 50611 94845 572000) 0 nil])
([nil nil ((2970 . 2971)) nil (25593 50611 94842 843000) 0 nil])
([nil nil ((2989 . 2998) (2988 . 2990) (#("'" 0 1 (fontified nil)) . -2988) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (2984 . 2989) (2982 . 2984) (#("e" 0 1 (fontified t)) . -2982) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) 2983 (2982 . 2983) (#("r" 0 1 (fontified t)) . -2982) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 2983 (2970 . 2983)) nil (25593 50611 94841 673000) 0 nil])
([nil nil ((3000 . 3010) (2999 . 3001) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -2999) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (2998 . 3000)) nil (25593 50611 94834 97000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3014) (undo-tree-id333 . -8) (undo-tree-id334 . -8) (undo-tree-id335 . -8) (undo-tree-id336 . -8) (undo-tree-id337 . -8) (undo-tree-id338 . -8) (undo-tree-id339 . -8) (undo-tree-id340 . -8) (undo-tree-id341 . -8) (undo-tree-id342 . -8) (undo-tree-id343 . -8) (undo-tree-id344 . -8) (undo-tree-id345 . -8) (undo-tree-id346 . -8) (undo-tree-id347 . -8) (undo-tree-id348 . -8) (undo-tree-id349 . -8) (undo-tree-id350 . -8) (undo-tree-id351 . -8) 3022 (3013 . 3022) 3012) nil (25593 50611 94832 520000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -3098) (3013 . 3099) 2944) nil (25593 50611 94823 519000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3056 . 3057) (nil fontified nil 3053 . 3057) (3053 . 3057)) nil (25593 50611 94823 39000) 0 nil])
([nil nil ((#("f796" 0 4 (fontified t face font-lock-string-face)) . 3057) (undo-tree-id328 . -3) (undo-tree-id329 . 4) (undo-tree-id330 . 4) (undo-tree-id331 . 4) (undo-tree-id332 . -4)) nil (25593 50611 94822 187000) 0 nil])
([nil nil ((3093 . 3098) (#("red" 0 3 (fontified t face font-lock-string-face)) . 3093) (undo-tree-id325 . -2) (undo-tree-id326 . -3) (undo-tree-id327 . -3)) nil (25593 50611 94819 212000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3104 . 3105) (#("
" 0 1 (fontified nil)) . -3257) (3100 . 3258) 3080) nil (25593 50611 94817 215000) 0 nil])
([nil nil ((3146 . 3158) (#("connected (externally)" 0 10 (fontified t face font-lock-string-face) 10 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face)) . 3146) (undo-tree-id322 . -21) (undo-tree-id323 . -22) (undo-tree-id324 . -22)) nil (25593 50611 94816 387000) 0 nil])
([nil nil ((3242 . 3243) (3240 . 3242) (#("green" 0 5 (fontified t face font-lock-string-face)) . 3240) (undo-tree-id319 . -4) (undo-tree-id320 . -5) (undo-tree-id321 . -5)) nil (25593 50611 94812 609000) 0 nil])
([nil nil ((3240 . 3246) (#("red" 0 3 (fontified t face font-lock-string-face)) . 3240) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (t 25593 50611 101890 461000)) nil (25593 50614 856278 676000) 0 nil])
([nil nil ((1074 . 1076) (#("auto" 0 4 (fontified t face font-lock-string-face)) . 1074) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (t 25593 50614 865223 710000)) nil (25593 50652 835006 521000) 0 nil])
([nil nil ((1774 . 1783) (#("wifi" 0 4 (fontified t)) . -1774) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) 1778 (1774 . 1778) (1773 . 1775) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -1773) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (1768 . 1774) (1759 . 1768) (t 25593 50652 845222 867000) 1677) nil (25593 50691 128055 819000) 0 nil])
([nil nil ((1663 . 1674) (#("wifi_si" 0 7 (fontified t)) . -1663) (undo-tree-id401 . -7) (undo-tree-id402 . -7) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -5) (undo-tree-id438 . -5) (undo-tree-id439 . -5) (undo-tree-id440 . -5) (undo-tree-id441 . -5) (undo-tree-id442 . -5) (undo-tree-id443 . -5) (undo-tree-id444 . -5) (undo-tree-id445 . -5) (undo-tree-id446 . -5) (undo-tree-id447 . -5) (undo-tree-id448 . -5) (undo-tree-id449 . -5) (undo-tree-id450 . -6) (undo-tree-id451 . -6) (undo-tree-id452 . -6) (undo-tree-id453 . -6) (undo-tree-id454 . -6) (undo-tree-id455 . -6) (undo-tree-id456 . -6) (undo-tree-id457 . -6) (undo-tree-id458 . -6) (undo-tree-id459 . -7) (undo-tree-id460 . -7) (undo-tree-id461 . -7) (undo-tree-id462 . -7) (undo-tree-id463 . -7) (undo-tree-id464 . -7) (undo-tree-id465 . -7) (undo-tree-id466 . -7) (undo-tree-id467 . -7) (undo-tree-id468 . -7) (undo-tree-id469 . -7) (undo-tree-id470 . -7) (undo-tree-id471 . -7) (undo-tree-id472 . -7) (undo-tree-id473 . -7) 1670 (1667 . 1670) (#("o" 0 1 (fontified t)) . -1667) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) 1668 (1666 . 1668) (1665 . 1666) (#("d" 0 1 (fontified t)) . -1665) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("i" 0 1 (fontified t)) . -1666) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) 1667 (1663 . 1667) (1662 . 1664) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -1662) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (1657 . 1663) (1649 . 1657) (1649 . 1650) 1670) nil (25593 50691 128038 216000) 0 nil])
([nil nil ((#("        print(wifi_icon)
" 0 8 (fontified t) 8 13 (fontified t face font-lock-builtin-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 25 (fontified t)) . 1787) (undo-tree-id640 . -24) (undo-tree-id641 . -13) (undo-tree-id642 . -13) (undo-tree-id643 . -14) (undo-tree-id644 . -14) (undo-tree-id645 . -14) (undo-tree-id646 . -14) (undo-tree-id647 . -14) (undo-tree-id648 . -14) (undo-tree-id649 . -14) (undo-tree-id650 . -14) (undo-tree-id651 . -14) (undo-tree-id652 . -14) (undo-tree-id653 . -14) (undo-tree-id654 . -14) (undo-tree-id655 . -14) (undo-tree-id656 . -14) (undo-tree-id657 . -14) (undo-tree-id658 . -14) (undo-tree-id659 . -14) (undo-tree-id660 . -14) (undo-tree-id661 . -14) (undo-tree-id662 . -14) (undo-tree-id663 . -14) (undo-tree-id664 . -14) (undo-tree-id665 . -14) (undo-tree-id666 . -23) (undo-tree-id667 . -23) (undo-tree-id668 . 2) (undo-tree-id669 . -24) (undo-tree-id670 . 12) (undo-tree-id671 . -14) (undo-tree-id672 . -23) (undo-tree-id673 . -23) (undo-tree-id674 . -23) (undo-tree-id675 . -23) (undo-tree-id676 . -23) (undo-tree-id677 . -23) (undo-tree-id678 . -25) 1810 (t 25593 50691 138555 342000)) nil (25593 50715 154027 55000) 0 nil])
([nil nil ((#("        print(wifi_signal)
" 0 8 (fontified t) 8 13 (fontified t face font-lock-builtin-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t)) . 1649) (undo-tree-id522 . -26) (undo-tree-id523 . 2) (undo-tree-id524 . -13) (undo-tree-id525 . -13) (undo-tree-id526 . -14) (undo-tree-id527 . -14) (undo-tree-id528 . -14) (undo-tree-id529 . -14) (undo-tree-id530 . -14) (undo-tree-id531 . -14) (undo-tree-id532 . -14) (undo-tree-id533 . -14) (undo-tree-id534 . -14) (undo-tree-id535 . -14) (undo-tree-id536 . -14) (undo-tree-id537 . -14) (undo-tree-id538 . -14) (undo-tree-id539 . -14) (undo-tree-id540 . -14) (undo-tree-id541 . -14) (undo-tree-id542 . -14) (undo-tree-id543 . -14) (undo-tree-id544 . -14) (undo-tree-id545 . -14) (undo-tree-id546 . -14) (undo-tree-id547 . -14) (undo-tree-id548 . -14) (undo-tree-id549 . -14) (undo-tree-id550 . -14) (undo-tree-id551 . -14) (undo-tree-id552 . -14) (undo-tree-id553 . -14) (undo-tree-id554 . -14) (undo-tree-id555 . -14) (undo-tree-id556 . -14) (undo-tree-id557 . -14) (undo-tree-id558 . -14) (undo-tree-id559 . -14) (undo-tree-id560 . -14) (undo-tree-id561 . -14) (undo-tree-id562 . -14) (undo-tree-id563 . -14) (undo-tree-id564 . -14) (undo-tree-id565 . -14) (undo-tree-id566 . -14) (undo-tree-id567 . -14) (undo-tree-id568 . -14) (undo-tree-id569 . -14) (undo-tree-id570 . -14) (undo-tree-id571 . -14) (undo-tree-id572 . -14) (undo-tree-id573 . -14) (undo-tree-id574 . -14) (undo-tree-id575 . -14) (undo-tree-id576 . -14) (undo-tree-id577 . -14) (undo-tree-id578 . -14) (undo-tree-id579 . -14) (undo-tree-id580 . -14) (undo-tree-id581 . -14) (undo-tree-id582 . -14) (undo-tree-id583 . -14) (undo-tree-id584 . -14) (undo-tree-id585 . -14) (undo-tree-id586 . -14) (undo-tree-id587 . -14) (undo-tree-id588 . -14) (undo-tree-id589 . -14) (undo-tree-id590 . -14) (undo-tree-id591 . -14) (undo-tree-id592 . -14) (undo-tree-id593 . -14) (undo-tree-id594 . -14) (undo-tree-id595 . -14) (undo-tree-id596 . -24) (undo-tree-id597 . -23) (undo-tree-id598 . -24) (undo-tree-id599 . -24) (undo-tree-id600 . -24) (undo-tree-id601 . -24) (undo-tree-id602 . -24) (undo-tree-id603 . -24) (undo-tree-id604 . -24) (undo-tree-id605 . -26) (undo-tree-id606 . -8) (undo-tree-id607 . -8) (undo-tree-id608 . -26) (undo-tree-id609 . -8) (undo-tree-id610 . -8) (undo-tree-id611 . -24) (undo-tree-id612 . -24) (undo-tree-id613 . -24) (undo-tree-id614 . -24) (undo-tree-id615 . -24) (undo-tree-id616 . -24) (undo-tree-id617 . -26) (undo-tree-id618 . -8) (undo-tree-id619 . -8) (undo-tree-id620 . -26) (undo-tree-id621 . -8) (undo-tree-id622 . -8) (undo-tree-id623 . -24) (undo-tree-id624 . -24) (undo-tree-id625 . -26) (undo-tree-id626 . -8) (undo-tree-id627 . -8) (undo-tree-id628 . -26) (undo-tree-id629 . -8) (undo-tree-id630 . -8) (undo-tree-id631 . -24) (undo-tree-id632 . -23) (undo-tree-id633 . -23) (undo-tree-id634 . -23) (undo-tree-id635 . -23) (undo-tree-id636 . -23) (undo-tree-id637 . -23) (undo-tree-id638 . -23) (undo-tree-id639 . -27) 1672) nil (25593 50715 154003 587000) 0 nil])
([nil nil ((1844 . 1845) (#("0" 0 1 (fontified t face font-lock-string-face)) . -1844) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) 1845 (1840 . 1845) (t 25593 50715 161888 154000)) nil (25593 50724 245638 168000) 0 nil])
([nil nil ((#("\"...\"" 0 5 (fontified t face font-lock-string-face)) . 1226) (undo-tree-id685 . -4) (undo-tree-id686 . -4) (undo-tree-id687 . -4) (undo-tree-id688 . -4) (undo-tree-id689 . -5) (undo-tree-id690 . -5) (undo-tree-id691 . -4) (undo-tree-id692 . -4) (undo-tree-id693 . -3) (undo-tree-id694 . -3) (undo-tree-id695 . -2) (undo-tree-id696 . -2) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -5) (undo-tree-id700 . -4) (undo-tree-id701 . -5) (undo-tree-id702 . -5) (undo-tree-id703 . -4) (undo-tree-id704 . -4) (undo-tree-id705 . -4) (undo-tree-id706 . -4) (undo-tree-id707 . -4) (undo-tree-id708 . -4) (undo-tree-id709 . -4) (undo-tree-id710 . -4) (undo-tree-id711 . -4) (undo-tree-id712 . -5) 1230 (t 25593 50724 251887 946000)) nil (25593 50740 858069 853000) 0 nil])
([nil nil ((1226 . 1228) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -1226) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (1226 . 1227)) nil (25593 50740 858050 555000) 0 nil])
([nil nil ((#("print(devs)
" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t)) . 1246) (undo-tree-id713 . -11) (undo-tree-id714 . -10) (undo-tree-id715 . -10) (undo-tree-id716 . 2) (undo-tree-id717 . -11) (undo-tree-id718 . 7) (undo-tree-id719 . -6) (undo-tree-id720 . -10) (undo-tree-id721 . -10) (undo-tree-id722 . -10) (undo-tree-id723 . -10) (undo-tree-id724 . -10) (undo-tree-id725 . -10) (undo-tree-id726 . -12) 1256 (t 25593 50740 865220 906000)) nil (25593 50748 599513 503000) 0 nil])
([nil nil ((1259 . 1260) (1258 . 1260) (#("[" 0 1 (fontified nil)) . -1258) (1247 . 1259) (#("    " 0 4 (fontified t)) . -1247) (undo-tree-id750 . -4) 1251 (1247 . 1251) (#("    " 0 4 (fontified nil)) . 1246) (undo-tree-id751 . -4) (1250 . 1251) (1245 . 1250) (t 25593 50748 605220 732000) 1241) nil (25593 52302 829557 519000) 0 nil])
([nil nil ((1266 . 1273) (1265 . 1267) (#("'" 0 1 (fontified nil)) . -1265) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (1261 . 1266)) nil (25593 52302 829555 340000) 0 nil])
([nil nil ((1274 . 1275)) nil (25593 52302 829553 506000) 0 nil])
([nil nil ((1286 . 1290) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1286) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1287) (undo-tree-id743 . -1) (1286 . 1288) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1286) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (1286 . 1287) (1285 . 1287) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -1285) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (1280 . 1286) (1275 . 1280) 1274) nil (25593 52302 829552 534000) 0 nil])
([nil nil ((1292 . 1298) (1291 . 1293) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1291) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (1291 . 1292) (1290 . 1292) (#("[" 0 1 (fontified nil)) . -1290) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (1290 . 1291)) nil (25593 52302 829542 315000) 0 nil])
([nil nil ((1286 . 1296)) nil (25593 52302 829531 85000) 0 nil])
([nil nil ((1311 . 1312) (1296 . 1297) 1309) nil (25593 52302 829528 341000) 0 nil])
([nil nil ((1326 . 1328) (#("(" 0 1 (fontified nil face font-lock-constant-face)) . -1326) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (1325 . 1327) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -1325) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (#("r" 0 1 (fontified t)) . -1326) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) 1327 (1319 . 1327) (#("s" 0 1 (fontified t)) . -1319) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) 1320 (1318 . 1320) (1313 . 1318) (t 25593 52302 835185 861000) 1296) nil (25593 52309 767320 263000) 0 nil])
([nil nil ((#("if sys.argv[1] == 'devices':
    print(json.dumps(devs['DEVICE']))
    sys.exit()
" 0 2 (fontified t face font-lock-keyword-face) 2 7 (fontified t) 7 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t face highlight-numbers-number) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 18 (fontified t) 18 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t) 28 29 (fontified t) 29 33 (fontified t) 33 38 (fontified t face font-lock-builtin-face) 38 39 (fontified t face (rainbow-delimiters-depth-1-face)) 39 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-2-face)) 50 54 (fontified t) 54 55 (fontified t face (rainbow-delimiters-depth-3-face)) 55 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 64 (fontified t face (rainbow-delimiters-depth-3-face)) 64 65 (fontified t face (rainbow-delimiters-depth-2-face)) 65 66 (fontified t face (rainbow-delimiters-depth-1-face)) 66 67 (fontified t) 67 75 (fontified t) 75 79 (fontified t face font-lock-constant-face) 79 80 (fontified t face (rainbow-delimiters-depth-1-face)) 80 81 (fontified t face (rainbow-delimiters-depth-1-face)) 81 82 (fontified t)) . 1247) (undo-tree-id811 . -79) (undo-tree-id812 . -79) (undo-tree-id813 . -12) (undo-tree-id814 . -81) (undo-tree-id815 . 2) (undo-tree-id816 . -79) (undo-tree-id817 . -63) (undo-tree-id818 . -79) (undo-tree-id819 . -79) (undo-tree-id820 . -79) (undo-tree-id821 . -79) (undo-tree-id822 . -79) (undo-tree-id823 . -79) (undo-tree-id824 . -12) (undo-tree-id825 . -12) (undo-tree-id826 . -79) 1259 (t 25593 52309 778519 44000)) nil (25593 52405 172777 793000) 0 nil])
([nil nil ((3896 . 3978)) nil (25593 52405 172501 995000) 0 nil])
([nil nil ((3946 . 3952) (#("devs" 0 4 (fontified t)) . 3946) (undo-tree-id808 . -3) (undo-tree-id809 . -4) (undo-tree-id810 . -4)) nil (25593 52405 172501 409000) 0 nil])
([nil nil ((#("['DEVICE']" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face (rainbow-delimiters-depth-3-face))) . 3952) (undo-tree-id776 . -9) (undo-tree-id777 . -9) (undo-tree-id778 . -9) (undo-tree-id779 . 10) (undo-tree-id780 . -9) (undo-tree-id781 . 10) (undo-tree-id782 . 10) (undo-tree-id783 . 10) (undo-tree-id784 . 10) (undo-tree-id785 . 10) (undo-tree-id786 . 10) (undo-tree-id787 . 10) (undo-tree-id788 . -10) (undo-tree-id789 . -9) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -7) (undo-tree-id795 . -7) (undo-tree-id796 . -8) (undo-tree-id797 . -8) (undo-tree-id798 . 1) (undo-tree-id799 . -10) (undo-tree-id800 . 10) (undo-tree-id801 . -1) (undo-tree-id802 . -10) (undo-tree-id803 . -10) (undo-tree-id804 . -9) (undo-tree-id805 . -9) (undo-tree-id806 . -9) (undo-tree-id807 . -10) 3961) nil (25593 52405 172499 138000) 0 nil])
([nil nil ((3952 . 3957)) nil (25593 52405 172481 295000) 0 nil])
([nil nil ((3957 . 3959) (#("(" 0 1 (fontified nil)) . -3957) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (3957 . 3958)) nil (25593 52405 172480 621000) 0 nil])
([nil nil ((3960 . 3961) (3946 . 3947) 3958) nil (25593 52405 172470 802000) 0 nil])
([nil nil ((3946 . 3950)) nil (25593 52405 172467 745000) 0 nil])
([nil nil ((3906 . 3914) (3905 . 3907) (#("(" 0 1 (fontified nil)) . -3905) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (3899 . 3906) (t 25593 52405 178516 903000)) nil (25593 52579 873624 233000) 0 nil])
([nil nil ((3920 . 3924) (3915 . 3920)) nil (25593 52579 873611 838000) 0 nil])
([nil nil ((#("if" 0 2 (fontified t face font-lock-keyword-face)) . 3899) (undo-tree-id834 . -1) (undo-tree-id835 . -2) (undo-tree-id836 . -2) (t 25593 52579 881846 306000)) nil (25593 52597 943534 433000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3899) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . 1) (undo-tree-id832 . -1) (undo-tree-id833 . -1)) nil (25593 52597 943529 500000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1961) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) 1962 (1961 . 1962) (t 25593 52597 948512 567000)) nil (25593 52656 743228 720000) 0 nil])
([nil nil ((1961 . 1962)) nil (25593 52656 743218 665000) 0 nil])
([nil nil ((2124 . 2125)) nil (25593 52656 743218 390000) 0 nil])
([nil nil ((2268 . 2269)) nil (25593 52656 743218 60000) 0 nil])
([nil nil ((2417 . 2418)) nil (25593 52656 743217 686000) 0 nil])
([nil nil ((2568 . 2569)) nil (25593 52656 743217 416000) 0 nil])
([nil nil ((2739 . 2740)) nil (25593 52656 743217 157000) 0 nil])
([nil nil ((2890 . 2891)) nil (25593 52656 743216 615000) 0 nil])
([nil nil ((3046 . 3047)) nil (25593 52656 743216 43000) 0 nil])
([nil nil ((3194 . 3195)) nil (25593 52656 743212 864000) 0 nil])
([nil nil ((1655 . 1656) (t 25593 52656 751844 578000)) nil (25593 52689 574222 294000) 0 nil])
([nil nil ((1685 . 1686)) nil (25593 52689 574221 362000) 0 nil])
([nil nil ((1715 . 1716)) nil (25593 52689 574220 629000) 0 nil])
([nil nil ((1745 . 1746)) nil (25593 52689 574217 306000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 1745) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (t 25593 52689 581843 837000)) nil (25593 52733 402927 242000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 1715) (undo-tree-id861 . -1) (undo-tree-id862 . -1)) nil (25593 52733 402925 557000) 0 nil])
([nil nil ((apply -2 1635 1843 undo--wrap-and-run-primitive-undo 1635 1843 ((1643 . 1645) 1690))) nil (25593 52733 402923 771000) 0 nil])
([nil nil ((1786 . 1787) (#("wifi" 0 4 (fontified t)) . 1786) (undo-tree-id858 . -3) (undo-tree-id859 . -4) (undo-tree-id860 . -4)) nil (25593 52733 402922 909000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1794 . 1795) (nil fontified nil 1786 . 1795) (1786 . 1795)) nil (25593 52733 402920 427000) 0 nil])
([nil nil ((#("e_icon" 0 6 (fontified t)) . 1795) (undo-tree-id846 . -5) (undo-tree-id847 . 5) (undo-tree-id848 . 5) (undo-tree-id849 . 5) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . 6) (undo-tree-id853 . 6) (undo-tree-id854 . 6) (undo-tree-id855 . -6) (undo-tree-id856 . -6) (undo-tree-id857 . -6)) nil (25593 52733 402917 588000) 0 nil])
([nil nil ((#("nerd-" 0 5 (fontified t face font-lock-string-face)) . 1830) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -5) (undo-tree-id870 . -4) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -5) 1834 (t 25593 52733 411842 858000)) nil (25593 53781 549727 313000) 0 nil])
([nil nil ((1819 . 1820) (1811 . 1812) 1817 (t 25593 53781 558485 937000)) nil (25593 54659 827548 570000) 0 nil])
([nil nil ((1821 . 1822) (1811 . 1812) 1819) nil (25593 54659 827547 284000) 0 nil])
([nil nil ((1811 . 1812)) nil (25593 54659 827546 291000) 0 nil])
([nil nil ((1814 . 1825) (#("wifi_" 0 5 (fontified t face nil)) . -1814) (undo-tree-id877 . -5) (undo-tree-id878 . -5) (undo-tree-id879 . -5) 1819 (1814 . 1819) (1815 . 1816) (1813 . 1815) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -1813) (1813 . 1814)) nil (25593 54659 827544 806000) 0 nil])
([nil nil ((1826 . 1827)) nil (25593 54659 827507 436000) 0 nil])
([nil nil ((999 . 1006) (998 . 1000) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -998) (#("prefix" 0 6 (fontified nil)) . 999) (998 . 999) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 998 1007 nil nil nil t #s(yas--exit 1008 nil))) #s(yas--exit 1008 nil) 0 nil #s(yas--field 1 998 1007 nil nil nil t #s(yas--exit 1008 nil)) nil nil)) (987 . 1005) (#("startswith" 0 10 (fontified nil)) . -987) (undo-tree-id308 . -10) (987 . 997) (#("starts" 0 6 (fontified t)) . -987) (undo-tree-id309 . -6) (undo-tree-id310 . -6) 993 (979 . 993) (#("w" 0 1 (fontified t)) . -979) (undo-tree-id311 . -1) (#("s" 0 1 (fontified t)) . -980) (undo-tree-id312 . -1) 981 (970 . 981) (965 . 970) (t 25593 54659 838466 397000) 938) nil (25885 35871 14089 955000) 0 nil])
([nil nil ((apply yas--snippet-revive 987 1008 #s(yas--snippet nil (#s(yas--field 1 998 1007 nil nil nil t #s(yas--exit 1008 nil))) #s(yas--exit 1008 nil) 0 nil #s(yas--field 1 998 1007 nil nil nil t #s(yas--exit 1008 nil)) nil nil))) nil (25885 35871 14086 480000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 994) (993 . 994) (992 . 994) (#("(" 0 1 (fontified nil)) . -992) (992 . 993) (#("9" 0 1 (fontified t)) . -992) (undo-tree-id306 . -1) (#("0" 0 1 (fontified t)) . -993) (undo-tree-id307 . -1) 994 (986 . 994)) nil (25885 35871 14085 718000) 0 nil])
([nil nil ((1016 . 1017)) nil (25885 35871 14083 889000) 0 nil])
([nil nil ((1043 . 1045) (1042 . 1044) (#("'" 0 1 (fontified nil)) . -1042) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (1042 . 1043) (#("d" 0 1 (fontified t)) . -1042) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("e" 0 1 (fontified t)) . -1043) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("v" 0 1 (fontified t)) . -1044) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("i" 0 1 (fontified t)) . -1045) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("c" 0 1 (fontified t)) . -1046) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("e" 0 1 (fontified t)) . -1047) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("s" 0 1 (fontified t)) . -1048) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) 1049 (1039 . 1049) (1026 . 1039) (#("devices" 0 7 (fontified t)) . -1026) (undo-tree-id275 . -7) (undo-tree-id276 . -7) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -5) (undo-tree-id291 . -5) (undo-tree-id292 . -5) (undo-tree-id293 . -6) (undo-tree-id294 . -6) (undo-tree-id295 . -6) (undo-tree-id296 . -6) (undo-tree-id297 . -6) (undo-tree-id298 . -6) (undo-tree-id299 . -6) (undo-tree-id300 . -7) (undo-tree-id301 . -7) (undo-tree-id302 . -7) (undo-tree-id303 . -7) (undo-tree-id304 . -7) (undo-tree-id305 . -7) 1033 (1026 . 1033) (1017 . 1026) 1016) nil (25885 35871 14078 588000) 0 nil])
([nil nil ((1076 . 1078) (#("(" 0 1 (fontified nil)) . -1076) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (1065 . 1077) (1052 . 1065) (#("device" 0 6 (fontified t)) . -1052) (undo-tree-id4 . -6) (undo-tree-id5 . -6) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -6) (undo-tree-id25 . -6) (undo-tree-id26 . -6) (undo-tree-id27 . -6) (undo-tree-id28 . -6) (undo-tree-id29 . -6) (undo-tree-id30 . -6) (undo-tree-id31 . -6) 1058 (1052 . 1058) (1051 . 1053) (#("(" 0 1 (fontified nil)) . -1051) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (1049 . 1052) (#("n" 0 1 (fontified t)) . -1049) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) 1050 (1046 . 1050)) nil (25885 35871 13856 252000) 0 nil])
([nil current ((1079 . 1081) (1078 . 1080) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1078) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (1078 . 1079)) nil (25885 35871 13833 179000) 0 nil])
nil
