#!/usr/bin/env python

import os
import subprocess

GDK_SCALE = int(os.getenv('GDK_SCALE', 1))
HOSTNAME = subprocess.check_output('echo "$HOSTNAME"', shell=True, text=True).strip()


def hc(*args):
    P = subprocess.Popen(
        f'herbstclient {" ".join(args)}', text=True, shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    err = not bool(P.stderr.read())
    return P.stdout.read(), err


startup_cmds = [
    "localectl --no-convert set-x11-keymap us,ara pc104 ,qwerty"
    " 'grp:alt_shift_toggle,caps:swapescape'",
    "setxkbmap -option 'caps:escape' -option 'altwin:menu_win'"
    " -option 'terminate:ctrl_alt_bksp'",
    "perWindowLayoutD",
    "sxhkd -c ~/.config/sxhkd/apps_keys",
    "picom",
    "redshift",
    "nm-applet", # for notifications
    "udiskie -T",
    f'dunst -scale {GDK_SCALE}',
    "emacs --daemon",
    "mpd",
    "~/.config/bspwm/scripts/set_wallpaper.py",
    "~/Scripts/LemonBar/start_bar_herbst.py",
    "xfce4-panel -d --sm-client-disable",
    "~/.config/herbstluftwm/auto_move_sticky.py",
    "~/.config/herbstluftwm/monitor_sticky_rules.py",
    "syncthing serve --no-browser",
    'telegram-desktop',
    # 'emacs --eval \'(org-agenda nil "a")\' --name AgendaEmacs',
    # 'davmail ~/.config/davmail/davmail.properties',
    'xautolock -locker \'dunstctl set-paused true;i3lock -e -c 000000;dunstctl set-paused false\' -notify 30 -notifier "notify-send xautolocker \'locking desktop in 30 secs\'" -detectsleep'
]

# this is a simple config for herbstluftwm
hc('emit_hook', 'reload')

# remove all existing keybindings
hc('keyunbind', '--all')

MOD = 'Mod4'

hc(f'keybind {MOD}-Control-Shift-q quit')
hc(f'keybind {MOD}-Control-Shift-r reload')
hc(f'keybind {MOD}-q close_or_remove')

# focusing, moving and resizing clients
RESIZE_STEP = 0.05
DIR = {'left': 'h', 'right': 'l', 'up': 'k', 'down': 'j'}
for dire, key in DIR.items():
    # Move in direction across tabs too
    hc(f'keybind {MOD}-{dire.title()} focus {dire}')
    hc(f'keybind {MOD}-{key} focus {dire}')
    # Jump between frames
    hc(f'keybind {MOD}-Control-{dire.title()} focus --level=tabs {dire}')
    hc(f'keybind {MOD}-Control-{key} focus --level=tabs {dire}')
    # Move windows between frames
    hc(f'keybind {MOD}-Shift-{dire.title()} shift {dire}')
    hc(f'keybind {MOD}-Shift-{key} shift {dire}')
    # Resize frames
    hc(f'keybind {MOD}-Shift-Control-{dire.title()} resize {dire} +{RESIZE_STEP}')
    hc(f'keybind {MOD}-Shift-Control-{key} resize {dire} +{RESIZE_STEP}')

# splitting frames
# create an empty frame at the specified direction
hc(f"keybind {MOD}-z split bottom 0.5")
hc(f"keybind {MOD}-x split right 0.5")
# Merge frames
hc(f'keybind {MOD}-r remove')
# let the current frame explode into subframes
hc(f"keybind {MOD}-Control-space split explode")

# according to
# https://www.reddit.com/r/herbstluftwm/comments/iwewnn/settings_default_frame_layout_is_not_working/
# this has to be set before defining tags
hc("set default_frame_layout 2")
hc("set_layout max")

tags = {'WEB': '1', 'DEV': '2', 'TERM': '3', 'DOCS': '4', 'GIMP': '5',
        'READ': '6', 'AGENDA': '7', 'DOWN': '8', 'CHAT': '9', 'GAME': '0'}
tags_lst = list(tags.keys())

hc(f'rename default {list(tags.keys())[0]}')
for tag, key in tags.items():
    hc(f'add {tag}')
    # use previous focused tag if the selected tag is currently focused
    hc(f'keybind {MOD}-{key} or , and . chain .-. compare '
       f'tags.focus.name != {tag} . use {tag} , use_previous')
    hc('keybind', f'{MOD}-Shift-{key}', 'move', tag)

# cycle through tags
hc(f'keybind {MOD}-period use_index +1 --skip-visible')
hc(f'keybind {MOD}-comma  use_index -1 --skip-visible')

# window states
hc(f'keybind {MOD}-m set_attr clients.focus.minimized on')
hc(f'keybind {MOD}-Ctrl-m jumpto longest-minimized')
hc(f'keybind {MOD}-Shift-m jumpto last-minimized')
# hc(f"keybind {MOD}-Ctrl-m spawn sh -c '~/.config/herbstluftwm/restore_minimized.py'")
hc(f'keybind {MOD}-f fullscreen toggle')
hc(f'keybind {MOD}-Shift-f set_attr clients.focus.floating toggle')
hc(f'keybind {MOD}-Shift-s chain .-. new_attr bool clients.focus.my_sticky'
   ' .-. set_attr clients.focus.my_sticky toggle ')

# move floating
hc(f"keybind {MOD}-v spawn sh -c '~/.config/herbstluftwm/move_floating_to_corner.py'")
hc(f"keybind {MOD}-Shift-v spawn sh -c '~/.config/herbstluftwm/move_floating_to_corner.py -1'")

# scratchpads
scratch_rules = 'rule once class=konsole floating=on floatplacement=none'
scratch_script = '~/.config/herbstluftwm/scratch.py'
hc(f"keybind {MOD}-d spawn sh -c"
   f" '{scratch_script} -c dropdown_term -w 1 -ht 0.8 -y "
   f"{GDK_SCALE*20} -x 0 --termflags --profile=Default-Black'")
hc(f'keybind {MOD}-Tab or , and . compare tags.focus.curframe_wcount = 2 '
   '. cycle_layout +1 , cycle_layout +1')

# mouse
hc('mouseunbind --all')
hc(f'mousebind {MOD}-Button1 move')
hc(f'mousebind {MOD}-Button2 zoom')
hc(f'mousebind {MOD}-Button3 resize')

# focus
hc(f'keybind {MOD}-BackSpace   cycle_monitor')
hc(f'keybind {MOD}-Shift-Tab   cycle_all +1')
hc(f'keybind {MOD}-c cycle')
hc(f'keybind {MOD}-Shift-c cycle -1')
hc(f'keybind {MOD}-grave jumpto urgent')
hc(f"keybind {MOD}-F1 spawn sh -c 'man -Tpdf herbstluftwm | zathura -'")

# Theming and general settings
theme_settings = {
    "frame_border_active_color": "'#fe6060'",
    "frame_border_normal_color": "'#93959b'",
    "frame_bg_normal_color": "'#100f10'",
    "frame_bg_active_color": "'#000000'",
    "frame_border_width": f"{1*GDK_SCALE}",
    "window_border_width": "0", "always_show_frame": "off",
    "frame_bg_transparent": "on", "frame_transparent_width": "0",
    "frame_gap": f"{4*GDK_SCALE}", "window_gap": "0",
    "frame_padding": "0", "smart_window_surroundings": "off",
    "smart_frame_surroundings": "on", "mouse_recenter_gap": "0",
    "auto_detect_monitors": "on", "focus_follows_mouse": "on",
    "tree_style": "'╾│ ├└╼─┐'",
}

theme_attributes = {
    "tiling.reset": 1, "floating.reset": 1,
    "active.color": "'#0e0e0e'", "normal.color": "'#424242'",
    "title_color": "'#ffffff'", "urgent.color": "'#a4202a'",
    "inner_width": "0", "inner_color": "black", "border_width": f"{1*GDK_SCALE}",
    "floating.border_width": f"{1*GDK_SCALE}",
    "floating.outer_width": "1", "floating.outer_color": "'#dbbe5f'",
    "active.inner_color": "'#000000'", "active.outer_color": "'#000000'",
    "background_color": "'#141414'", "title_height": f"{15*GDK_SCALE}",
    "title_font": f"Roboto:pixelsize={GDK_SCALE*12}",
    "title_depth": f"{5*GDK_SCALE}", "title_align": "center",
    "title_when": "multiple_tabs",
}

for attr, vlu in theme_attributes.items():
    hc(f"attr theme.{attr} {vlu}")

for stng, vlu in theme_settings.items():
    hc(f"set {stng} {vlu}")

hc("detect_monitors")

#########
# rules #
#########
hc('unrule -F')
hc('rule focus=on floatplacement=smart')
hc("rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on")
hc("rule fixedsize floating=on")
hc("rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on")
hc("rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)'"
   " manage=off")
hc("rule class='pinentry-gtk-2' floating=on")
hc("rule instance='pinentry-gtk-2' floating=on")
hc("rule class='Oblogout' fullscreen=on")
hc(f"rule class='TelegramDesktop' tag='{tags_lst[8]}'")
hc(f"rule class='transmission' tag='{tags_lst[7]}'")
hc(f"rule class='discord' tag='{tags_lst[8]}'")
hc(f"rule class='qutebrowser' tag='{tags_lst[0]}'")
hc(f"rule class='firefox' tag='{tags_lst[0]}'")
hc("rule class='dropdown_.*' floating=on floatplacement=none")
hc("rule class='gcr-prompter' floating=on floatplacement=none")
hc("rule instance='dropdown_.*' floating=on floatplacement=none")
hc("rule title='Picture-in-Picture' floating=on floatplacement=none focus=off hook='make_sticky'")
hc("rule instance='qutebrowser-youtube' floating=on floatplacement=none focus=off hook='make_sticky'")
hc('rule title=AgendaEmacs tag=AGENDA')
hc('rule fixedsize floating=on')

if hc('new_attr bool my_not_first_autostart')[1]:
    for cmd in startup_cmds:
        subprocess.Popen(cmd, text=True, shell=True)
    if HOSTNAME == 'yusufs-lenovo':
        xinput_list = subprocess.check_output('xinput list --name-only',
                                              shell=True, text=True)
        if 'Logitech USB Optical Mouse' in xinput_list.splitlines():
            subprocess.Popen(
                'xinput set-prop "Logitech USB Optical Mouse" "libinput Accel Speed" 1',
                shell=True, text=True)
        subprocess.Popen('xinput disable "AT Translated Set 2 keyboard"', shell=True, text=True)
        subprocess.Popen('xinput disable "SynPS/2 Synaptics TouchPad"', shell=True, text=True)
    elif HOSTNAME == 'yusufs-dell':
        subprocess.Popen('autorandr --cycle'.split())
        subprocess.Popen('touchegg')

hc("unlock")
