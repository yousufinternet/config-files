(undo-tree-save-format-version . 1)
"8107d06f7bccdba756f8bb599c3b7dd722b8ff42"
[nil nil nil nil (26009 10283 624301 763000) 0 nil]
([nil nil ((1 . 23) (t . -1)) nil (26009 10283 624300 903000) 0 nil])
([nil nil ((23 . 24) (22 . 23) 21) nil (26009 10283 624300 447000) 0 nil])
([nil nil ((24 . 35)) nil (26009 10283 624300 92000) 0 nil])
([nil nil ((47 . 49) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -47) (47 . 48) (46 . 48) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -46) (37 . 47) (36 . 37) (35 . 36) 34) nil (26009 10283 624299 514000) 0 nil])
([nil nil ((24 . 33) (24 . 25) 34) nil (26009 10283 624298 799000) 0 nil])
([nil nil ((97 . 110) (87 . 97) (#("Rofi" 0 4 (face font-lock-string-face fontified t)) . -87) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) 91 (77 . 91) (76 . 78) (#("'" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -76) (undo-tree-id71 . -1) (#("path" 0 4 (fontified nil)) . 77) (undo-tree-id72 . -4) (76 . 77) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 76 111 nil nil nil t #s(yas--exit 112 nil))) #s(yas--exit 112 nil) 0 nil #s(yas--field 1 76 111 nil nil nil t #s(yas--exit 112 nil)) nil nil)) (65 . 81) (#("expanduser" 0 10 (fontified nil)) . -65) (undo-tree-id73 . -10) (65 . 75) (#("exp" 0 3 (fontified t)) . -65) (undo-tree-id74 . -3) (undo-tree-id75 . -3) 68 (57 . 68)) nil (26009 10283 624297 703000) 0 nil])
([nil nil ((apply yas--snippet-revive 65 112 #s(yas--snippet nil (#s(yas--field 1 76 111 nil nil nil t #s(yas--exit 112 nil))) #s(yas--exit 112 nil) 0 nil #s(yas--field 1 76 111 nil nil nil t #s(yas--exit 112 nil)) nil nil))) nil (26009 10283 624292 666000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 112) (undo-tree-id66 . -1) (undo-tree-id67 . -1)) nil (26009 10283 624292 217000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 112) (undo-tree-id63 . 1) (undo-tree-id64 . -1) (undo-tree-id65 . -1)) nil (26009 10283 624290 634000) 0 nil])
([nil nil ((113 . 119)) nil (26009 10283 624286 785000) 0 nil])
([nil nil ((134 . 135) (133 . 135) (#("(" 0 1 (fontified nil)) . -133) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (133 . 134) (#("s" 0 1 (fontified t)) . -133) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 134 (124 . 134) (119 . 124) 118) nil (26009 10283 624285 805000) 0 nil])
([nil nil ((124 . 135)) nil (26009 10283 624276 654000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -149) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) 153 (148 . 153) (#("
" 0 1 (fontified t)) . -148) (undo-tree-id10 . -1) (undo-tree-id11 . 1) (undo-tree-id12 . 1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 149 (#("    " 0 4 (fontified t)) . -149) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) 153 (149 . 153) (#("    " 0 4 (fontified nil)) . 148) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (152 . 153) (147 . 152) 134) nil (26009 10283 624274 306000) 0 nil])
([nil nil ((54 . 69) (46 . 54) (45 . 46) 34) nil (26009 10283 624224 653000) 0 nil])
([nil nil ((197 . 199) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -197) (197 . 198) (196 . 198) (#("(" 0 1 (fontified nil)) . -196) (188 . 197) (173 . 188) (#("s" 0 1 (fontified t)) . -173) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("p" 0 1 (fontified t)) . -174) (undo-tree-id108 . -1) (undo-tree-id109 . -1) 175 (173 . 175) (t 26009 10283 626942 495000)) nil (26009 10789 254991 718000) 0 nil])
([nil nil ((nil rear-nonsticky nil 239 . 240) (nil fontified nil 198 . 240) (198 . 240) 197) nil (26009 10789 254988 110000) 0 nil])
([nil nil ((241 . 243)) nil (26009 10789 254987 346000) 0 nil])
([nil nil ((#("-filter \"^\" " 0 12 (face font-lock-string-face fontified t)) . 222) (undo-tree-id102 . -11) (undo-tree-id103 . -11) (undo-tree-id104 . -11) (undo-tree-id105 . -11) 233) nil (26009 10789 254986 777000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-string-face fontified t)) . -225) (undo-tree-id99 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -226) (undo-tree-id100 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -227) (undo-tree-id101 . -1) 228 (225 . 228)) nil (26009 10789 254984 275000) 0 nil])
([nil nil ((231 . 241)) nil (26009 10789 254982 164000) 0 nil])
([nil nil ((270 . 272) (#("O" 0 1 (fontified t)) . -270) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("P" 0 1 (fontified t)) . -271) (undo-tree-id97 . -1) 272 (264 . 272) (245 . 264) (#("r" 0 1 (face font-lock-builtin-face fontified t)) . -245) (undo-tree-id98 . -1) 246 (243 . 246) (241 . 243)) nil (26009 10789 254981 415000) 0 nil])
([nil nil ((301 . 303) (300 . 302) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -300) (300 . 301) (#("s" 0 1 (fontified t)) . 300) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 300 326 nil nil nil t #s(yas--exit 327 nil))) #s(yas--exit 327 nil) 1 nil #s(yas--field 1 300 326 nil nil nil t #s(yas--exit 327 nil)) nil nil)) (294 . 302) (#("write" 0 5 (fontified nil)) . -294) (undo-tree-id90 . -5) (294 . 299) (#("w" 0 1 (fontified t)) . -294) (undo-tree-id91 . -1) (undo-tree-id92 . -1) 295 (287 . 295) (275 . 287) (#("rofi" 0 4 (fontified t)) . -275) (undo-tree-id93 . -4) (undo-tree-id94 . -4) 279 (275 . 279) (274 . 275) (273 . 274) 272) nil (26009 10789 254977 935000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 325) (324 . 325) (323 . 325) (#("(" 0 1 (fontified nil)) . -323) (318 . 324) (310 . 318) (309 . 311) (#("(" 0 1 (fontified nil)) . -309) (304 . 310)) nil (26009 10789 254973 575000) 0 nil])
([nil nil ((333 . 341) (328 . 333) (apply yas--snippet-revive 294 328 #s(yas--snippet nil (#s(yas--field 1 300 326 nil nil nil t #s(yas--exit 327 nil))) #s(yas--exit 327 nil) 1 nil #s(yas--field 1 300 326 nil nil nil t #s(yas--exit 327 nil)) nil nil)) (327 . 328) 326) nil (26009 10789 254972 374000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 347) (346 . 347) (345 . 347) (#("(" 0 1 (fontified nil)) . -345) (332 . 346) (#("+" 0 1 (face font-lock-operator-face fontified t)) . -332) (undo-tree-id76 . -1) (#("p" 0 1 (fontified t)) . -333) (undo-tree-id77 . -1) (#("r" 0 1 (fontified t)) . -334) (undo-tree-id78 . -1) (#("o" 0 1 (fontified t)) . -335) (undo-tree-id79 . -1) (#("c" 0 1 (fontified t)) . -336) (undo-tree-id80 . -1) (#("e" 0 1 (fontified t)) . -337) (undo-tree-id81 . -1) (#("s" 0 1 (fontified t)) . -338) (undo-tree-id82 . -1) (#("s" 0 1 (fontified t)) . -339) (undo-tree-id83 . -1) (#("." 0 1 (fontified t)) . -340) (undo-tree-id84 . -1) 341 (332 . 341) (#("." 0 1 (fontified t)) . -332) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("p" 0 1 (fontified t)) . -333) (undo-tree-id87 . -1) (#("r" 0 1 (fontified t)) . -334) (undo-tree-id88 . -1) (#("o" 0 1 (fontified t)) . -335) (undo-tree-id89 . -1) 336 (328 . 336) (328 . 329) 340) nil (26009 10789 254970 46000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 374) (373 . 374) (372 . 374) (#("(" 0 1 (fontified nil)) . -372) (361 . 373)) nil (26009 10789 254953 871000) 0 nil])
([nil nil ((352 . 357) (348 . 352)) nil (26009 10789 254953 349000) 0 nil])
([nil nil ((412 . 414) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -412) (407 . 413) (407 . 408) (#(" " 0 1 (fontified nil)) . -407) (407 . 408) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -407) (406 . 408) (#(" " 0 1 (fontified nil)) . -406) (406 . 407) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -406) (406 . 407) (395 . 406) (394 . 396) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -394) (394 . 395) (393 . 395) (#("(" 0 1 (fontified nil)) . -393) (393 . 394) (385 . 393) (384 . 385) (383 . 384) 356) nil (26009 10789 254952 32000) 0 nil])
([nil nil ((412 . 414)) nil (26009 10789 254949 859000) 0 nil])
([nil nil ((417 . 418) (#(" " 0 1 (fontified nil)) . -417) (417 . 418) (#("'" 0 1 (face font-lock-string-face fontified nil)) . -417) (416 . 418)) nil (26009 10789 254949 189000) 0 nil])
([nil nil ((394 . 395)) nil (26009 10789 254947 645000) 0 nil])
([nil nil ((#(")" 0 1 (face nil fontified nil)) . 439) (438 . 439) (437 . 439) (#("(" 0 1 (face nil fontified nil)) . -437) (425 . 438) (424 . 426) (#("[" 0 1 (face nil fontified nil)) . -424) (418 . 425) (416 . 418)) nil (26009 10789 254943 662000) 0 nil])
([nil nil ((300 . 310) (#("e" 0 1 (fontified t)) . -300) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("n" 0 1 (fontified t)) . -301) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("c" 0 1 (fontified t)) . -302) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("o" 0 1 (fontified t)) . -303) (undo-tree-id116 . -1) (#("d" 0 1 (fontified t)) . -304) (undo-tree-id117 . -1) (#("e" 0 1 (fontified t)) . -305) (undo-tree-id118 . -1) 306 (300 . 306) (t 26009 10789 260283 753000)) nil (26009 10881 311660 898000) 0 nil])
([nil nil ((337 . 338) (310 . 311) 335) nil (26009 10881 311644 88000) 0 nil])
([nil nil ((#("s" 0 1 (face nil fontified t)) . -428) (undo-tree-id189 . -1) (#("t" 0 1 (face nil fontified t)) . -429) (undo-tree-id190 . -1) (#("r" 0 1 (face nil fontified t)) . -430) (undo-tree-id191 . -1) (#("." 0 1 (face nil fontified t)) . -431) (undo-tree-id192 . -1) (#("d" 0 1 (face nil fontified t)) . -432) (undo-tree-id193 . -1) (#("e" 0 1 (face nil fontified t)) . -433) (undo-tree-id194 . -1) (#("c" 0 1 (face nil fontified t)) . -434) (undo-tree-id195 . -1) (#("o" 0 1 (face nil fontified t)) . -435) (undo-tree-id196 . -1) (#("d" 0 1 (face nil fontified t)) . -436) (undo-tree-id197 . -1) (#("e" 0 1 (face nil fontified t)) . -437) (undo-tree-id198 . -1) 438 (434 . 438) (#("v" 0 1 (face nil fontified t)) . -434) (undo-tree-id199 . -1) (#("o" 0 1 (face nil fontified t)) . -435) (undo-tree-id200 . -1) (#("c" 0 1 (face nil fontified t)) . -436) (undo-tree-id201 . -1) (#("e" 0 1 (face nil fontified t)) . -437) (undo-tree-id202 . -1) 438 (428 . 438) (t 26009 10881 323618 501000)) nil (26009 10933 802043 912000) 0 nil])
([nil nil ((406 . 408) (#("(" 0 1 (fontified nil)) . -406) (396 . 407)) nil (26009 10933 802035 541000) 0 nil])
([nil nil ((#("str.decode()
" 0 3 (face font-lock-builtin-face fontified t) 3 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 13 (fontified t)) . 396) (undo-tree-id185 . 2) (undo-tree-id186 . -12) (undo-tree-id187 . -5) (undo-tree-id188 . -10) 406) nil (26009 10933 802023 2000) 0 nil])
([nil nil ((411 . 416) (410 . 412) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -410) (410 . 411) (apply yas--snippet-revive 403 411 #s(yas--snippet nil nil #s(yas--exit 410 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 410 nil) 2 nil nil nil nil)) (403 . 411) (#("decode" 0 6 (fontified nil)) . -403) (undo-tree-id179 . -6) (403 . 409) (#("de" 0 2 (fontified t)) . -403) (undo-tree-id180 . -2) (undo-tree-id181 . -2) 405 (400 . 405) (#("d" 0 1 (fontified t)) . -400) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("e" 0 1 (fontified t)) . -401) (undo-tree-id184 . -1) 402 (399 . 402) (396 . 399) (395 . 396) 370) nil (26009 10933 802018 510000) 0 nil])
([nil nil ((400 . 405) (#("u" 0 1 (fontified t)) . -400) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("c" 0 1 (fontified t)) . -401) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("e" 0 1 (fontified t)) . -402) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#(" " 0 1 (fontified t)) . -403) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 404 (396 . 404)) nil (26009 10933 802009 11000) 0 nil])
([nil nil ((488 . 500) (t 26009 10933 803619 308000)) nil (26009 10961 183261 497000) 0 nil])
([nil current ((447 . 454) (t 26009 10961 186953 65000)) nil (26009 10989 60718 810000) 0 nil])
nil
