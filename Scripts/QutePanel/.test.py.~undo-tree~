(undo-tree-save-format-version . 1)
"2aef23282807441210dfac69433bb3cd47c07e1a"
[nil nil nil nil (25587 34445 651943 871000) 0 nil]
([nil nil ((1 . 23) (t . -1)) nil (25587 34445 651942 808000) 0 nil])
([nil nil ((74 . 81) (64 . 74) (#("v" 0 1 (fontified t)) . -64) (undo-tree-id19 . -1) (#("e" 0 1 (fontified t)) . -65) (undo-tree-id20 . -1) (#("l" 0 1 (fontified t)) . -66) (undo-tree-id21 . -1) 67 (52 . 67) (#("q" 0 1 (fontified t)) . -52) (undo-tree-id22 . -1) (#("W" 0 1 (fontified t)) . -53) (undo-tree-id23 . -1) (#("o" 0 1 (fontified t)) . -54) (undo-tree-id24 . -1) 55 (34 . 55) (#(" " 0 1 (fontified t)) . -34) (undo-tree-id25 . -1) 35 (30 . 35) (24 . 30) (23 . 24) (22 . 23) 21) nil (25587 34445 651941 30000) 0 nil])
([nil nil ((82 . 84) (81 . 82) 80) nil (25587 34445 651934 13000) 0 nil])
([nil nil ((92 . 94) (#("p" 0 1 (fontified t)) . -92) (undo-tree-id18 . -1) 93 (83 . 93) (81 . 83)) nil (25587 34445 651932 743000) 0 nil])
([nil nil ((24 . 34) (24 . 25) 93) nil (25587 34445 651931 56000) 0 nil])
([nil nil ((127 . 129) (#("(" 0 1 (fontified nil)) . -127) (113 . 128) (#("-" 0 1 (fontified t)) . -113) (undo-tree-id16 . -1) (#(" " 0 1 (fontified t)) . -114) (undo-tree-id17 . -1) 115 (109 . 115)) nil (25587 34445 651929 916000) 0 nil])
([nil nil ((128 . 136)) nil (25587 34445 651927 257000) 0 nil])
([nil nil ((157 . 159) (#("(" 0 1 (fontified nil)) . -157) (148 . 158) (147 . 149) (#("(" 0 1 (fontified nil face font-lock-constant-face)) . -147) (140 . 148) (#("t" 0 1 (fontified t)) . -140) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 141 (139 . 141) (138 . 139) (137 . 138) 135) nil (25587 34445 651926 341000) 0 nil])
([nil nil ((138 . 139) (138 . 139)) nil (25587 34445 651923 109000) 0 nil])
([nil nil ((apply yas--snippet-revive 146 155 #s(yas--snippet nil nil #s(yas--exit 154 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 154 nil) 0 nil nil nil nil)) (146 . 155) (#("QWidget" 0 7 (fontified nil)) . -146) (146 . 153) (#("QWi" 0 3 (fontified t)) . -146) (undo-tree-id10 . -3) (undo-tree-id11 . -3) 149 (144 . 149) (#("-" 0 1 (fontified t)) . -144) (undo-tree-id12 . -1) (#(" " 0 1 (fontified t)) . -145) (undo-tree-id13 . -1) 146 (139 . 146)) nil (25587 34445 651921 736000) 0 nil])
([nil nil ((#("parent" 0 6 (fontified t)) . 174) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 174 174 nil nil nil t #s(yas--exit 175 nil))) #s(yas--exit 175 nil) 1 nil #s(yas--field 1 174 174 nil nil nil t #s(yas--exit 175 nil)) nil nil)) (162 . 181) (#("QHBoxLayout" 0 11 (fontified nil)) . -162) (162 . 173) (#("QHB" 0 3 (fontified t)) . -162) (undo-tree-id8 . -3) (undo-tree-id9 . -3) 165 (162 . 165) (156 . 162) (155 . 156) 153) nil (25587 34445 651916 196000) 0 nil])
([nil nil ((apply yas--snippet-revive 162 175 #s(yas--snippet nil (#s(yas--field 1 174 174 nil nil nil t #s(yas--exit 175 nil))) #s(yas--exit 175 nil) 1 nil #s(yas--field 1 174 174 nil nil nil t #s(yas--exit 175 nil)) nil nil))) nil (25587 34445 651912 964000) 0 nil])
([nil nil ((192 . 195) (#("a0" 0 2 (fontified nil)) . 192) (191 . 192) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 191 195 nil nil nil t #s(yas--exit 196 nil))) #s(yas--exit 196 nil) 2 nil #s(yas--field 1 191 195 nil nil nil t #s(yas--exit 196 nil)) nil nil)) (181 . 194) (#("setLayout" 0 9 (fontified nil)) . -181) (181 . 190) (#("setLa" 0 5 (fontified t)) . -181) (undo-tree-id6 . -5) (undo-tree-id7 . -5) 186 (176 . 186) (175 . 176) 173) nil (25587 34445 651911 567000) 0 nil])
([nil nil ((210 . 212) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -210) (210 . 211) (209 . 211) (#("(" 0 1 (fontified nil)) . -209) (208 . 210) (#("e" 0 1 (fontified t)) . -208) (undo-tree-id4 . -1) (#("l" 0 1 (fontified t)) . -209) (undo-tree-id5 . -1) 210 (206 . 210) (197 . 206) (apply yas--snippet-revive 181 197 #s(yas--snippet nil (#s(yas--field 1 191 195 nil nil nil t #s(yas--exit 196 nil))) #s(yas--exit 196 nil) 2 nil #s(yas--field 1 191 195 nil nil nil t #s(yas--exit 196 nil)) nil nil)) (196 . 197) 194) nil (25587 34445 651907 194000) 0 nil])
([nil nil ((nil rear-nonsticky nil 258 . 259) (nil fontified nil 211 . 259) (211 . 259) 210) nil (25587 34445 651903 785000) 0 nil])
([nil nil ((277 . 280) (276 . 278) (#("(" 0 1 (fontified nil)) . -276) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (267 . 277) (262 . 267) (261 . 262) 258) nil (25587 34445 651902 443000) 0 nil])
([nil nil ((291 . 293) (#("(" 0 1 (fontified nil)) . -291) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (282 . 292) (281 . 282) 279) nil (25587 34445 651898 843000) 0 nil])
([nil nil ((316 . 317)) nil (25587 34445 651839 509000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 262) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (t 25587 34445 655373 506000)) nil (25587 34470 729650 334000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 191) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (t 25587 34470 735373 849000)) nil (25587 34480 431498 978000) 0 nil])
([nil nil ((313 . 315) (#("'" 0 1 (fontified t face font-lock-string-face)) . -313) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 314 (#("'" 0 1 (fontified nil face font-lock-string-face)) . 314) (undo-tree-id42 . 1) (undo-tree-id43 . 1) (undo-tree-id44 . 1) (undo-tree-id45 . 1) (undo-tree-id46 . 1) (undo-tree-id47 . 1) (undo-tree-id48 . 1) (undo-tree-id49 . 1) (undo-tree-id50 . 1) (undo-tree-id51 . 1) (undo-tree-id52 . 1) (undo-tree-id53 . 1) (undo-tree-id54 . 1) (undo-tree-id55 . 1) (undo-tree-id56 . 1) (undo-tree-id57 . 1) (undo-tree-id58 . -1) (undo-tree-id59 . 1) (undo-tree-id60 . 1) (undo-tree-id61 . 1) (undo-tree-id62 . 1) (undo-tree-id63 . 1) (undo-tree-id64 . 1) (undo-tree-id65 . 1) (undo-tree-id66 . 1) (undo-tree-id67 . 1) (undo-tree-id68 . 1) (undo-tree-id69 . 1) (undo-tree-id70 . 1) (undo-tree-id71 . 1) (undo-tree-id72 . 1) (undo-tree-id73 . 1) (undo-tree-id74 . 1) (undo-tree-id75 . 1) (undo-tree-id76 . 1) (undo-tree-id77 . 1) (undo-tree-id78 . 1) (undo-tree-id79 . 1) (undo-tree-id80 . 1) (undo-tree-id81 . 1) (undo-tree-id82 . 1) (undo-tree-id83 . 1) (undo-tree-id84 . 1) (undo-tree-id85 . 1) (undo-tree-id86 . 1) (undo-tree-id87 . 1) (undo-tree-id88 . 1) (undo-tree-id89 . 1) (undo-tree-id90 . 1) (undo-tree-id91 . -1) (undo-tree-id92 . 1) (undo-tree-id93 . 1) (313 . 314) (#(" " 0 1 (fontified nil)) . -313) (undo-tree-id94 . -1) (313 . 314) (#("'" 0 1 (fontified nil face font-lock-string-face)) . -313) (undo-tree-id95 . -1) (297 . 314) (294 . 297) (#("f" 0 1 (fontified t face font-lock-string-face)) . -294) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -295) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -296) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -297) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) 298 (297 . 298) (293 . 297) (#(" " 0 1 (fontified nil)) . -293) (undo-tree-id148 . -1) (293 . 294) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -293) (undo-tree-id149 . -1) (280 . 294) (279 . 281) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -279) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (279 . 280) (278 . 280) (#("(" 0 1 (fontified nil)) . -278) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (276 . 279) (261 . 276) (260 . 261) (t 25587 34480 435373 987000) 211) nil (25587 34522 403362 179000) 0 nil])
([nil nil ((#(" 6 Free" 0 7 (fontified t face font-lock-string-face)) . 306) (undo-tree-id154 . -6) (undo-tree-id155 . -6) (undo-tree-id156 . -7) (undo-tree-id157 . -7) (undo-tree-id158 . -7) (undo-tree-id159 . -7) (undo-tree-id160 . -7) (undo-tree-id161 . -7) (undo-tree-id162 . -7) (undo-tree-id163 . -7) (undo-tree-id164 . -7) (undo-tree-id165 . -7) (undo-tree-id166 . -6) (undo-tree-id167 . -7) (undo-tree-id168 . -7) (undo-tree-id169 . -6) (undo-tree-id170 . -6) (undo-tree-id171 . -5) (undo-tree-id172 . -5) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -6) (undo-tree-id183 . -7) (undo-tree-id184 . -6) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -6) (undo-tree-id192 . -6) (undo-tree-id193 . -6) (undo-tree-id194 . -7) 312 (t 25587 34522 412041 247000)) nil (25587 34541 428154 234000) 0 nil])
([nil nil ((307 . 324) (t 25587 34541 432041 513000)) nil (25587 34561 680817 489000) 0 nil])
([nil nil ((314 . 319) (#("s" 0 1 (fontified t face font-lock-string-face)) . -314) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -315) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) 316 (314 . 316) (#("s" 0 1 (fontified t face font-lock-string-face)) . -314) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("?" 0 1 (fontified t face font-lock-string-face)) . -315) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 316 (306 . 316) (t 25587 34561 685375 129000)) nil (25587 34784 667023 89000) 0 nil])
([nil nil ((35 . 47) (35 . 36) 92 (t 25587 34784 672044 873000)) nil (25587 35205 362312 484000) 0 nil])
([nil nil ((42 . 43) (#("q" 0 1 (fontified t)) . 42) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1)) nil (25587 35205 362311 498000) 0 nil])
([nil nil ((59 . 64) (#("QF" 0 2 (fontified t)) . -59) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) 61 (51 . 61) (46 . 51) (#("QtG" 0 3 (fontified t)) . -46) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -3) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -1) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) 49 (48 . 49) (47 . 48)) nil (25587 35205 362307 645000) 0 nil])
([nil nil ((291 . 292) (291 . 292) 319) nil (25587 35205 362034 823000) 0 nil])
([nil nil ((330 . 333) (322 . 330) (308 . 322) (307 . 309) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -307) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (307 . 308) (306 . 308) (#("(" 0 1 (fontified nil)) . -306) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (301 . 307) (291 . 301) (#("d" 0 1 (fontified t)) . -291) (undo-tree-id227 . -1) (#("e" 0 1 (fontified t)) . -292) (undo-tree-id228 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -293) (undo-tree-id229 . -1) (#("a" 0 1 (fontified t)) . -294) (undo-tree-id230 . -1) (#("i" 0 1 (fontified t)) . -295) (undo-tree-id231 . -1) (#("l" 0 1 (fontified t)) . -296) (undo-tree-id232 . -1) (#("t" 0 1 (fontified t)) . -297) (undo-tree-id233 . -1) 298 (291 . 298) (#("Q" 0 1 (fontified t)) . -291) (undo-tree-id234 . -1) 292) nil (25587 35205 362032 622000) 0 nil])
([nil nil ((334 . 338)) nil (25587 35205 362015 599000) 0 nil])
([nil nil ((348 . 362) (340 . 348) (339 . 340) (t 25587 35205 365384 17000) 337) nil (25587 35228 355898 62000) 0 nil])
([nil nil ((#("setApplicationFont" 0 18 (fontified t)) . 344) (undo-tree-id306 . -17) (undo-tree-id307 . -14) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -4) (undo-tree-id324 . -4) (undo-tree-id325 . -4) (undo-tree-id326 . -4) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -5) (undo-tree-id337 . -5) (undo-tree-id338 . -5) (undo-tree-id339 . -6) (undo-tree-id340 . -6) (undo-tree-id341 . -6) (undo-tree-id342 . -6) (undo-tree-id343 . -6) (undo-tree-id344 . -6) (undo-tree-id345 . -6) (undo-tree-id346 . -6) (undo-tree-id347 . -6) (undo-tree-id348 . -6) (undo-tree-id349 . -7) (undo-tree-id350 . -7) (undo-tree-id351 . -7) (undo-tree-id352 . -7) (undo-tree-id353 . -7) (undo-tree-id354 . -8) (undo-tree-id355 . -8) (undo-tree-id356 . -8) (undo-tree-id357 . -9) (undo-tree-id358 . -9) (undo-tree-id359 . -9) (undo-tree-id360 . -10) (undo-tree-id361 . -10) (undo-tree-id362 . -10) (undo-tree-id363 . -10) (undo-tree-id364 . -11) (undo-tree-id365 . -11) (undo-tree-id366 . -11) (undo-tree-id367 . -12) (undo-tree-id368 . -12) (undo-tree-id369 . -12) (undo-tree-id370 . -13) (undo-tree-id371 . -13) (undo-tree-id372 . -13) (undo-tree-id373 . -14) (undo-tree-id374 . -14) (undo-tree-id375 . -14) (undo-tree-id376 . -14) (undo-tree-id377 . -14) (undo-tree-id378 . -15) (undo-tree-id379 . -15) (undo-tree-id380 . -15) (undo-tree-id381 . -15) (undo-tree-id382 . -15) (undo-tree-id383 . -16) (undo-tree-id384 . -16) (undo-tree-id385 . -16) (undo-tree-id386 . -17) (undo-tree-id387 . -17) (undo-tree-id388 . -17) (undo-tree-id389 . -18) (undo-tree-id390 . -18) (undo-tree-id391 . -18) (undo-tree-id392 . -18) (undo-tree-id393 . -18) (undo-tree-id394 . -18) (undo-tree-id395 . -18) (undo-tree-id396 . -18) (undo-tree-id397 . -18) (undo-tree-id398 . -18) (undo-tree-id399 . -18) (undo-tree-id400 . -17) (undo-tree-id401 . -17) (undo-tree-id402 . -17) (undo-tree-id403 . -17) (undo-tree-id404 . -18) (undo-tree-id405 . -18) (undo-tree-id406 . -17) (undo-tree-id407 . -18) (undo-tree-id408 . -18) (undo-tree-id409 . -18)) nil (25587 35228 355895 459000) 0 nil])
([nil nil ((353 . 359) (#("a0" 0 2 (fontified nil)) . 353) (undo-tree-id282 . -2) (undo-tree-id283 . 2) (352 . 353) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 352 359 nil nil nil t #s(yas--exit 360 nil))) #s(yas--exit 360 nil) 3 nil #s(yas--field 1 352 359 nil nil nil t #s(yas--exit 360 nil)) nil nil)) (344 . 355) (#("setFont" 0 7 (fontified nil)) . -344) (344 . 351) (#("setF" 0 4 (fontified t)) . -344) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) 348 (344 . 348)) nil (25587 35228 355490 693000) 0 nil])
([nil nil ((apply yas--snippet-revive 344 360 #s(yas--snippet nil (#s(yas--field 1 352 359 nil nil nil t #s(yas--exit 360 nil))) #s(yas--exit 360 nil) 3 nil #s(yas--field 1 352 359 nil nil nil t #s(yas--exit 360 nil)) nil nil))) nil (25587 35239 728296 597000) 0 nil])
([nil nil ((apply -2 361 461 undo--wrap-and-run-primitive-undo 361 461 ((361 . 363) 379)) (t 25587 35228 358717 665000)) nil (25587 35239 728293 610000) 0 nil])
([nil nil ((#(" Solid" 0 6 (fontified t face font-lock-string-face)) . 327) (undo-tree-id410 . -5) (undo-tree-id411 . -6) (t 25587 35239 732051 157000)) nil (25587 35262 971903 105000) 0 nil])
([nil nil ((#(" 6 Free" 0 7 (fontified t face font-lock-string-face)) . 320) (undo-tree-id416 . -6) (undo-tree-id417 . -6) (undo-tree-id418 . -6) (undo-tree-id419 . -7) (undo-tree-id420 . -6) (undo-tree-id421 . -7) (undo-tree-id422 . -7) (undo-tree-id423 . -7) (undo-tree-id424 . -7) (undo-tree-id425 . -7) (undo-tree-id426 . -7) (undo-tree-id427 . -7) (undo-tree-id428 . -7) (undo-tree-id429 . -7) (undo-tree-id430 . -7) (undo-tree-id431 . -7) (undo-tree-id432 . -6) (undo-tree-id433 . -6) (undo-tree-id434 . -5) (undo-tree-id435 . -5) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -7) (undo-tree-id445 . -6) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -6) (undo-tree-id449 . -6) (undo-tree-id450 . -6) (undo-tree-id451 . -7) 326 (t 25587 35262 978718 151000)) nil (25587 35273 644089 336000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 312) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1)) nil (25587 35273 643958 633000) 0 nil])
([nil nil ((66 . 79) (#("QFontD" 0 6 (fontified t)) . -66) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -5) (undo-tree-id509 . -5) (undo-tree-id510 . -5) (undo-tree-id511 . -5) (undo-tree-id512 . -5) (undo-tree-id513 . -6) (undo-tree-id514 . -6) (undo-tree-id515 . -6) (undo-tree-id516 . -6) (undo-tree-id517 . -6) (undo-tree-id518 . -6) (undo-tree-id519 . -6) (undo-tree-id520 . -6) (undo-tree-id521 . -6) (undo-tree-id522 . -6) (undo-tree-id523 . -6) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) 72 (64 . 72) (t 25587 35273 648718 304000)) nil (25587 35549 691259 497000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 361 363 nil nil nil nil #s(yas--exit 364 nil))) #s(yas--exit 364 nil) 4 nil #s(yas--field 1 361 363 nil nil nil nil #s(yas--exit 364 nil)) nil nil)) (347 . 364) (#("QFontDatabase" 0 13 (fontified nil)) . -347) (347 . 360) (#("QFont" 0 5 (fontified t)) . -347) (undo-tree-id465 . -5) (undo-tree-id466 . -5) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -3) (undo-tree-id475 . -3) (undo-tree-id476 . -3) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -5) (undo-tree-id481 . -5) (undo-tree-id482 . -5) (undo-tree-id483 . -5) (undo-tree-id484 . -5) (undo-tree-id485 . -5) (undo-tree-id486 . -5) (undo-tree-id487 . -5) (undo-tree-id488 . -5) 352 (347 . 352) (346 . 348) (#("(" 0 1 (fontified nil face font-lock-builtin-face)) . -346) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (341 . 347) (340 . 341) 339) nil (25587 35549 691240 525000) 0 nil])
([nil nil ((apply yas--snippet-revive 347 364 #s(yas--snippet nil (#s(yas--field 1 361 363 nil nil nil nil #s(yas--exit 364 nil))) #s(yas--exit 364 nil) 4 nil #s(yas--field 1 361 363 nil nil nil nil #s(yas--exit 364 nil)) nil nil))) nil (25587 35549 691227 656000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 361) (undo-tree-id462 . 1) (undo-tree-id463 . -1) (undo-tree-id464 . -1)) nil (25587 35549 691227 17000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face highlight-numbers-number)) . 361) (undo-tree-id458 . 1) (undo-tree-id459 . 1) (undo-tree-id460 . -1) (undo-tree-id461 . -1)) nil (25587 35549 691224 765000) 0 nil])
([nil nil ((apply yas--snippet-revive 363 373 #s(yas--snippet nil nil #s(yas--exit 372 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 372 nil) 5 nil nil nil nil)) (363 . 373) (#("families" 0 8 (fontified nil)) . -363) (363 . 371) (#("fa" 0 2 (fontified t)) . -363) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -2) (undo-tree-id457 . -2) 365 (362 . 365)) nil (25587 35549 691220 124000) 0 nil])
([nil nil ((nil rear-nonsticky nil 259 . 260) (nil fontified nil 255 . 260) (255 . 260) 254 (t 25587 35549 695388 761000)) nil (25587 35681 352937 830000) 0 nil])
([nil nil ((260 . 261)) nil (25587 35681 352936 652000) 0 nil])
([nil nil ((329 . 345) (#("FontAwesome" 0 11 (fontified t face font-lock-string-face)) . 329) (undo-tree-id527 . -10) (undo-tree-id528 . -10) (undo-tree-id529 . -10) (undo-tree-id530 . -11) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -10) (undo-tree-id534 . -4) (undo-tree-id535 . -8) (undo-tree-id536 . -8) (undo-tree-id537 . -7) (undo-tree-id538 . -7) (undo-tree-id539 . -6) (undo-tree-id540 . -6) (undo-tree-id541 . -5) (undo-tree-id542 . -5) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -11) (undo-tree-id552 . -10) (undo-tree-id553 . -10) (undo-tree-id554 . -10) (undo-tree-id555 . -10) (undo-tree-id556 . -11) (undo-tree-id557 . -11) 339) nil (25587 35681 352933 715000) 0 nil])
([nil nil ((apply 2 407 486 undo--wrap-and-run-primitive-undo 407 486 ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -407) 439)) (t 25587 35681 355390 569000)) nil (25587 35705 524711 636000) 0 nil])
([nil nil ((#(" Solid" 0 6 (fontified t face font-lock-string-face)) . 459) (undo-tree-id558 . -5) (undo-tree-id559 . -5) (undo-tree-id560 . -5) (undo-tree-id561 . -5) (undo-tree-id562 . -5) (undo-tree-id563 . -6) (undo-tree-id564 . -6)) nil (25587 35705 524708 846000) 0 nil])
([nil nil ((#("print(QFontDatabase().families())
" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 22 (fontified t) 22 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t face (rainbow-delimiters-depth-1-face)) 33 34 (fontified t)) . 352) (undo-tree-id565 . -33) (undo-tree-id566 . -32) (undo-tree-id567 . 2) (undo-tree-id568 . -33) (undo-tree-id569 . 29) (undo-tree-id570 . -6) (undo-tree-id571 . -32) (undo-tree-id572 . -32) (undo-tree-id573 . -32) (undo-tree-id574 . -32) (undo-tree-id575 . -32) (undo-tree-id576 . -34) 384 (t 25587 35705 528724 233000)) nil (25587 35712 507874 272000) 0 nil])
([nil nil ((406 . 422) (#("Font Awesome 6 Free" 0 19 (fontified t face font-lock-string-face)) . 406) (undo-tree-id577 . -18) (undo-tree-id578 . -19) (undo-tree-id579 . -18) (undo-tree-id580 . -18) (undo-tree-id581 . -12) (undo-tree-id582 . -19) (undo-tree-id583 . -19) (undo-tree-id584 . -19) (undo-tree-id585 . -18) (undo-tree-id586 . -19) (undo-tree-id587 . -18) (undo-tree-id588 . -3) (undo-tree-id589 . -3) (undo-tree-id590 . -11) (undo-tree-id591 . -11) (undo-tree-id592 . -12) (undo-tree-id593 . -12) (undo-tree-id594 . -13) (undo-tree-id595 . -13) (undo-tree-id596 . -18) (undo-tree-id597 . -18) (undo-tree-id598 . -18) (undo-tree-id599 . -19) (undo-tree-id600 . -19) 424 (t 25587 35712 512057 660000)) nil (25587 35768 593163 91000) 0 nil])
([nil nil ((apply -2 373 464 undo--wrap-and-run-primitive-undo 373 464 ((373 . 375) 397)) (t 25587 35768 595391 734000)) nil (25587 35864 598053 930000) 0 nil])
([nil nil ((apply -2 312 375 undo--wrap-and-run-primitive-undo 312 375 ((312 . 314) 338)) (t 25587 35864 602059 728000)) nil (25587 35881 177614 950000) 0 nil])
([nil nil ((apply 2 375 445 undo--wrap-and-run-primitive-undo 375 445 ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -375) (#<marker (moves after insertion) at 377 in test.py> . 2) 403))) nil (25587 35881 177611 744000) 0 nil])
([nil nil ((apply -2 354 447 undo--wrap-and-run-primitive-undo 354 447 ((354 . 356) 373)) (t 25587 35881 182059 963000)) nil (25587 35888 845475 576000) 0 nil])
([nil nil ((420 . 429) (410 . 420) (#("Noto Color Emoji" 0 16 (fontified t face font-lock-string-face)) . 410) (undo-tree-id601 . -15) (undo-tree-id602 . -15) (undo-tree-id603 . -15) (undo-tree-id604 . -15) (undo-tree-id605 . -16) (undo-tree-id606 . -15) (undo-tree-id607 . -3) (undo-tree-id608 . -3) (undo-tree-id609 . -9) (undo-tree-id610 . -9) (undo-tree-id611 . -15) (undo-tree-id612 . -15) (undo-tree-id613 . -15) (undo-tree-id614 . -16) (undo-tree-id615 . -16) 425 (t 25587 35888 848726 735000)) nil (25587 36041 248089 499000) 0 nil])
([nil nil ((464 . 466) (#("d" 0 1 (fontified t face font-lock-string-face)) . -464) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) 465 (453 . 465) (#("s" 0 1 (fontified t face font-lock-string-face)) . -453) (undo-tree-id627 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -454) (undo-tree-id628 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -455) (undo-tree-id629 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -456) (undo-tree-id630 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -457) (undo-tree-id631 . -1) 458 (447 . 458) (t 25587 36041 252062 179000)) nil (25587 46635 513394 641000) 0 nil])
([nil nil ((429 . 435) (t 25587 46635 518877 731000)) nil (25587 46724 193047 619000) 0 nil])
([nil nil ((#(" Solid" 0 6 (fontified t face font-lock-string-face)) . 429) (undo-tree-id632 . -5) (undo-tree-id633 . -5) (undo-tree-id634 . -5) (undo-tree-id635 . -5) (undo-tree-id636 . -5) (undo-tree-id637 . -5) (undo-tree-id638 . -5) (undo-tree-id639 . -5) (undo-tree-id640 . -5) (undo-tree-id641 . -5) (undo-tree-id642 . -5) (undo-tree-id643 . -5) (undo-tree-id644 . -5) (undo-tree-id645 . -5) (undo-tree-id646 . -6) (undo-tree-id647 . -6) (undo-tree-id648 . -6) (undo-tree-id649 . -6) (undo-tree-id650 . -6) (undo-tree-id651 . -6) (undo-tree-id652 . -5) (undo-tree-id653 . -5) (undo-tree-id654 . -4) (undo-tree-id655 . -4) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -2) (undo-tree-id659 . -2) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -6) (t 25587 46724 198879 17000)) nil (25587 46732 933232 780000) 0 nil])
([nil nil ((453 . 458) (#("weight" 0 6 (fontified t face font-lock-string-face)) . 453) (undo-tree-id663 . -5) (undo-tree-id664 . -6) (undo-tree-id665 . -6) (t 25587 46732 932212 476000)) nil (25587 46739 434612 119000) 0 nil])
([nil nil ((460 . 461) (#("s" 0 1 (fontified t face font-lock-string-face)) . 460) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (t 25587 46739 438879 234000)) nil (25587 46772 354718 225000) 0 nil])
([nil nil ((466 . 467) (460 . 461) 464 (t 25587 46772 358879 712000)) nil (25587 46783 327970 646000) 0 nil])
([nil nil ((453 . 459) (#("style" 0 5 (fontified t face font-lock-string-face)) . 453) (undo-tree-id668 . -4) (undo-tree-id669 . -5) (undo-tree-id670 . -5) (undo-tree-id671 . -4) (undo-tree-id672 . -4) (undo-tree-id673 . -3) (undo-tree-id674 . -3) (undo-tree-id675 . -2) (undo-tree-id676 . -2) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -5) (undo-tree-id680 . -5) (t 25587 46783 332213 198000)) nil (25587 46806 188945 259000) 0 nil])
([nil current ((461 . 465) (#("\"Solid\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face)) . 461) (undo-tree-id681 . -6) (undo-tree-id682 . -6) (undo-tree-id683 . -6) (undo-tree-id684 . -6) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -7) (undo-tree-id690 . -6) (undo-tree-id691 . -5) (undo-tree-id692 . -5) (undo-tree-id693 . -5) (undo-tree-id694 . -5) (undo-tree-id695 . -6) (undo-tree-id696 . -6) (undo-tree-id697 . -6) (undo-tree-id698 . -7) (undo-tree-id699 . -7) 467 (t 25587 46806 195546 861000)) nil (25587 46820 667839 245000) 0 nil])
nil
