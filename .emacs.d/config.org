#+TITLE: Emacs org init
#+AUTHOR: Yusuf Mohammad

* References
Please do check the following /configs/ as this one was heavily inspired by them.
 - https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org
 - https://protesilaos.com/dotemacs/
 - https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org
 - https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org
* Backbones
** Main Packages
#+BEGIN_SRC emacs-lisp
(use-package ivy :ensure t :config (ivy-mode 1))

(use-package avy
 :ensure t
 :init
 (setq ivy-use-virtual-buffers t
            ivy-count-format "%d/%d ")
 :commands 
	    (avy-goto-word-0
	    ivy-switch-buffers))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package counsel :ensure t :config (counsel-mode 1))

(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))
  
(use-package swiper
 :ensure t
 :bind ("C-s" . swiper))

(use-package which-key
  :ensure t
  :config (which-key-mode))

(use-package async
  :ensure t
  :init (dired-async-mode 1))
#+END_SRC

** Small Packages
    
#+BEGIN_SRC emacs-lisp
(use-package highlight :ensure t)
(use-package iedit :ensure t)
(use-package anzu :ensure t)
#+END_SRC

** Applications
#+BEGIN_SRC emacs-lisp
      (use-package ranger :ensure t)

      (use-package pandoc-mode
       :ensure t
       :hook (
       (markdown-mode . pandoc-mode)
       (pandoc-mode . pandoc-load-default-settings))
       )

       (use-package pdf-tools 
	:ensure t
  :init (pdf-tools-install) (general-define-key :states '(normal visual insert emacs) :keymaps 'pdf-view-mode-map "SPC" nil)
:config (general-define-key :states '(normal visual insert emacs) :keymaps 'pdf-view-mode-map "SPC" nil)
	:defer 10 :hook (pdf-view-mode . pdf-view-themed-minor-mode))
#+END_SRC

* Emacs tweaks
** Minor tweaks
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1 )		; delete excess backup versions silently
(setq version-control t )		; use version control
(setq vc-make-backup-files t )		; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
(setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
(setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )	; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 )	; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 80)		; toggle wrapping text at the 80th character
(setq initial-scratch-message "Welcome to Yusuf's Emacs") ; print a default message in the empty scratch buffer opened at startup
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(set-fringe-mode 10)        ; Give some breathing room
(column-number-mode)
(setq longlines-wrap-follows-window-size t)
(setq idle-update-delay 1)
(setq icomplete-compute-delay 1)
(setq gc-cons-threshold 200000000)
(setq read-process-output-max (* 3072 3072))
#+END_SRC
** Display Startup time
   #+begin_src emacs-lisp
   (defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))
	   
(add-hook 'emacs-startup-hook #'efs/display-startup-time)

   #+end_src

** Highlight current line
    #+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
    #+END_SRC
    
** display relative line numbers
    instead of using `global-display-line-numbers-mode` which will display line numbers in every single mode, which leads to undesired behavior in some cases (such as numbers in `lsp-ui-imenu` buffer) line numbers will be displayed in prog-mode only. 
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
  ;; (global-display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;; count the number of lines to use for line number width
  (setq-default display-line-numbers-width-start t)
#+END_SRC

** Scroll conservatively 
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** store customization in custom.el
    
#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :config
  (setq custom-file "~/.emacs.d/custom.el")

  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))

  (load custom-file))
#+END_SRC
** Enable Recent Files
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
;; update recent files list every 5 mins
(run-at-time nil (* 5 60) 'recentf-save-list)
#+END_SRC 
** Bidi aware cursor movement
    #+BEGIN_SRC emacs-lisp
  (setq visual-order-cursor-movement t)
;;  (define-key evil-normal-state-map "h" 'left-char)
;;  (define-key evil-normal-state-map "l" 'right-char)
;;  (define-key evil-normal-state-map [left] 'left-char)
;;  (define-key evil-normal-state-map [right] 'right-char)
;;  (define-key evil-visual-state-map "h" 'left-char)
;;  (define-key evil-visual-state-map "l" 'right-char)
;;  (define-key evil-visual-state-map [left] 'left-char)
;;  (define-key evil-visual-state-map [right] 'right-char)
    #+END_SRC
** Auto package update
   #+BEGIN_SRC emacs-lisp
    (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t
	    auto-package-update-interval 4)
    (auto-package-update-maybe))
   #+END_SRC
** Org mode as the default mode for scratch buffer
   #+BEGIN_SRC emacs-lisp
   (setq initial-major-mode 'org-mode)
   #+END_SRC
* Key bindings
** General Binding
#+BEGIN_SRC emacs-lisp
	(use-package general :ensure t
	  :config
	  (general-define-key
	   :states '(normal visual insert emacs)
	   :prefix "SPC"
	   :non-normal-prefix "C-SPC"
	   "C-'" 'avy-goto-word-0
	   ":" 'counsel-M-x
	   "a" '(:ignore t :which-key "Applications")
	   "ar" 'ranger
	   "ad" '(dired ".")
	   "b" '(:ignore t :which-key "Buffers")
	   "bb" 'ivy-switch-buffer
	   "bd" 'evil-delete-buffer
	   "bn" 'evil-next-buffer
	   "bp" 'evil-prev-buffer
	   "i" '(:ignore t :which-key "imenu and ivy")
	   "ii" 'imenu-list
	   "ic" 'counsel-imenu
	   "l" '(:ignore t :which-key "LSP")
	   "li" 'lsp-ui-imenu
	   "ld" 'lsp-ui-peek-find-definitions
	   "lr" 'lsp-ui-peek-find-references
	   "f" '(:ignore t :which-key "Files")
	   "ff" 'counsel-find-file
	   "fr" 'counsel-recentf
	   "fl" 'counsel-locate
	   "fe" (lambda () (interactive) (find-file "~/.emacs.d/init.el"))
	   "fcc" (lambda () (interactive) (find-file "~/.emacs.d/config.org"))
	   "ft" (lambda () (interactive) (find-file "~/Public/Syncthing Global/Notes/TODO.org"))
	   "fo" (lambda () (interactive) (find-file "~/Public/Syncthing Global/Notes/capture.org"))
	   "fcr" (lambda () (interactive) (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
	   "o" '(:ignore t :which-key "Global org-mode")
	   "oa" 'org-agenda-list
	   "oc" 'org-capture
	   "ol" 'org-store-link
	   "s" '(:ignore t :which-key "Spell check")
	   "sc" 'flyspell-correct-at-point
	   "ss" 'flyspell-correct-wrapper
	   "g" '(:ignore t :which-key "Git")
	   "gg" 'magit-status
	   "gf" 'counsel-git
	   "t" '(:ignore t :which-key "Themes")
	   "tt" 'counsel-load-theme
	   "t+" 'text-scale-adjust
	   "t-" 'text-scale-adjust
	   "h" '(:ignore t :which-key "Help")
	   "hf" 'counsel-describe-function
	   "hv" 'counsel-describe-variable
	   "hk" 'describe-key)
	   (general-define-key
	   :states '(normal visual)
	   :prefix "SPC o"
	   :non-normal-prefix "C-SPC o"
	    :keymaps 'org-mode-map
	    "d" '(:ignore t :which-key "Dates")
	    "dd" 'org-deadline
	    "ds" 'org-schedule
	    "e" '(:ignore t :which-key "Export")
	    "ee" 'org-export-dispatch
	    "ep" 'org-latex-export-to-pdf
	    "eb" 'org-beamer-export-to-pdf
	    "n" '(:ignore t :which-key "Create stuff")
	    "nt" 'org-table-create-with-table.el
	    "n|" 'org-table-create-or-convert-from-region
	    "o" '(:ignore t :which-key "open")
	    "oo" 'org-open-at-point
	    "t" '(:ignore t :which-key "Org Toggle Funcs")
	    "ti" 'org-toggle-inline-images
	    "tl" 'org-toggle-link-display
	    "tc" 'org-toggle-checkbox
	    "ge" 'org-edit-src-code
	    "ga" 'org-archive-subtree
	    "gc" '(:ignore t :which-key "Clock Commands")
	    "gci" 'org-clock-in
	    "gco" 'org-clock-out
      )
	   (general-define-key
	   :states '(normal visual insert emacs)
	   :prefix "SPC"
	   :non-normal-prefix "C-SPC"
	    :keymaps 'pandoc-mode-map
	    "p" 'pandoc-main-hydra/body)
	    (general-define-key
	    :states '(visual)
	    :keymaps 'evil-surround-mode-map
	    "s" 'evil-surround-region)
	   (general-define-key
	   :states '(normal visual insert emacs)
	   :prefix "SPC"
	   :non-normal-prefix "C-SPC"
	    :keymaps 'prog-mode-map
	    "pd" 'eldoc
	    "pj" 'xref-find-definitions
	    "pg" 'xref-find-definitions-other-window
	    "pr" 'xref-find-references
	    "pii" 'iedit-mode
	    "piH" 'iedit-restrict-function
	    "pin" 'iedit-expand-down-to-occurrence
	    "pip" 'iedit-expand-up-to-occurrence
	    "pi}" 'iedit-expand-down-a-line
	    "pi{" 'iedit-expand-up-a-line)
  (general-define-key
   :states '(normal visual insert emacs)
   :keymaps 'doc-view-mode-map
  "SPC" nil)
(general-define-key :states '(normal visual insert emacs) :keymaps 'pdf-view-mode-map "SPC" nil)  
	  )

	(defun config-reload ()
	  "Reloads ~/.emacs.d/config.org at runtime"
	  )
#+END_SRC

** Evil
*** Some other evil packages to consider
- evil-visual-mark-mode
- evil-snipe
- evil-mc
- evil-indent-plus
*** main config
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (global-undo-tree-mode)
    (setq evil-want-integration t)
    (setq-default evil-want-C-u-scroll t)
    (setq-default evil-want-C-i-jump t)
    :custom
    (evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (evil-global-set-key 'normal (kbd "C-w <left>") 'evil-window-left)
    (evil-global-set-key 'normal (kbd "C-w <right>") 'evil-window-right)
    (evil-global-set-key 'normal (kbd "C-w <up>") 'evil-window-up)
    (evil-global-set-key 'normal (kbd "C-w <down>") 'evil-window-down)
    (evil-global-set-key 'normal (kbd "<left>") 'left-char)
    (evil-global-set-key 'normal (kbd "<right>") 'right-char)
    (evil-global-set-key 'visual (kbd "<left>") 'left-char)
    (evil-global-set-key 'visual (kbd "<right>") 'right-char)
    
;; allow movement across visual lines
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (setq evil-auto-balance-windows nil)
    )
#+END_SRC
*** Escape key acts like C-g
#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
  ;; for some reason the above is not recommended see
  ;; https://emacs.stackexchange.com/questions/14755/how-to-remove-bindings-to-the-esc-prefix-key
  ;; the following is recommended
  ;; (define-key key-translation-map (kbd "C-<escape>") (kbd "ESC")) 
#+END_SRC
*** Additional Packages
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
    
  (use-package evil-org 
  :ensure t
  :hook (org-mode . evil-org-mode)
  :commands 'evil-org-mode)
  
  (use-package evil-numbers :ensure t :config 
  (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))
  
  (use-package evil-matchit :ensure t)
  
  (use-package evil-escape :ensure t)
  
  (use-package evil-easymotion :ensure t)
  
  (use-package evil-collection
  :ensure t
  :after evil
  :init (evil-collection-init))
  
  (use-package evil-snipe
  :ensure t
  :init 
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))

  ;; I am yet to see why the evil-leader key is necessary
  ;; (use-package evil-leader
  ;;   :ensure t
  ;;   :config (evil-leader/set-leader "<SPC>"))

  (use-package evil-commentary
    :ensure t
    :init (evil-commentary-mode))

  ;; (use-package evil-search-highlight-persist
  ;;   :ensure t
  ;;   :init (global-evil-search-highlight-persist t))

  (use-package evil-visualstar :ensure t)
  (global-evil-visualstar-mode)
#+END_SRC
*** Folding
    #+BEGIN_SRC emacs-lisp
    (use-package origami 
    :ensure t
    :after evil
    :hook (python-mode . origami-mode))
    #+END_SRC
* Eye candy 
** Powerline, beacon and rainbows
#+BEGIN_SRC emacs-lisp

  (use-package doom-modeline
    :ensure t
    :custom (setq doom-modeline-height 15)
    :init (doom-modeline-mode 1))
    
    (show-paren-mode)

    (use-package beacon
	 :ensure t
	 :config
	     (beacon-mode 1))
    (use-package rainbow-mode
       :ensure t
       :init
	 (add-hook 'prog-mode-hook 'rainbow-mode))

    (use-package rainbow-delimiters
       :ensure t
       :init
	 (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

    (use-package diminish
     :ensure t
     :commands 'diminish
     :config
     (diminish 'evil-org-mode)
     (diminish 'smartparens-mode)
     (diminish 'rainbow-mode)
     (diminish 'beacon-mode)
     (diminish 'evil-commentary-mode)
     (diminish 'evil-snipe-local-mode)
     (diminish 'undo-tree-mode)
     (diminish 'flyspell-mode)
     (diminish 'which-key-mode))
#+END_SRC
** Emojis and ligatures
   #+BEGIN_SRC emacs-lisp
	  (use-package company-emoji
		    :ensure t
		    :after company
		    :hook (org-mode . company-emoji-init))

	  (use-package pretty-mode
		 :ensure t
		 :commands (global-pretty-mode)
		 :config (global-pretty-mode t))

     ;;      (use-package all-the-icons)

     ;; (defun custom-modeline-mode-icon ()
     ;;   (format " %s"
     ;;     (propertize icon
     ;; 		'help-echo (format "Major-mode: `%s`" major-mode)
     ;; 		'face `(:height 1.2 :family ,(all-the-icons-icon-family-for-buffer)))))

   #+END_SRC
   
** Default font (Arabic and emoji fonts)
   also fix font not being applied in =emacsclient=, and set =Dejavu Sans Mono= as the default font for Arabic text
#+BEGIN_SRC emacs-lisp
    (setq text-scale-mode-step 1.05)
  (defun reapply-font (&optional frame)
      (set-face-attribute 'default nil
			  :family "Fira Code"
			  :height 135
			  :weight 'light
			  :width 'normal)
      (set-face-attribute 'variable-pitch nil :font "Fira Sans" :weight 'light :height 135)
    (set-fontset-font "fontset-default" 'arabic (font-spec :family "Dejavu Sans Mono"))
    (set-fontset-font "fontset-default" 'symbol (font-spec :family "Noto Color Emoji"))
  )

    (use-package unicode-fonts
       :ensure t
       :config
	(unicode-fonts-setup))
	
      (reapply-font)
      (add-hook 'after-make-frame-functions 'reapply-font)
#+END_SRC

** Themes
    
#+BEGIN_SRC emacs-lisp
    (use-package autothemer :ensure t)

    ;; modus-vivendi-theme
  (setq themes-list '(gotham-theme zerodark-theme spacemacs-theme ample-theme doom-themes modus-vivendi-theme))

  ; fetch the list of packages available 
  (unless package-archive-contents
    (package-refresh-contents))

  ; install the missing packages
  (dolist (theme themes-list)
    (unless (package-installed-p theme)
      (package-install theme)))

  (setq default-theme 'doom-dracula)
  (load-theme default-theme t)
#+END_SRC

*** Workaround for theme not applied to emacsclient frames
    #+BEGIN_SRC emacs-lisp
    (if (daemonp)
	(add-hook 'after-make-frame-functions
	    (lambda (frame)
		(with-selected-frame frame
		    (load-theme default-theme t))))
	(load-theme default-theme t))
    #+END_SRC
* ORG mode
** bidi support in org
   #+BEGIN_SRC emacs-lisp
  (defun set-bidi-env ()
  "interactive"
  (setq bidi-paragraph-direction 'nil))
  (add-hook 'org-mode-hook 'set-bidi-env)  
  
(setq org-latex-package-alist '("AUTO" "polyglossia" t ("xelatex" "lualatex")))
   #+END_SRC
** Capture setup
   #+BEGIN_SRC emacs-lisp
   (setq org-directory "~/Public/Syncthing Global/Notes/")
   (setq org-default-notes-file (concat org-directory "capture.org"))
   (setq org-capture-templates
   '(
     ("t" "Work/Personal Tasks")
     ("tw" "Work Task" entry (file+headline "~/Public/Syncthing Global/Notes/capture.org" "Work Tasks")
     "** TODO %?\n SCHEDULED: %^t  DEADLINE: %^t")
     
     ("tp" "Personal Task" entry (file+headline "~/Public/Syncthing Global/Notes/capture.org" "Personal Tasks")
     "** TODO %?\n SCHEDULED: %^t")
     
     ("i" "Interesting thingies")
     ("iq" "Interesting Quotes" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Interesting Quotes")
     "** %?\n %x\n CAPTURED on %u\n")
     
     ("ia" "Interesting Articles" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Interesting Articles")
"** %a\n %?\n CAPTURED on: %u\n")

     ("il" "Read Later" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Read Later")
"** TODO %?\n %a\n CAPTURED on: %t\n")

     ("ir" "Interesting Resources" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Interesting Resources")
"** %?\n %l\n CAPTURED on: %u\n")

     ("im" "Interesting Movies" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Interesting Movies")
"** %?\n %a\n CAPTURED on: %u\n")

     ("d" "Download Queue" entry (file+headline "~/Public/Syncthing Global/Notes/capture.org" "Downloads Queue" )
"** TODO %a\n CAPTURED on: %t\n" :prepend t :immediate-finish t)

     ("c" "Code Notes")
     ("cc" "General Code Notes" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Code Notes" "General")
"** %?\n #+BEGIN_SRC %^{prompt|python|bash|emacs-lisp|latex}\n%x\n#+END_SRC\n CAPTURED on: %u")

     ("cp" "Python Notes" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Code Notes" "Python tricks")
"** %?\n #+BEGIN_SRC python\n%x\n#+END_SRC\n CAPTURED on: %u")

     ("co" "Org Tricks" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Code Notes" "Org-tricks")
"** TODO %?\n #+BEGIN_QUOTE\n%x\n#+END_QUOTE\n %t\n")

     ("cm" "My Code" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Code Notes" "My Code")
"** TODO %?\n %F\n #+BEGIN_SRC %^{prompt|python|bash|emacs-lisp|latex}\n%x\n#+END_SRC\n %t\n")
)
)
   #+END_SRC
   
** General customization
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
  (require 'org-protocol)
  
  (use-package org-bullets
  :ensure t
  :after org-mode)
  ;; :commands org-bullets-mode)
  ;; :hook (org-mode . (lambda () (org-bullets-mode 1))))
  ;; :hook (org-mode . org-bullets-mode))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  
  (setq org-imenu-depth 3)
  
  ;; experimental
  (setq org-log-done "note")
  (org-agenda nil "a")
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-confirm-babel-evaluate nil)

  (setq org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "|" "DONE(d)" "CANCELLED(c)" "DELEGATED"))
	  org-todo-keyword-faces
	  '(("CANCELLED"  :foreground "#ff5555" :weight bold :underline t)
	    ("DELEGATED"  :foreground "#d75fd7" :weight bold :underline t))
	  org-agenda-span 7
	  org-agenda-skip-scheduled-if-done t
	  org-agenda-skip-deadline-if-done t
	  remember-data-file (quote ("~/Public/Syncthing Global/Notes/remember.org")))
	  
  (setq org-agenda-files (directory-files-recursively "~/Public/Syncthing Global/Notes/" "\\.org$"))
	  
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))
#+END_SRC

** Markup enhancements
   #+begin_src emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   #+end_src

** org-alert

#+BEGIN_SRC emacs-lisp
 (use-package org-notifications
 :ensure t
 :commands org-notification-start
 :config
     (setq org-notifications-non-agenda-file
	   '("~/Public/Syncthing Global/Notes/capture.org"
	     "~/Public/Syncthing Global/Notes/TODO.org"))
 )
#+END_SRC

* Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

** Key Bindings

*** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

*** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

*** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

*** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

*** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

*** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Programming Modes
** lsp
    please refer to [[https://emacs-lsp.github.io/lsp-mode/page/performance/][lsp-mode performance]] page for some of the below settings. 
    even after following the guide on the above link, pyls still have very high cpu usage and becomes unresponsive sometimes so regular python packages will be used
#+BEGIN_SRC emacs-lisp
  ;;     (use-package lsp-mode
  ;;       :ensure t
  ;;       :commands (lsp lsp-deferred)
  ;;       :after python-mode
  ;;       :config
  ;;       (setq lsp-enable-snippet t
  ;; 	    lsp-keymap-prefix "C-c l"
  ;; 	    lsp-log-io nil
  ;; 	    lsp-idle-delay 500
  ;; 	    lsp-enable-file-watchers nil
  ;;        )
  ;;       :hook (
  ;; 	(lsp-mode . lsp-enable-which-key-integration)
  ;; 	)
  ;;        )

  ;;        (use-package lsp-ui
  ;;        :ensure t
  ;; 	 :config (setq lsp-ui-doc-delay 2
  ;; 	 lsp-ui-imenu-auto-refresh t
  ;; 	 lsp-ui-doc-show-with-mouse nil)
  ;; 	 :commands lsp-ui-mode)
  ;;        (use-package lsp-ivy
  ;; 	 :ensure t
  ;; 	 :commands lsp-ivy-workspace-symbol)

  ;;        (use-package lsp-treemacs
  ;; 	 :ensure t
  ;; 	 :commands lsp-treemacs-errors-list)

  ;; 	(use-package lsp-pyright
  ;;     :ensure t
  ;;     :config (with-eval-after-load "lsp-mode"
  ;;       (add-to-list 'lsp-disabled-clients 'pyls)
  ;;       (add-to-list 'lsp-disabled-clients 'jedi)
  ;; (add-to-list 'lsp-enabled-clients 'pyright)) 
  ;;     :hook (python-mode . (lambda ()
  ;; 			    (require 'lsp-pyright)
  ;; 			    (lsp-deferred))))  ; or lsp-deferred 
    ;; (use-package lsp-jedi
    ;;   :ensure t
    ;;   :config
    ;;   (with-eval-after-load "lsp-mode"
    ;;     (add-to-list 'lsp-disabled-clients 'pyls)
    ;;     (add-to-list 'lsp-enabled-clients 'jedi)))
#+END_SRC
** Eclipse DATA files syntax highlighting

#+begin_src emacs-lisp
    (defun read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
    (insert-file-contents filePath)
    (split-string (buffer-string) "\n" t)))

    (setq eclipse-keywords-list (read-lines "eclipse_keywords"))
    (setq eclipse-constants-list (read-lines "eclipse_single_keywords"))

    (setq myeclipse-font-lock-keywords
    (let* (
    ;; define several category of keywords
    (x-types '("TITLE" "RUNSPEC" "GRID" "EDIT" "PROPS" "REGIONS" "SOLUTION" "SUMMARY" "SCHEDULE" "OPTIMIZE"))
     (x-constants eclipse-constants-list)
     (x-functions eclipse-keywords-list)

     ;; generate regex string for each category of keywords
     (x-types-regexp (regexp-opt x-types 'words))
     (x-constants-regexp (regexp-opt x-constants 'words))
     (x-functions-regexp (regexp-opt x-functions 'words)))

    `(
    (,"--\\(.*\\)" . font-lock-comment-face)
    (,x-types-regexp . font-lock-keyword-face)
    (,x-constants-regexp . font-lock-constant-face)
    (,x-functions-regexp . font-lock-function-name-face)
    ;; note: order above matters, because once colored, that part won't change.
    ;; in general, put longer words first
    )))

				 ;; autoload
    (define-derived-mode myeclipse-mode fundamental-mode "ECLIPSE mode"
    "Major mode for editing Eclipse DATA file"
    ;; code for syntax highlighting
    (setq font-lock-defaults '((myeclipse-font-lock-keywords)))
       (defun eclipse-outline-level () 1)
	  (setq-local outline-regexp "RUNSPEC\n\\|GRID\n\\|EDIT\n\\|PROP\n\\|REGIONS\n\\|SOLUTION\n\\|SUMMARY\n\\|SCHEDULE\n\\|OPTIMIZE\n")
	  (setq-local outline-level 'eclipse-outline-level)
(outline-minor-mode)
  )


				 ;; add the mode to the `features' list
				 (provide 'myeclipse-mode)


				 ;;; mylsl-mode.el ends here
   #+end_src
** eglot
   #+begin_src emacs-lisp
   (use-package eglot :ensure t :hook (python-mode . eglot-ensure))
   #+end_src
** Fly stuff
#+BEGIN_SRC emacs-lisp
     (use-package flycheck 
     :ensure t
     :init (global-flycheck-mode)
  :config (setq flycheck-idle-change-delay 1
  flycheck-display-errors-delay 1
  flycheck-idle-switch-buffer-delay 1))

     (use-package flycheck-pos-tip
     :ensure t
     :after flycheck
     :hook (flycheck-mode . flycheck-pos-tip-mode))

     ;; (use-package flycheck-status-emoji
     ;; :ensure t
     ;; :after flycheck
     ;; :hook (flycheck-mode . flycheck-status-emoji-mode))

     (use-package flycheck-color-mode-line
     :ensure t
     :after flycheck
     :hook (flycheck-mode . flycheck-color-mode-line-mode))
#+END_SRC
** Python
*** Elpy
   
 #+BEGIN_SRC emacs-lisp
    ;; pyvenv pytest pyenv-mode py-isort
    (use-package pyvenv :ensure t)
    (use-package pyenv-mode :ensure t)
   ;;  (use-package elpy
   ;;  :ensure t
   ;;  :commands elpy-enable
   ;;  :init
   ;;  (elpy-enable)
   ;;  :hook (python-mode . elpy-mode))

   ;;  ;; use flycheck instead of flymake
   ;;  (when (load "flycheck" t t)
   ;; (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
   ;; (add-hook 'elpy-mode-hook 'flycheck-mode))
    ;; (use-package flymake :ensure t) ;; What is the difference?.

    ;; (use-package elpy
    ;;   :ensure t
    ;;   :init (elpy-enable)
    ;;   :hook (flycheck-mode flymake-mode))
 #+END_SRC
*** Code Folding and Snippets Hooks
    #+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'evil-close-folds)
  (add-hook 'python-mode-hook 'hs-minor-mode)
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook 'which-function-mode)
    #+END_SRC
*** iPython
    #+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
    #+END_SRC
** LATEX
    
#+BEGIN_SRC emacs-lisp
;; (use-package auctex :ensure t)
;; (use-package company-auctex :ensure t)
(with-eval-after-load "tex"
  ;;   ;; (add-to-list 'TeX-view-program-list '("Zathura" "zathura %o"))
    (setcdr (assq 'output-pdf TeX-view-program-selection) '("Zathura")))

(setq TeX-source-correlate-start-server t)

;; set XeTeX mode in TeX/LaTeX
  (add-hook 'LaTeX-mode-hook
            (lambda()
              (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
              (setq TeX-command-default "XeLaTeX")
              (setq TeX-save-query nil)
              (setq TeX-show-compilation t)))
#+END_SRC
** Flutter
    
#+BEGIN_SRC emacs-lisp
;; Flutter stuff
;; (use-package dart-mode :ensure t)
;; (use-package flutter
;;     :after dart-mode
;;     :bind (:map dart-mode-map
;;                 ("C-M-x" . #'flutter-run-or-hot-reload)))

;; (use-package flutter-l10n-flycheck
;;     :after flutter
;;     :config
;;     (flutter-l10n-flycheck-setup))

#+END_SRC
** Shell
    
#+BEGIN_SRC emacs-lisp
	    (use-package company
	      :ensure t
	      :init (company-mode)
	      :config (setq
	      company-minimum-prefix-length 2
	      company-idle-delay 0.3
	      company-echo-delay 0.1
	      company-show-numbers t
	      company-tooltip-limit 5
	  ) ;; default is 0.2
	      :hook (
	      (prog-mode . company-mode)
	      (org-mode . company-mode)))
	    (use-package company-shell :ensure t)

	(use-package company-quickhelp
      :ensure t
	  :after company
	  :config
	  (setq company-quickhelp-idle-delay 0.1)
	  (company-quickhelp-mode 1))

(use-package company-box
  :hook (company-mode . company-box-mode))
	  
    ;; (use-package company-jedi
    ;;   :ensure t
    ;;   :commands (company-jedi)
    ;;   :after (company python-mode))

    (use-package company-statistics
      :ensure t
      :after company
      :config
      (company-statistics-mode))
#+END_SRC
** Version Control
    
#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :after eglot
  :ensure t
  :config
  (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
** Modes
    
#+BEGIN_SRC emacs-lisp
(use-package csv-mode :ensure t)
(use-package markdown-mode :ensure t)
(add-hook 'text-mode-hook 'visual-line-mode)
(use-package json-mode :ensure t)
(use-package highlight-numbers
 :ensure t
 :commands highlight-numbers-mode
 :hook (prog-mode . highlight-numbers-mode))
 
(use-package web-mode
  :mode (("\\.html?\\'" . web-mode)
         ("\\.css\\'"   . web-mode)
         ("\\.qss\\'"   . web-mode)
         ("\\.jsx?\\'"  . web-mode)
         ("\\.tsx?\\'"  . web-mode)
         ("\\.json\\'"  . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2) ; HTML
  (setq web-mode-css-indent-offset 2)    ; CSS
  (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+END_SRC
** Tweaks
    
#+BEGIN_SRC emacs-lisp
(use-package insert-shebang :ensure t)
(add-to-list 'load-path "/home/yusuf/.emacs.d/highlight-parentheses.el")
(use-package smartparens
  :ensure t
  :config (smartparens-global-mode)
:hook (prog-mode . smartparens-mode))
#+END_SRC
** Haskell
   
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode :ensure t)
#+END_SRC
