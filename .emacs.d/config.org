#+TITLE: Emacs org init
#+AUTHOR: Yusuf Mohammad
#+STARTUP: overview

* References
Please do check the following /configs/ as this one was heavily inspired by them.
 - https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org
 - https://protesilaos.com/dotemacs/
 - https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org
 - https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org
* Backbones
** Main Packages
#+BEGIN_SRC emacs-lisp
  (use-package ivy :ensure t :config (ivy-mode 1))

  (use-package avy
   :ensure t
   :init
   (setq ivy-use-virtual-buffers t
	      ivy-count-format "%d/%d ")
   :commands 
	      (avy-goto-word-0
	      ivy-switch-buffers))

  (use-package ivy-rich
    :ensure t
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel :ensure t :config (counsel-mode 1))

  (use-package ivy-prescient
    :ensure t
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  (use-package swiper
   :ensure t
   :bind ("C-s" . swiper))

  (use-package which-key
    :ensure t
    :config (which-key-mode))

  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC

** Small Packages
    
#+BEGIN_SRC emacs-lisp
  (use-package highlight :ensure t)
  (use-package iedit :ensure t)
  (use-package anzu :ensure t)
  (use-package undo-tree :ensure t)
  (use-package company-box :ensure t)
#+END_SRC

** Applications
*** ranger and pdf-tools
#+BEGIN_SRC emacs-lisp
      (use-package ranger :ensure t :init (ranger-override-dired-mode t) :config (setq ranger-width-preview 0.40
       ranger-show-literal nil
       ranger-max-preview-size 10
))

      (use-package pandoc-mode
       :ensure t
       :hook (
       (markdown-mode . pandoc-mode)
       (pandoc-mode . pandoc-load-default-settings))
       )

(defun unbind-spc-in-pdf-view-mode ()
"adding this line to use-package is not working, had to create a hook"
(general-define-key :states '(normal insert visual emacs) :keymaps 'pdf-view-mode-map "SPC" nil)
)
       (use-package pdf-tools 
	:ensure t
  :init (pdf-tools-install) 
:commands 'pdf-view-mode
:config (pdf-tools-install-noverify)
	:defer 10 :hook (pdf-view-mode . pdf-view-themed-minor-mode) (pdf-view-mode . unbind-spc-in-pdf-view-mode))
#+END_SRC

*** elfeed
News and tech
    #+begin_src emacs-lisp
	(use-package elfeed
	  :ensure t
	  :config
	(setq elfeed-feeds
	      '(
		;; programming
		("https://news.ycombinator.com/rss" hacker)
		("https://www.reddit.com/r/programming.rss" programming)
		("https://www.reddit.com/r/emacs.rss" emacs)

		;; programming languages
		("https://www.reddit.com/r/python.rss" python)


	("https://spreadprivacy.com/rss" tech)
	("http://feeds.reuters.com/news/artsculture" art philosophy)
	("http://feeds.reuters.com/reuters/healthNews" health)
	("http://feeds.reuters.com/reuters/scienceNews" science)
	("http://feeds.reuters.com/reuters/technologyNews" tech)
	("http://feeds.reuters.com/reuters/topNews" news)
	("http://feeds.reuters.com/Reuters/worldNews" news popular)
	("https://www.reddit.com/r/worldnews/.rss" news)
	("http://feeds.bbci.co.uk/news/world/rss.xml" news popular)
	("https://www.nytimes.com/svc/collections/v1/publish/https://www.nytimes.com/section/world/rss.xml" news popular)
	("http://www.aljazeera.com/xml/rss/all.xml" news)
	("http://feeds.feedburner.com/WarNewsUpdates" news)
	("https://www.theguardian.com/world/rss" news popular)
	("https://www.rt.com/rss/news" news popular)
	("http://www.independent.co.uk/news/world/rss" news popular)
	("https://www.thesun.co.uk/news/worldnews/feed" news)
	("https://sputniknews.com/export/rss2/world/index.xml" news)
	("https://www.vox.com/rss/world/index.xml" news cool)
	("http://feeds.feedburner.com/TechCrunch" tech)
	("http://feeds.arstechnica.com/arstechnica/technology-lab" tech)
	("http://www.computerworld.com/index.rss" tech)
	("http://feeds.feedburner.com/Makeuseof" tech)
	("http://feeds.bbci.co.uk/news/technology/rss.xml" tech)
	("http://feed.androidauthority.com" tech android)
	("https://fossbytes.com/feed/?x=1" tech linux)
	("https://itsfoss.com/feed/" tech linux)
	("https://feeds.feedburner.com/d0od" tech linux)
	("https://hackaday.com/blog/feed/" tech linux)
	("http://www.ahaparenting.com/RSSRetrieve.aspx?ID=13126&Type=RSS20" parenting)
	("http://www.parentingscience.com/parenting.xml" parenting science)
	("http://dadandburied.com/feed/" parenting)
	("http://www.psy-ed.com/wpblog/feed" parenting science)
	("http://feeds.feedburner.com/sciencealert-latestnews" science)
	("http://rss.sciam.com/ScientificAmerican-Global" science)
	("http://feeds.feedburner.com/AllDiscovermagazinecomContent" science)
	("https://www.wired.com/category/science/feed" science)
	("http://www.popsci.com/rss.xml" science)
	("https://www.linux.com/feeds/original-content/rss" tech linux)
	("https://www.linux.com/feeds/news/rss" tech linux)
	("https://www.linux.com/feeds/news/embedded-and-mobile/rss" tech linux)
	("https://www.linux.com/feeds/news/desktop/rss" tech linux)
	("https://aeon.co/feed.rss" philosophy cool)
	("https://lukesmith.xyz/rss.xml" cool linux tech)
("https://itwadi.com/rss.xml" tech linux arabic)
	))

	(setq-default elfeed-search-filter "@2-days-ago +unread")
	;; (setq-default elfeed-search-title-max-width 100)
	;; (setq-default elfeed-search-title-min-width 100)


    (setq elfeed-show-entry-switch #'elfeed-display-buffer)

    (defun elfeed-display-buffer (buf &optional act)
      (pop-to-buffer buf)
      (set-window-text-height (get-buffer-window) (round (* 0.5 (frame-height))))
      (other-window 1)
      )

    (defface relevant-elfeed-entry
      `((t :inherit border))
      "Marks a relevant Elfeed entry.")

    (defface important-elfeed-entry  
      `((t :inherit compilation-error))
      ;; `((t :background ,(color-lighten-name "OrangeRed2" 40)))
      "Marks an important Elfeed entry.")

    (push '(relevant relevant-elfeed-entry)
	  elfeed-search-face-alist)

    (push '(important important-elfeed-entry)
	  elfeed-search-face-alist)

    (defun score-elfeed-entry (entry)
      (let ((title (elfeed-entry-title entry))
	    (content (elfeed-deref (elfeed-entry-content entry)))
	    (score 0))
	(loop for (pattern n) in '(("petroleum engineering\\|oil industry\\|reservoir engineering" 2)
				   ("oil price" 2)
				   ("machine learning\\|data science" 1)
				   ("python\\|flutter" 1)
				   ("israel\\|iraq\\|iran" 1)
				   ("petroleum\\|oil" 1)
				   )
	      if (string-match pattern title)
	      do (incf score n)
	      if (string-match pattern content)
	      do (incf score n))
	(message "%s - %s" title score)

	;; store score for later in case I ever integrate machine learning
	(setf (elfeed-meta entry :my/score) score)

	(cond
	 ((= score 1)
	  (elfeed-tag entry 'relevant))
	 ((> score 1)
	  (elfeed-tag entry 'important)))
	entry))

    (add-hook 'elfeed-new-entry-hook 'score-elfeed-entry)

    )

    #+end_src

** Languagetool
   #+begin_src emacs-lisp
(use-package flycheck-languagetool
  :ensure t
  ;; :hook (text-mode . flycheck-languagetool-setup)
  :init
  (setq flycheck-languagetool-server-jar "/usr/share/java/languagetool/languagetool-server.jar"
	flycheck-languagetool-server-args "--port 8852"
	flycheck-languagetool-server-port 8852))
   #+end_src

* Emacs tweaks
** Minor tweaks
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1 )		; delete excess backup versions silently
(setq version-control t )		; use version control
(setq vc-make-backup-files t )		; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
(setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
(setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )	; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 )	; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 80)		; toggle wrapping text at the 80th character
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(set-fringe-mode 10)        ; Give some breathing room
(column-number-mode)
(setq longlines-wrap-follows-window-size t)
(setq idle-update-delay 1)
(setq icomplete-compute-delay 1)
(setq gc-cons-threshold 200000000)
(setq read-process-output-max (* 3072 3072))
#+END_SRC
** Display Startup time
   #+begin_src emacs-lisp
   (defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))
	   
(add-hook 'emacs-startup-hook #'efs/display-startup-time)

   #+end_src

** Highlight current line
    #+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
    #+END_SRC
    
** display relative line numbers
    instead of using `global-display-line-numbers-mode` which will display line numbers in every single mode, which leads to undesired behavior in some cases (such as numbers in `lsp-ui-imenu` buffer) line numbers will be displayed in prog-mode only. 
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
  ;; (global-display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;; count the number of lines to use for line number width
  (setq-default display-line-numbers-width-start t)
#+END_SRC

** Scroll conservatively 
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000)
#+END_SRC

** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** store customization in custom.el
    
#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :config
  (setq custom-file "~/.emacs.d/custom.el")

  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))

  (load custom-file))
#+END_SRC
** Enable Recent Files
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
;; update recent files list every 5 mins
(run-at-time nil (* 5 60) 'recentf-save-list)
#+END_SRC 
** Bidi aware cursor movement
    #+BEGIN_SRC emacs-lisp
  (setq visual-order-cursor-movement t)
;;  (define-key evil-normal-state-map "h" 'left-char)
;;  (define-key evil-normal-state-map "l" 'right-char)
;;  (define-key evil-normal-state-map [left] 'left-char)
;;  (define-key evil-normal-state-map [right] 'right-char)
;;  (define-key evil-visual-state-map "h" 'left-char)
;;  (define-key evil-visual-state-map "l" 'right-char)
;;  (define-key evil-visual-state-map [left] 'left-char)
;;  (define-key evil-visual-state-map [right] 'right-char)
    #+END_SRC
** Auto package update
   #+BEGIN_SRC emacs-lisp
    (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t
	    auto-package-update-interval 4)
    (auto-package-update-maybe))
   #+END_SRC
** Org mode as the default mode for scratch buffer
   #+BEGIN_SRC emacs-lisp
   (setq initial-major-mode 'org-mode)
   #+END_SRC
** Arabic as the default input method for multilingual input
   #+begin_src emacs-lisp
(setq default-input-method "arabic")
   #+end_src
** Don't show warnings buffer at startup
   #+begin_src emacs-lisp
(setq delayed-warnings-hook nil)
;; (org-agenda-list)
   #+end_src
* Key bindings
** General Binding
#+BEGIN_SRC emacs-lisp
	(use-package general :ensure t
	  :config
	  (general-define-key
	   :states '(normal visual insert emacs)
	   :prefix "SPC"
	   :non-normal-prefix "C-SPC"
	   "C-'" 'avy-goto-word-0
	   ":" 'counsel-M-x
	   "a" '(:ignore t :which-key "Applications")
	   "ar" 'ranger
	   "ad" (lambda () (interactive) (dired "~"))
	   "af" 'elfeed
           "am" 'mu4e
           "ac" (lambda () (interactive) (shell-command "kcolorchooser -print") (insert-buffer "*Shell Command Output*"))
	   "b" '(:ignore t :which-key "Buffers")
	   "bb" 'ivy-switch-buffer
	   "bd" 'evil-delete-buffer
	   "bn" 'evil-next-buffer
	   "bp" 'evil-prev-buffer
	   "i" '(:ignore t :which-key "imenu and ivy")
	   "ii" 'imenu-list
	   "ic" 'counsel-imenu
	   "l" '(:ignore t :which-key "LSP")
	   "li" 'lsp-ui-imenu
	   "ld" 'lsp-ui-peek-find-definitions
	   "lr" 'lsp-ui-peek-find-references
	   "f" '(:ignore t :which-key "Files")
	   "ff" 'counsel-find-file
	   "fr" 'counsel-recentf
	   "fl" 'counsel-locate
	   "fe" (lambda () (interactive) (find-file "~/.emacs.d/init.el"))
	   "fcc" (lambda () (interactive) (find-file "~/.emacs.d/config.org"))
	   "fch" (lambda () (interactive) (find-file "~/.config/herbstluftwm/autostart"))
	   "fcd" (lambda () (interactive) (find-file "~/.config/dunst/dunstrc"))
	   "fcx" (lambda () (interactive) (find-file "~/.config/sxhkd/apps_keys"))
	   "ft" (lambda () (interactive) (find-file "~/Public/Syncthing Global/Notes/TODO.org"))
	   "fo" (lambda () (interactive) (find-file "~/Public/Syncthing Global/Notes/capture.org"))
	   "fl" (lambda () (interactive) (find-file "~/Public/Syncthing Global/private/home.journal"))
	   "fcr" (lambda () (interactive) (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
	   "o" '(:ignore t :which-key "Global org-mode")
	   "oa" 'org-agenda
	   "oc" 'org-capture
	   "ol" 'org-store-link
           "ogcc" (lambda () (interactive) (org-clock-jump-to-current-clock))
	   "ogcx" 'org-clock-cancel
	   "os" '(:ignore t :which-key "org static blog")
	   "osc" 'org-static-blog-create-new-post
	   "osd" 'org-static-blog-create-new-draft
	   "oss" 'org-static-blog-publish
           "osf" (lambda () (interactive) (org-static-blog-publish-file buffer-file-name))
	   "s" '(:ignore t :which-key "Spell check")
	   "sc" 'flyspell-correct-at-point
	   "ss" 'flyspell-correct-wrapper
	   "g" '(:ignore t :which-key "Git")
	   "gg" 'magit-status
	   "gf" 'counsel-git
	   "t" '(:ignore t :which-key "Themes")
	   "tt" 'counsel-load-theme
	   "t+" 'text-scale-adjust
	   "t-" 'text-scale-adjust
	   ;; "h" '(:ignore t :which-key "Help")
	   )
	   (general-translate-key 'normal 'global-map (kbd "SPC h") (kbd "C-h"))
           (general-define-key :states 'normal "SPC h" (general-simulate-key "C-h"))
	   (general-define-key
	   :states '(normal visual)
	   :prefix "SPC o"
	   :non-normal-prefix "C-SPC o"
	    :keymaps 'org-mode-map
	    "/" 'org-sparse-tree
	    "d" '(:ignore t :which-key "Dates")
	    "dd" 'org-deadline
	    "ds" 'org-schedule
	    "e" '(:ignore t :which-key "Export")
	    "ee" 'org-export-dispatch
	    "ep" 'org-latex-export-to-pdf
	    "eb" 'org-beamer-export-to-pdf
	    "eh" 'org-mime-htmlize
	    "n" '(:ignore t :which-key "Create stuff")
	    "nt" 'org-table-create-with-table.el
	    "n|" 'org-table-create-or-convert-from-region
	    "na" (lambda () (interactive) (insert (string-join '("#+HTML: <span dir=\"rtl\">" "#+HTML:<center>" "...مع التقدير" "#+HTML:</center>" "#+HTML: </span>") "\n")))
	    "ne" (lambda () (interactive) (insert (string-join '("#+HTML: <span dir=\"ltr\">" "#+HTML: </span>") "\n")))
	    "ns" (lambda () (interactive)
		   (insert (string-join
			    '("-----"
			      "Yusuf Mohammad - Head of Petroleum Engineering Unit"
			      "BOC - WQ2 Department - Petroleum Engineering and Reservoir Section"
			      "Tel.: 07827656402  Ext. ") "\n")))
	    ;; "o" '(:ignore t :which-key "open")
	    "o" 'org-open-at-point
	    "t" '(:ignore t :which-key "Org Toggle Funcs")
	    "tt" 'org-todo
	    "ti" 'org-toggle-inline-images
	    "tl" 'org-toggle-link-display
	    "tc" 'org-toggle-checkbox
	    "ge" 'org-edit-src-code
	    "ga" 'org-archive-subtree
	    "gc" '(:ignore t :which-key "Clock Commands")
	    "gci" 'org-clock-in
	    "gco" 'org-clock-out
      )
	   (general-define-key :states '(normal motion visual) :prefix "SPC o b" :non-normal-prefix "C-SPC o b" :keymaps 'org-mode-map :prefix-map 'org-babel-map)
	   (general-define-key
	   :states '(normal visual insert emacs)
	   :prefix "SPC"
	   :non-normal-prefix "C-SPC"
	    :keymaps 'pandoc-mode-map
	    "p" 'pandoc-main-hydra/body)
	    (general-define-key
	    :states '(visual)
	    :keymaps 'evil-surround-mode-map
	    "s" 'evil-surround-region)
	   (general-define-key
	   :states '(normal visual insert emacs)
	   :prefix "SPC"
	   :non-normal-prefix "C-SPC"
	    :keymaps 'prog-mode-map
	    "pd" 'eldoc
	    "pj" 'xref-find-definitions
	    "pg" 'xref-find-definitions-other-window
	    "pr" 'xref-find-references
	    "pii" 'iedit-mode
	    "piH" 'iedit-restrict-function
	    "pin" 'iedit-expand-down-to-occurrence
	    "pip" 'iedit-expand-up-to-occurrence
	    "pi}" 'iedit-expand-down-a-line
	    "pi{" 'iedit-expand-up-a-line)
  (general-define-key
   :states '(normal visual insert emacs)
   :keymaps 'doc-view-mode-map
  "SPC" nil)
(general-define-key :states '(normal visual insert emacs) :keymaps 'pdf-view-mode-map (kbd "SPC") nil)  
(general-define-key :states '(normal visual) "C-u" 'evil-scroll-up)
  )

	(defun config-reload ()
	  "Reloads ~/.emacs.d/config.org at runtime"
	  )
#+END_SRC

** Evil
*** Some other evil packages to consider
- evil-visual-mark-mode
- evil-snipe
- evil-mc
- evil-indent-plus
*** main config
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (global-undo-tree-mode)
    (setq evil-want-integration t)
    (setq-default evil-want-C-u-scroll t)
    (setq-default evil-want-C-i-jump t)
    :custom
    (evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (evil-global-set-key 'normal (kbd "C-w <left>") 'evil-window-left)
    (evil-global-set-key 'normal (kbd "C-w C-<left>") 'evil-window-left)
    (evil-global-set-key 'normal (kbd "C-w <right>") 'evil-window-right)
    (evil-global-set-key 'normal (kbd "C-w C-<right>") 'evil-window-right)
    (evil-global-set-key 'normal (kbd "C-w <up>") 'evil-window-up)
    (evil-global-set-key 'normal (kbd "C-w C-<up>") 'evil-window-up)
    (evil-global-set-key 'normal (kbd "C-w <down>") 'evil-window-down)
    (evil-global-set-key 'normal (kbd "C-w C-<down>") 'evil-window-down)
    (evil-global-set-key 'normal (kbd "<left>") 'left-char)
    (evil-global-set-key 'normal (kbd "<right>") 'right-char)
    (evil-global-set-key 'visual (kbd "<left>") 'left-char)
    (evil-global-set-key 'visual (kbd "<right>") 'right-char)
    
;; allow movement across visual lines
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (setq evil-auto-balance-windows nil)
    )
#+END_SRC
*** Escape key acts like C-g
#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
  ;; for some reason the above is not recommended see
  ;; https://emacs.stackexchange.com/questions/14755/how-to-remove-bindings-to-the-esc-prefix-key
  ;; the following is recommended
  ;; (define-key key-translation-map (kbd "C-<escape>") (kbd "ESC")) 
#+END_SRC
*** Additional Packages
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
    
  (use-package evil-org 
  :ensure t
  :hook (org-mode . evil-org-mode)
  :commands 'evil-org-mode)
  
  (use-package evil-numbers :ensure t :config 
  (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))
  
  (use-package evil-matchit :ensure t)
  
  (use-package evil-escape :ensure t)
  
  (use-package evil-easymotion :ensure t)
  
  (use-package evil-collection
  :ensure t
  :after evil
  :init (evil-collection-init))
  
  (use-package evil-snipe
  :ensure t
  :init 
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))

  ;; I am yet to see why the evil-leader key is necessary
  ;; (use-package evil-leader
  ;;   :ensure t
  ;;   :config (evil-leader/set-leader "<SPC>"))

  (use-package evil-commentary
    :ensure t
    :init (evil-commentary-mode))

  ;; (use-package evil-search-highlight-persist
  ;;   :ensure t
  ;;   :init (global-evil-search-highlight-persist t))

  (use-package evil-visualstar :ensure t)
  (global-evil-visualstar-mode)
#+END_SRC
*** Folding
    #+BEGIN_SRC emacs-lisp
    (use-package origami 
    :ensure t
    :after evil
    :hook (python-mode . origami-mode))
    #+END_SRC
* Eye candy 
** Powerline, beacon and rainbows
#+BEGIN_SRC emacs-lisp

  ;; (use-package doom-modeline
  ;;   :ensure t
  ;;   :custom (setq doom-modeline-height 10)
  ;;   :init (doom-modeline-mode 1))
    
    (show-paren-mode)

    (use-package beacon
	 :ensure t
	 :config
	     (beacon-mode 1))
    (use-package rainbow-mode
       :ensure t
       :init
	 (add-hook 'prog-mode-hook 'rainbow-mode))

    (use-package rainbow-delimiters
       :ensure t
       :init
	 (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

    (use-package diminish
     :ensure t
     :commands 'diminish
     :config
     (diminish 'evil-org-mode)
     (diminish 'smartparens-mode)
     (diminish 'rainbow-mode)
     (diminish 'beacon-mode)
     (diminish 'evil-commentary-mode)
     (diminish 'evil-snipe-local-mode)
     (diminish 'undo-tree-mode)
     (diminish 'flyspell-mode)
     (diminish 'which-key-mode))
#+END_SRC
** Custom mode-line
   Parts have been copied from https://occasionallycogent.com/custom_emacs_modeline/index.html
   see https://www.emacswiki.org/emacs/ModeLineConfiguration for more useful info
#+begin_src emacs-lisp

(setq-default mode-line-format
(list
"  " mode-line-front-space mode-line-modified " "

'(:eval (when-let (vc vc-mode)
          (list " "
                (propertize (substring vc 5)
                            'face 'font-lock-constant-face)
                " ")))

 mode-line-buffer-identification
 (propertize " %m " 'face 'font-lock-string-face)
 
;; mode-line-misc-info
;; Started by writing this statement:
;; (if (member "which-function-mode" minor-mode-list) which-func-format "")
;; this turned out to not work unless the mode is loaded before modeline!
;; below is the correct way to do it
'(:eval (when-let (which-function-mode) which-func-format))
mode-line-position
'(:eval (when-let (pyenv-mode) pyenv-mode-mode-line-format))
;; '(:eval (when-let (flycheck-mode) flycheck-mode-line))

  ;; spaces to align right
'(:eval (propertize
         " " 'display
         `((space :align-to (- (+ right right-fringe right-margin)
                                              ,(+ 6 (string-width (concat evil-mode-line-tag "00% (0000,0000)" (format-time-string "%H:%M %d/%a-%m/%b")))))))))

mode-line-mule-info
evil-mode-line-tag
" "
'(:eval (format-time-string "  %H:%M %d/%a-%m/%b  "))
)
)
#+end_src

** Emojis and ligatures
   #+BEGIN_SRC emacs-lisp
	  (use-package company-emoji
		    :ensure t
		    :after company
		    :hook (org-mode . company-emoji-init))

	  (use-package pretty-mode
		 :ensure t
		 :commands (global-pretty-mode)
		 :config (global-pretty-mode t))

          (use-package all-the-icons :ensure t)
          (use-package all-the-icons-dired :ensure t)

     ;; (defun custom-modeline-mode-icon ()
     ;;   (format " %s"
     ;;     (propertize icon
     ;; 		'help-echo (format "Major-mode: `%s`" major-mode)
     ;; 		'face `(:height 1.2 :family ,(all-the-icons-icon-family-for-buffer)))))

   #+END_SRC
   
** Default font (Arabic and emoji fonts)
   also fix font not being applied in =emacsclient=, and set =Dejavu Sans Mono= as the default font for Arabic text
   
   ينبغي أن يظهر النص العربي بنفس الارتفاع وبخط نوتو سانس 
   
   هذه تجربة لمظهر النص العربي باستعمال خط أميري-ثابت العرض والذي يمكن استعماله ضمن النصوص البرمجية والجداول النصيّة دون مشاكل
   
#+BEGIN_SRC emacs-lisp
  (setq text-scale-mode-step 1.05)
;; reapply font settings on every new frame. see after-make-frame-functions hook
(defun reapply-font (&optional frame)
    (set-face-attribute 'default nil
			:family "IBM Plex mono"
			:height 135
			:weight 'normal
			:width 'normal)

;; Monospaced font with arabic support
;; (set-fontset-font "fontset-default" 'arabic (font-spec :family "Dejavu Sans Mono"))
;; (set-fontset-font "fontset-default" 'arabic (font-spec :family "Amiri Typewriter"))
(set-fontset-font "fontset-default" 'arabic (font-spec :family "Kawkab Mono" :size 10.5))

;; Arabic fallback font (search if non existant)
;; (set-fontset-font t 'arabic "Dejavu Sans Mono")
(set-fontset-font t 'arabic (font-spec :script 'arabic) nil 'append)

;; proportional font
(create-fontset-from-fontset-spec "-*-*-*-*-*-*-*-*-*-*-*-*-fontset-proportional")
(set-fontset-font "fontset-proportional" 'latin (font-spec :family "IBM Plex Sans" :height 135))
(set-fontset-font "fontset-proportional" 'arabic (font-spec :family "IBM Plex Sans Arabic"))
(set-face-attribute 'variable-pitch nil :font "IBM Plex Sans" :fontset "fontset-proportional")

;; display colored emojis in emacs
(set-fontset-font "fontset-default" 'symbol (font-spec :family "Noto Color Emoji"))

;; make org source blocks always monospaced
(set-face-attribute 'org-level-1 nil :height 160 :weight 'bold)
(set-face-attribute 'org-level-2 nil :height 145)
(set-face-attribute 'org-block nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch :box t :foreground "#b5bd68")
)

(use-package unicode-fonts
   :ensure t
   :config
      (unicode-fonts-setup))

    (add-hook 'after-make-frame-functions 'reapply-font)
#+END_SRC

** Themes 
#+BEGIN_SRC emacs-lisp
    (use-package autothemer :ensure t)

    ;; modus-vivendi-theme
  (setq themes-list '(gotham-theme kaolin-themes zerodark-theme spacemacs-theme ample-theme doom-themes modus-vivendi-theme))

  ; fetch the list of packages available 
  (unless package-archive-contents
    (package-refresh-contents))

  ; install the missing packages
  (dolist (theme themes-list)
    (unless (package-installed-p theme)
      (package-install theme)))

  (setq default-theme 'modus-vivendi)
  (load-theme default-theme t)
#+END_SRC

*** Workaround for theme not applied to emacsclient frames
    #+BEGIN_SRC emacs-lisp
    (if (daemonp)
	(add-hook 'after-make-frame-functions
	    (lambda (frame)
		(with-selected-frame frame
		    (load-theme default-theme t))))
	(load-theme default-theme t))
    #+END_SRC
* ORG mode
** General customization
#+BEGIN_SRC emacs-lisp
    (require 'org-tempo)
    (require 'org-protocol)

  (org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t) (python . t) (emacs-lisp . t) (latex . t)))

    (use-package org-bullets
    :ensure t
    :after org-mode)

    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'variable-pitch-mode)
    ;; (add-hook 'org-mode-hook 'svg-tag-mode)

    ;; Default todo states
    (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "CANCELLED(c)"))
	  org-todo-keyword-faces
	  '(("TODO"  :foreground "#fe5" :weight black :slant italic :family "Dejavu Sans Mono" :underline t)
	    ("NEXT"  :background "#059" :foreground "#fff" :weight regular :slant italic :family "Dejavu Sans Mono")
	    ("DONE"  :foreground "#272" :weight light :slant italic :family "Dejavu Sans Mono")
	    ("CANCELLED"  :background "#955" :weight light :slant italic :family "Dejavu Sans Mono"))
	  org-log-done 'note
	  org-imenu-depth 3
	  remember-data-file (quote ("~/Public/Syncthing Global/Notes/remember.org")))

  (append org-modules '(habits))
;; (use-package svg-lib)
;;   (use-package svg-tag-mode :commands svg-tag-mode :after svg-lib
;;    :config (setq svg-tag-tags
;;   '((" TODO " . ((lambda (tag) (svg-lib-tag "TODO"
;;    '(:margin 1 :background "#fc5" :foreground "#000" :font-family "Dejavu Sans Mono" :radius 5)))))
;;   (" CANCELLED " . ((lambda (tag) (svg-lib-tag "CANC"
;;    '(:margin 1 :background "#a11" :foreground "#f99" :font-family "Dejavu Sans Mono" :radius 5)))))
;;   (" INPROGRESS " . ((lambda (tag) (svg-lib-tag "ONGO"
;;    '(:margin 1 :background "#09f" :foreground "#fff" :font-family "Dejavu Sans Mono" :radius 5)))))
;;   (" WAITING " . ((lambda (tag) (svg-lib-tag "WAIT"
;;    '(:margin 1 :background "#09f" :foreground "#fff" :font-family "Dejavu Sans Mono" :radius 5)))))
;;   (" NEXT " . ((lambda (tag) (svg-lib-tag "NEXT"
;;    '(:margin 1 :background "#ff0" :foreground "#f00" :font-family "Dejavu Sans Mono" :radius 5)))))
;;   (" DONE " . ((lambda (tag) (svg-lib-tag "DONE"
;;    '(:margin 1 :background "#595" :foreground "#454" :font-family "Dejavu Sans Mono" :radius 5)))))
;;   (" DELEGATED " . ((lambda (tag) (svg-lib-tag "DELG"
;;    :background "#a11" :foreground "#f99" :radius 5 ))))
;;   ))
;;   )
#+END_SRC
** Agenda
   #+begin_src emacs-lisp
(setq org-agenda-window-setup "only-window"
      org-agenda-span 7
      org-agenda-start-on-weekday 1
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-files (directory-files-recursively "~/Public/Syncthing Global/Notes/" "^[A-Za-z_]\\w*\\.org$"))

;;Setup agenda icons
(setq org-agenda-category-icon-alist nil)

(setq agenda-categories-alist '(("WORK" "💼") ("SOFTWARE" "💻") ("SETUP" "🐧") ("EMAIL" "✉️") ("HOME" "🏠") ("WOOD" "🪵") ("FAMILY" "👪") ("REPORTS" "📊") ("INCOME" "💰") ("HABITS" "🥊") ("FRIENDS" "🤦") ("PERSONAL" "👤") ("BOOKS" "📚") ("PHONE" "☎️")))

(dolist (icon agenda-categories-alist) (add-to-list 'org-agenda-category-icon-alist `(,(car icon) ,(cdr icon) nil nil :width (16.) :ascent center)))

(defun format-sort-agenda () (interactive)
(setcar org-agenda-prefix-format '(agenda . "  %-2i  %?-2 t%s"))
(setcar org-agenda-sorting-strategy '(agenda habit-down priority-down time-up))
(setq line-spacing 10)
(setq org-agenda-starts-on-weekday 0)
;; (svg-tag-mode)
)

(add-hook 'org-agenda-mode-hook 'format-sort-agenda)
   #+end_src

** bidi support in org
   #+BEGIN_SRC emacs-lisp
  (defun set-bidi-env ()
  "interactive"
  (setq bidi-paragraph-direction 'nil))
  (add-hook 'org-mode-hook 'set-bidi-env)  
  
(setq org-latex-package-alist '("AUTO" "polyglossia" t ("xelatex" "lualatex")))
   #+END_SRC
** Capture setup
   #+BEGIN_SRC emacs-lisp
	 (setq org-directory "~/Public/Syncthing Global/Notes/")
	 (setq org-default-notes-file (concat org-directory "capture.org"))
(setq agenda-catcomp (mapconcat (lambda (x) (car x)) agenda-categories-alist "|"))

	 (setq org-capture-templates
	 `(
	   ("m" "Mail Tasks")
	   ("mf" "Follow up" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Mail Tasks")
	   "** TODO Follow up %:fromname %a :email:\n%?" :empty-lines 1)
	   ("mr" "Read Later" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Mail Tasks")
	   "** TODO Read %:subject %a :email:\n%?" :empty-lines 1)
	   ("t" "Work/Personal Tasks")
	   ("tw" "Work Task" entry (file+headline "~/Public/Syncthing Global/Notes/capture.org" "Work Tasks")
	   ,(concat "** TODO %?:work:%^G\n:PROPERTIES:\n:CATEGORY: %^{prompt|" agenda-catcomp "}\n:END:\n SCHEDULED: %^T  DEADLINE: %^t") :empty-lines 1)

	   ("tp" "Personal Task" entry (file+headline "~/Public/Syncthing Global/Notes/capture.org" "Personal Tasks")
	   ,(concat "** TODO %? :personal:\n:PROPERTIES:\n:CATEGORY: %^{prompt|" agenda-catcomp "}\n:END:\n SCHEDULED: %^t") :empty-lines 1)

   ("td" "Daily simple tasks" entry
       (file+olp+datetree "~/Public/Syncthing Global/Notes/capture.org" "Daily Simple Tasks")
,(concat "* TODO %?\n:PROPERTIES:\n:CATEGORY: %^{prompt|" agenda-catcomp "}\n:END:\n SCHEDULED: %t\n DEADLINE: %t")
       :jump-to-captured t)

	   ("i" "Interesting thingies")
	   ("iq" "Interesting Quotes" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Interesting Quotes")
	   "** %?\n %x\n CAPTURED on %u\n")

	   ("ia" "Interesting Articles" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Interesting Articles")
      "** %a\n %?\n CAPTURED on: %u\n")

	   ("il" "Read Later" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Read Later")
      "** TODO %?\n %a\n CAPTURED on: %t\n")

	   ("ir" "Interesting Resources" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Interesting Resources")
      "** %?\n %l\n CAPTURED on: %u\n")

	   ("im" "Interesting Movies" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Interesting Things" "Interesting Movies")
      "** %?\n %a\n CAPTURED on: %u\n")

	   ("d" "Download Queue" entry (file+headline "~/Public/Syncthing Global/Notes/capture.org" "Downloads Queue" )
      "** TODO %a\n CAPTURED on: %t\n" :prepend t :immediate-finish t)

	   ("c" "Code Notes")
	   ("cc" "General Code Notes" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Code Notes" "General")
      "** %?\n #+BEGIN_SRC %^{prompt|python|bash|emacs-lisp|latex}\n%x\n#+END_SRC\n CAPTURED on: %u")

	   ("cp" "Python Notes" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Code Notes" "Python tricks")
      "** %?\n #+BEGIN_SRC python\n%x\n#+END_SRC\n CAPTURED on: %u")

	   ("co" "Org Tricks" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Code Notes" "Org-tricks")
      "** TODO %?\n #+BEGIN_QUOTE\n%x\n#+END_QUOTE\n %t\n")

	   ("cm" "My Code" entry (file+olp "~/Public/Syncthing Global/Notes/capture.org" "Code Notes" "My Code")
      "** TODO %?\n %F\n #+BEGIN_SRC %^{prompt|python|bash|emacs-lisp|latex}\n%x\n#+END_SRC\n %t\n")

   ("v" "Voice" entry
       (file+olp+datetree "~/Public/Syncthing Global/Notes/capture.org" "Voice Memos")
"* Record \n\n #+begin_src sh\nrec %(format-time-string \"%Y-%m-%d-%H.%M.%S\").aiff\n#+end\_src\n\n* Play\n#+begin_src sh\nplay %(format-time-string \"%Y-%m-%d-%H.%M.%S\").aiff\n#+end_src\n"
       :immediate-finish t
       :jump-to-captured t)
      ))
      
   #+END_SRC
   
** Markup enhancements
   #+begin_src emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   #+end_src

** ORG notifications

#+BEGIN_SRC emacs-lisp
(use-package alert :ensure t :commands alert
 :config (setq alert-default-style 'libnotify
	       alert-fade-time 30
))

 ;; (use-package org-notifications
 ;; :after alert
 ;; :ensure t
 ;; :commands org-notification-start
 ;; :config
 ;;     (setq org-notifications-non-agenda-file
 ;; 	   '("~/Public/Syncthing Global/Notes/capture.org"
 ;; 	     "~/Public/Syncthing Global/Notes/TODO.org"))
 ;;     (org-notifications-start)
 ;; )

(use-package org-alert
 :ensure t
 :after alert
 :config
    (setq org-alert-interval (* 1800 5)) (org-alert-enable)
 )
#+END_SRC

** babel setup

*** python session in org-mode
    #+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("p" . "src python :session (concat \"*Python: \" (file-name-nondirectory (buffer-file-name)) \"*\") :results output :exports both :tangle yes"))
    #+end_src

*** do not indent org-src-blocks
    #+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
   (setq org-src-preserve-indentation t)
   (setq org-edit-src-content-indentation 0)
    #+end_src

** org static blog
   #+begin_src emacs-lisp
(use-package org-static-blog
  :ensure t
:commands (org-static-blog-create-new-post org-static-blog-create-new-draft org-static-blog-publish)
:config
(setq org-static-blog-publish-title "Tech Adventurs")
(setq org-static-blog-publish-url "https://yousufinternet.github.io/")
(setq org-static-blog-publish-directory "~/Documents/orgblog/")
(setq org-static-blog-posts-directory "~/Documents/orgblog/posts/")
(setq org-static-blog-drafts-directory "~/Documents/orgblog/drafts/")
(setq org-static-blog-enable-tags t)
(setq org-static-blog-use-preview t)
(setq org-export-with-toc t)
(setq org-export-with-section-numbers nil)

;; This header is inserted into the <head> section of every page:
;;   (you will need to create the style sheet at
;;    ~/projects/blog/static/style.css
;;    and the favicon at
;;    ~/projects/blog/static/favicon.ico)
(setq org-static-blog-page-header
"<meta name=\"author\" content=\"Yusuf Mohammad\">
<meta name=\"referrer\" content=\"no-referrer\">
<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
<link href=\"static/org-default-styling.css\" rel=\"stylesheet\" type=\"text/css\" />
<link href=\"static/floating_toc.css\" rel=\"stylesheet\" type=\"text/css\" />
<link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" />
<link rel=\"icon\" href=\"static/favicon.ico\">")

;; This preamble is inserted at the beginning of the <body> of every page:
;;   This particular HTML creates a <div> with a simple linked headline
(setq org-static-blog-page-preamble
"<div class=\"header\">
  <a href=\"https://yousufinternet.github.io\">Tech Adventurer</a>
</div>")

;; This postamble is inserted at the end of the <body> of every page:
;;   This particular HTML creates a <div> with a link to the archive page
;;   and a licensing stub.
(setq org-static-blog-page-postamble
"<div id=\"archive\">
  <a href=\"archive.html\">Other posts</a>
</div> ")

;; This HTML code is inserted into the index page between the preamble and
;;   the blog posts
(setq org-static-blog-index-front-matter
"<center><h2> <a href=\"index.html\"> 🏠 Home </a>|<a href=\"about.html\"> 💀 About </a>|<a href=\"gallery.html\"> 🌄 gallery </a>|<a href=\"index.html\"> 📔 Blog </a>|<a href=\"archive.html\"> 📚 Archive </a>|<a href=\"tags.html\"> 🔖 Tags </a>|<a href=\"rss.xml\"> 📢 RSS </a>|<a href=\"mailto:yusuf.mohammad@zoho.com\"> 📧 E-mail</a></h2></center>\n")
  )
   #+end_src

** Org mime
#+begin_src emacs-lisp
(use-package org-mime :ensure t)

#+end_src

* Mail
** Load mu4e and default config
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "/usr/share/emacs/site-lisp/mu4e"))
(use-package mu4e
 :defer 20
 :config
 (setq mu4e-contexts
       (list
	;; Work Exchange
	(make-mu4e-context
	 :name "YusufExchange"
	 :match-func (lambda (msg) (when msg (string-prefix-p "/YusufExchange" (mu4e-message-field msg :maildir))))
	 :vars '(
		 (mu4e-sent-folder . "/YusufExchange/Sent")
		 (mu4e-drafts-folder . "/YusufExchange/Drafts")
		 (mu4e-trash-folder . "/YusufExchange/Trash")
		 (smtpmail-smtp-server . "localhost")
		 (smtpmail-smtp-service . 1025)
		 (smtpmail-smtp-user . "ymohammad")
		 (user-mail-address . "yusuf.mohammad@westqurna2.com")
		 (user-full-name . "Yusuf Mohammad Al-Jumuaa")
		 )
	 )

	;; Work Exchange
	(make-mu4e-context
	 :name "ReservoirsSections"
	 :match-func (lambda (msg) (when msg (string-prefix-p "/ReservoirsSections" (mu4e-message-field msg :maildir))))
	 :vars '(
		 (mu4e-sent-folder . "/ReservoirsSections/Sent")
		 (mu4e-drafts-folder . "/ReservoirsSections/Drafts")
		 (mu4e-trash-folder . "/ReservoirsSections/Trash")
		 (smtpmail-smtp-server . "localhost")
		 (smtpmail-smtp-service . 1025)
		 (smtpmail-smtp-user . "soc.wq2.local\\reservoirs.sections")
		 (user-mail-address . "reservoirs@westqurna2.com")
		 (user-full-name . "Reservoirs and Petroleum Engineering Section")
		 )
	 )
	;; PETROLEUM UNIT EMAIL
	(make-mu4e-context
	 :name "PetroleumUnit"
	 :match-func (lambda (msg) (when msg (string-prefix-p "/PetroleumUnit" (mu4e-message-field msg :maildir))))
	 :vars '(
		 (mu4e-sent-folder . "/PetroleumUnit/Sent")
		 (mu4e-drafts-folder . "/PetroleumUnit/Drafts")
		 (mu4e-trash-folder . "/PetroleumUnit/Deleted")
		 (smtpmail-smtp-server . "localhost")
		 (smtpmail-smtp-service . 1025)
		 (smtpmail-smtp-user . "soc.wq2.local\\petroleum.unit")
		 (user-full-name . "Petroleum Engineering Unit")
		 (user-mail-address . "petroleum.unit@westqurna2.com")
		 (mu4e-compose-signature . (string-join
					    ("Petroleum Engineering Unit"
					     "Reservoirs and Petroleum Engineering Section" "West Qurna\2 Field Development Department" "Ext. 6678 | Tel. +9647827656402") "\n"))
		 )
	 )
	))

;; the maildirs you use frequently; access them with 'j' ('jump')
(setq   mu4e-maildir-shortcuts
    '((:maildir "/YusufExchange/Inbox" :key ?i)
      (:maildir "/PetroleumUnit/Inbox"   :key ?p)
      (:maildir "/PetroleumUnit/Sent"    :key ?u)
      (:maildir "/YusufExchange/Sent"    :key ?s)
      (:maildir "/YusufExchange/Drafts"    :key ?d)
      (:maildir "/Reservoirssections/Inbox"    :key ?r)
))

(setq
;; use mu4e for e-mail in emacs
mail-user-agent 'mu4e-user-agent
message-send-mail-function 'smtpmail-send-it
mu4e-maildir "~/Mail"
mu4e-confirm-quit nil
mu4e-get-mail-command "mbsync -c ~/.config/mbsync/config -a"
mu4e-headers-show-threads nil
mu4e-headers-include-related nil
mu4e-split-view 'horizontal
mu4e-compose-reply-to-address "Yusuf Mohammad <yusuf.mohammad@westqurna2.com>"
mu4e-change-filenames-when-moving t
mu4e-update-interval (* 5 60)
mu4e-use-fancy-chars t
mu4e-attachment-dir "~/Downloads/"
mu4e-view-show-images t
mu4e-view-show-addresses t
mu4e-compose-format-flowed t
message-kill-buffer-on-exit t
mu4e-headers-fields '((:human-date . 12) (:flags . 6) (:from-or-to . 20) (:subject))
)

(setq mu4e-bookmarks
'(
(:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key ?u)
 (:name "Today's messages" :query "date:today..now" :key ?t)
 (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key ?w)
 (:name "Last month" :query "date:1m.." :key ?m)
(:name "Dialy Activity" :query "subject:activity to:petroleum" :key ?a)
 (:name "Pdfs last week" :query "mime:application/pdf date:7d.. not subject:daily" :key ?p)
 (:name "Excels last week" :query "file:/.*\.xlsx/ date:7d.. not subject:daily" :key ?x)
 (:name "Section Management" :query "(from:dhiaa OR from:hassan OR from:reservoirs) and not subject:/.*daily.*/" :key ?s)
 (:name "Large Emails" :query "size:5m.." :key ?l)
))

(set-face-attribute 'mu4e-header-face nil :font "fontset-default")

(add-hook 'mu4e-main-mode-hook (lambda () (text-scale-set 2)))
(add-hook 'mu4e-headers-mode-hook (lambda () (text-scale-set 1.5)))
(add-hook 'mu4e-view-mode-hook (lambda () (text-scale-set 2)))
;; (add-hook 'mu4e-main-mode-hook 'mu4e-marker-icons-mode)
;; (add-hook 'mu4e-headers-mode-hook 'mu4e-marker-icons-mode)
;; (add-hook 'mu4e-header-mode-hook 'mu4e-marker-icons-mode)
)

;; (require 'mu4e)
#+end_src

** Eye Candy
*** Icons
 #+begin_src emacs-lisp
(defun reapply-marker-icons () 
(setq mu4e-headers-unread-mark    '("u" . "📩 ")
mu4e-headers-draft-mark     '("D" . "🚧 ")
mu4e-headers-flagged-mark   '("F" . "🚩 ")
mu4e-headers-new-mark       '("N" . "✨ ")
mu4e-headers-passed-mark    '("P" . "↪ ")
mu4e-headers-replied-mark   '("R" . "↩ ")
mu4e-headers-seen-mark      '("S" . "👁️ ")
mu4e-headers-trashed-mark   '("T" . "🗑️")
mu4e-headers-attach-mark    '("a" . "📎 ")
mu4e-headers-encrypted-mark '("x" . "🔑 ")
mu4e-headers-signed-mark    '("s" . "🖊 ")
))

(add-hook 'mu4e-header-mode-hook 'reapply-marker-icons)
(add-hook 'mu4e-main-mode-hook 'reapply-marker-icons)
(add-hook 'mu4e-headers-mode-hook 'reapply-marker-icons)
 #+end_src
*** color columns
    #+begin_src emacs-lisp
(use-package mu4e-column-faces
  :after mu4e
  :config (mu4e-column-faces-mode))
    #+end_src

** Edit mail with org-mode
#+begin_src emacs-lisp
(add-hook 'mu4e-compose-mode-hook 'org-mime-edit-mail-in-org-mode)
(setq org-mime-export-options '(:with-latex dvipng title nil :toc nil))
(add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart)
#+end_src

** mu4e alerts
#+begin_src emacs-lisp
(use-package mu4e-alert
  :after mu4e
  :init (mu4e-alert-enable-notifications)
  :config (mu4e-alert-set-default-style 'libnotify))
#+end_src

** Attach multiple files
   #+begin_src emacs-lisp
(defun compose-attach-marked-files ()
  "Compose mail and attach all the marked files from a dired buffer."
  (interactive)
  (let ((files (dired-get-marked-files)))
    (mu4e~compose-mail nil nil nil t)
    (dolist (file files)
          (if (file-regular-p file)
              (mml-attach-file file
                               (mm-default-file-encoding file)
                               nil "attachment")
            (message "skipping non-regular file %s" file)))))
   #+end_src

* Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

** Key Bindings

*** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

*** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

*** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

*** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

*** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

*** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

** Configuration

#+begin_src emacs-lisp

;; (use-package dired
;;   :ensure nil
;;   :commands (dired dired-jump)
;;   :bind (("C-x C-j" . dired-jump))
;;   :custom ((dired-listing-switches "-agho --group-directories-first"))
;;   :config
;;   (evil-collection-define-key 'normal 'dired-mode-map
;;     "h" 'dired-single-up-directory
;;     "l" 'dired-single-buffer))

;; (use-package dired-single
;;   :commands (dired dired-jump))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

;; (use-package dired-open
;;   :commands (dired dired-jump)
;;   :config
;;   ;; Doesn't work as expected!
;;   ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
;;   (setq dired-open-extensions '(("png" . "feh")
;; 				("mkv" . "mpv"))))

;; (use-package dired-hide-dotfiles
;;   :hook (dired-mode . dired-hide-dotfiles-mode)
;;   :config
;;   (evil-collection-define-key 'normal 'dired-mode-map
;;     "H" 'dired-hide-dotfiles-mode))

#+end_src

* Programming Modes
** lsp
    please refer to [[https://emacs-lsp.github.io/lsp-mode/page/performance/][lsp-mode performance]] page for some of the below settings. 
    even after following the guide on the above link, pyls still have very high cpu usage and becomes unresponsive sometimes so regular python packages will be used
#+BEGIN_SRC emacs-lisp
  ;;     (use-package lsp-mode
  ;;       :ensure t
  ;;       :commands (lsp lsp-deferred)
  ;;       :after python-mode
  ;;       :config
  ;;       (setq lsp-enable-snippet t
  ;; 	    lsp-keymap-prefix "C-c l"
  ;; 	    lsp-log-io nil
  ;; 	    lsp-idle-delay 500
  ;; 	    lsp-enable-file-watchers nil
  ;;        )
  ;;       :hook (
  ;; 	(lsp-mode . lsp-enable-which-key-integration)
  ;; 	)
  ;;        )

  ;;        (use-package lsp-ui
  ;;        :ensure t
  ;; 	 :config (setq lsp-ui-doc-delay 2
  ;; 	 lsp-ui-imenu-auto-refresh t
  ;; 	 lsp-ui-doc-show-with-mouse nil)
  ;; 	 :commands lsp-ui-mode)
  ;;        (use-package lsp-ivy
  ;; 	 :ensure t
  ;; 	 :commands lsp-ivy-workspace-symbol)

  ;;        (use-package lsp-treemacs
  ;; 	 :ensure t
  ;; 	 :commands lsp-treemacs-errors-list)

  ;; 	(use-package lsp-pyright
  ;;     :ensure t
  ;;     :config (with-eval-after-load "lsp-mode"
  ;;       (add-to-list 'lsp-disabled-clients 'pyls)
  ;;       (add-to-list 'lsp-disabled-clients 'jedi)
  ;; (add-to-list 'lsp-enabled-clients 'pyright)) 
  ;;     :hook (python-mode . (lambda ()
  ;; 			    (require 'lsp-pyright)
  ;; 			    (lsp-deferred))))  ; or lsp-deferred 
    ;; (use-package lsp-jedi
    ;;   :ensure t
    ;;   :config
    ;;   (with-eval-after-load "lsp-mode"
    ;;     (add-to-list 'lsp-disabled-clients 'pyls)
    ;;     (add-to-list 'lsp-enabled-clients 'jedi)))
#+END_SRC
** Eclipse DATA files syntax highlighting

#+begin_src emacs-lisp
(defun provide-myeclipse-mode ()
    (defun read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
    (insert-file-contents filePath)
    (split-string (buffer-string) "\n" t)))

    (defvar match-from-outline-regex)
    (defvar eclipse-main-sections)
    (setq eclipse-main-sections '("RUNSPEC" "GRID" "EDIT" "PROPS" "REGIONS" "SOLUTION" "SUMMARY" "SCHEDULE" "OPTIMIZE"))
    (defvar eclipse-keywords-list)
    (setq eclipse-keywords-list (read-lines "~/.emacs.d/eclipse_keywords"))
    (defvar eclipse-constants-list)
    (setq eclipse-constants-list (read-lines "~/.emacs.d/eclipse_single_keywords"))

       ;; (defun eclipse-outline-level () 1)
       (defun eclipse-outline-level ()
"Return 1 if outline-regex match is a section, and 2 if its a keyword with records"
(setq match-from-outline-regex (match-string-no-properties 0))
(if (member match-from-outline-regex eclipse-main-sections) 1
 (if (member match-from-outline-regex eclipse-keywords-list) 2 (if (member match-from-outline-regex eclipse-constants-list) 3 nil)))
)

    (setq myeclipse-font-lock-keywords
    (let* (
    ;; define several category of keywords
    (x-types '("TITLE" "RUNSPEC" "GRID" "EDIT" "PROPS" "REGIONS" "SOLUTION" "SUMMARY" "SCHEDULE" "OPTIMIZE"))
     (x-constants eclipse-constants-list)
     (x-functions eclipse-keywords-list)

     ;; generate regex string for each category of keywords
     (x-types-regexp (regexp-opt x-types 'words))
     (x-constants-regexp (regexp-opt x-constants 'words))
     (x-functions-regexp (regexp-opt x-functions 'words)))

    `(
    (,"--\\(.*\\)" . font-lock-comment-face)
    (,"'\\(.*\\)'" . font-lock-string-face)
    (,x-types-regexp . font-lock-keyword-face)
    (,x-constants-regexp . font-lock-constant-face)
    (,x-functions-regexp . font-lock-builtin-face)
    ;; (,x-functions-regexp . font-lock-function-name-face)
    ;; note: order above matters, because once colored, that part won't change.
    ;; in general, put longer words first
    )))

				 ;; autoload
    (define-derived-mode myeclipse-mode prog-mode "ECLIPSE mode"
    "Major mode for editing Eclipse DATA file"
    ;; code for syntax highlighting
    (setq font-lock-defaults '((myeclipse-font-lock-keywords)))
	  ;; (setq-local outline-regexp "RUNSPEC\\|GRID\\|EDIT\\|PROPS\\|REGIONS\\|SOLUTION\\|SUMMARY\\|SCHEDULE\\|OPTIMIZE")
    (setq-local outline-regexp (regexp-opt (append eclipse-main-sections eclipse-keywords-list eclipse-constants-list) 'words))
	  (setq-local outline-level 'eclipse-outline-level)
(outline-minor-mode)
  )


				 ;; add the mode to the `features' list
				 (provide 'myeclipse-mode)
)
(provide-myeclipse-mode)

				 ;;; mylsl-mode.el ends here
   #+end_src
** eglot
   #+begin_src emacs-lisp
   (use-package eglot :ensure t :hook (python-mode . eglot-ensure))
   #+end_src
** Fly stuff
#+BEGIN_SRC emacs-lisp
     (use-package flycheck 
     :ensure t
     :init (global-flycheck-mode)
:commands flycheck-mode
  :config (setq flycheck-idle-change-delay 1
  flycheck-display-errors-delay 1
  flycheck-idle-switch-buffer-delay 1))

     (use-package flycheck-pos-tip
     :ensure t
     :after flycheck
     :hook (flycheck-mode . flycheck-pos-tip-mode))

     ;; (use-package flycheck-status-emoji
     ;; :ensure t
     ;; :after flycheck
     ;; :hook (flycheck-mode . flycheck-status-emoji-mode))

     (use-package flycheck-color-mode-line
     :ensure t
     :after flycheck
     :hook (flycheck-mode . flycheck-color-mode-line-mode))
#+END_SRC
** Python
*** Elpy
   
 #+BEGIN_SRC emacs-lisp
    ;; pyvenv pytest pyenv-mode py-isort
    (use-package pyvenv :ensure t)
    (use-package pyenv-mode :ensure t :commands pyenv-mode-mode-line-format)
   ;;  (use-package elpy
   ;;  :ensure t
   ;;  :commands elpy-enable
   ;;  :init
   ;;  (elpy-enable)
   ;;  :hook (python-mode . elpy-mode))

   ;;  ;; use flycheck instead of flymake
   ;;  (when (load "flycheck" t t)
   ;; (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
   ;; (add-hook 'elpy-mode-hook 'flycheck-mode))
    ;; (use-package flymake :ensure t) ;; What is the difference?.

    ;; (use-package elpy
    ;;   :ensure t
    ;;   :init (elpy-enable)
    ;;   :hook (flycheck-mode flymake-mode))
 #+END_SRC
*** Code Folding and Snippets Hooks
    #+BEGIN_SRC emacs-lisp
(use-package which-function-mode :commands which-func-format)
(add-hook 'python-mode-hook 'evil-close-folds)
(add-hook 'python-mode-hook 'hs-minor-mode)
(add-hook 'python-mode-hook 'yas-minor-mode)
(add-hook 'python-mode-hook 'which-function-mode)
    #+END_SRC
*** iPython
    #+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
    #+END_SRC
** LATEX
    
#+BEGIN_SRC emacs-lisp
;; (use-package auctex :ensure t)
;; (use-package company-auctex :ensure t)
(with-eval-after-load "tex"
  ;;   ;; (add-to-list 'TeX-view-program-list '("Zathura" "zathura %o"))
    (setcdr (assq 'output-pdf TeX-view-program-selection) '("Zathura")))

(setq TeX-source-correlate-start-server t)

;; set XeTeX mode in TeX/LaTeX
  (add-hook 'LaTeX-mode-hook
            (lambda()
              (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
              (setq TeX-command-default "XeLaTeX")
              (setq TeX-save-query nil)
              (setq TeX-show-compilation t)))
#+END_SRC
** Flutter
    
#+BEGIN_SRC emacs-lisp
;; Flutter stuff
;; (use-package dart-mode :ensure t)
;; (use-package flutter
;;     :after dart-mode
;;     :bind (:map dart-mode-map
;;                 ("C-M-x" . #'flutter-run-or-hot-reload)))

;; (use-package flutter-l10n-flycheck
;;     :after flutter
;;     :config
;;     (flutter-l10n-flycheck-setup))

#+END_SRC
** Shell
    
#+BEGIN_SRC emacs-lisp
	    (use-package company
	      :ensure t
	      :init (company-mode)
	      :config (setq
	      company-minimum-prefix-length 2
	      company-idle-delay 0.3
	      company-echo-delay 0.1
	      company-show-numbers t
	      company-tooltip-limit 5
	  )
	      :hook (
	      (prog-mode . company-mode)
	      (org-mode . company-mode)))
	    (use-package company-shell :ensure t)

	(use-package company-quickhelp
      :ensure t
	  :after company
	  :config
	  (setq company-quickhelp-idle-delay 0.1)
	  (company-quickhelp-mode 1))

(use-package company-box
  :hook (company-mode . company-box-mode))
	  
    ;; (use-package company-jedi
    ;;   :ensure t
    ;;   :commands (company-jedi)
    ;;   :after (company python-mode))

    (use-package company-statistics
      :ensure t
      :after company
      :config
      (company-statistics-mode))
#+END_SRC
** Version Control
    
#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t :commands magit-get-current-branch)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :after eglot
  :ensure t
  :config
  (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
** Additional Modes
    
#+BEGIN_SRC emacs-lisp
(use-package csv-mode :ensure t)
(use-package markdown-mode :ensure t)
(add-hook 'text-mode-hook 'visual-line-mode)
(use-package json-mode :ensure t)
(use-package highlight-numbers
 :ensure t
 :commands highlight-numbers-mode
 :hook (prog-mode . highlight-numbers-mode))

(use-package hldeger-mode) 

(use-package web-mode
  :mode (("\\.html?\\'" . web-mode)
         ("\\.css\\'"   . web-mode)
         ("\\.qss\\'"   . web-mode)
         ("\\.jsx?\\'"  . web-mode)
         ("\\.tsx?\\'"  . web-mode)
         ("\\.json\\'"  . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2) ; HTML
  (setq web-mode-css-indent-offset 2)    ; CSS
  (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+END_SRC
** Tweaks
    
#+BEGIN_SRC emacs-lisp
(use-package insert-shebang :ensure t)
(add-to-list 'load-path "/home/yusuf/.emacs.d/highlight-parentheses.el")
(use-package smartparens
  :ensure t
  :config (smartparens-global-mode)
:hook (prog-mode . smartparens-mode))
#+END_SRC
** Haskell
   
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode :ensure t)
#+END_SRC

* Alert on startup finish

  #+begin_src emacs-lisp
(setq initial-scratch-message
 (concat "Welcome to Yusuf's Emacs\n\n"
 (mapconcat  (lambda (x) (format "[[%s]]" x)) recentf-list "\n")
 "\n\nELISP Evaluation area:\n#+begin_src emacs-lisp\n(message \"Hello World\")\n#+end_src")) ; print a default message in the empty scratch buffer opened at startup
(reapply-font)
(alert "daemon loaded successfully")
  #+end_src
